---
layout: post
title:  "fcn.7831b5a0 @ ebea46c6b17785efc2ebcb24ad99656c"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.7831b5a0
- **Origin (md5):** ebea46c6b17785efc2ebcb24ad99656c
- **VirusTotal:** [virustotal.com/gui/file/ebea46c6b17785efc2ebcb24ad99656c][virustotal_ref]

# Code Tags
<span class="tag" id="FILE">FILE</span>


# Behaviour Tags
<span class="bhv-tag" id="na">N/A</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.7831b5a0@ebea46c6b17785efc2ebcb24ad99656c">fcn.7831b5a0</a><br>@ebea46c6b17785efc2ebcb24ad99656c</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
mov ebp, esp
push 0xffffffffffffffff
push 0x783b917a
mov eax, dword
push eax
sub esp, 0x84
mov eax, dword[0x783e90cc]
xor eax, ebp
mov dword[ebp-0x24], eax
push eax
lea eax, [ebp-0xc]
mov dword
mov eax, dword[ebp+0xc]
cmp dword[eax], 0
jne 0x7831b80b
mov ecx, dword[ebp+0x10]
cmp dword[ecx], 0
jne 0x7831b5f3
push 0x2b9
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831b5f3
int3
mov eax, dword[ebp+0x10]
mov ecx, dword[eax]
mov dword[ebp-0x84], ecx
mov edx, dword[ebp-0x84]
sub edx, 1
mov dword[ebp-0x84], edx
cmp dword[ebp-0x84], 0x3f
ja case.0x7831b627.2
mov eax, dword[ebp-0x84]
movzx ecx, byte[eax+0x7831bba0]
jmp dword[ecx*4+0x7831bb84]
mov edx, dword[ebp+0xc]
mov eax, dword[ebp+0x10]
mov ecx, dword[eax]
mov dword[edx], ecx
mov edx, dword[ebp+0xc]
mov dword[edx+4], 0
jmp 0x7831b80b
mov eax, dword[ebp+0xc]
mov ecx, dword[ebp+0x10]
mov edx, dword[ecx+4]
mov dword[eax+4], edx
mov eax, dword[ebp+0xc]
mov ecx, dword[eax+4]
mov edx, dword[ebp+0xc]
mov eax, dword[edx+4]
mov ecx, dword[ecx]
push eax
mov edx, dword[ecx+4]
call edx
mov eax, dword[ebp+0xc]
mov dword[eax], 4
mov eax, 1
jmp 0x7831bb66
mov ecx, dword[ebp+0xc]
mov edx, dword[ebp+0x10]
mov eax, dword[edx+4]
mov dword[ecx+4], eax
mov ecx, dword[ebp+0xc]
mov edx, dword[ecx+4]
mov eax, dword[ebp+0xc]
mov ecx, dword[eax+4]
mov edx, dword[edx]
push ecx
mov eax, dword[edx+4]
call eax
mov ecx, dword[ebp+0xc]
mov dword[ecx], 8
mov eax, 1
jmp 0x7831bb66
mov edx, dword[ebp+0x10]
mov eax, dword[edx+4]
push eax
push 0
call fcn.7831b4a0
mov dword[ebp-0x14], eax
cmp dword[ebp-0x14], 0
jne 0x7831b6cb
xor eax, eax
jmp 0x7831bb66
mov ecx, dword[ebp-0x14]
push ecx
call dword[sym.imp.KERNEL32.dll_GlobalLock]
mov dword[ebp-0x10], eax
cmp dword[ebp-0x10], 0
jne 0x7831b6f2
push 0x2d6
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831b6f2
int3
push 0
mov eax, dword[ebp-0x10]
mov ecx, dword[eax+0xc]
push ecx
call dword[sym.imp.GDI32.dll_CopyMetaFileA]
mov edx, dword[ebp-0x10]
mov dword[edx+0xc], eax
mov eax, dword[ebp-0x10]
cmp dword[eax+0xc], 0
jne 0x7831b72b
mov ecx, dword[ebp-0x14]
push ecx
call dword[sym.imp.KERNEL32.dll_GlobalUnlock]
mov edx, dword[ebp-0x14]
push edx
call dword[sym.imp.KERNEL32.dll_GlobalFree]
xor eax, eax
jmp 0x7831bb66
mov eax, dword[ebp-0x14]
push eax
call dword[sym.imp.KERNEL32.dll_GlobalUnlock]
mov ecx, dword[ebp+0xc]
mov edx, dword[ebp-0x14]
mov dword[ecx+4], edx
mov eax, dword[ebp+0xc]
mov dword[eax], 0x20
mov eax, 1
jmp 0x7831bb66
mov ecx, dword[ebp+0xc]
mov dword[ecx], 0x10
mov edx, dword[ebp+0xc]
mov dword[edx+4], 0
jmp 0x7831b80b
mov eax, dword[ebp+0xc]
mov dword[eax], 2
mov ecx, dword[ebp+0x10]
cmp dword[ecx+4], 0
jne 0x7831b78f
push 0x2ee
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831b78f
int3
mov eax, dword[ebp+0x10]
cmp dword[eax+4], 0
jne 0x7831b79d
call sym.MFC80D.DLL_Ordinal_1563
mov ecx, dword[ebp+0x10]
mov edx, dword[ecx+4]
push edx
call dword[sym.imp.KERNEL32.dll_lstrlenW]
mov dword[ebp-0x1c], eax
push 2
mov eax, dword[ebp-0x1c]
add eax, 1
push eax
call fcn.782fd840
add esp, 8
mov dword[ebp-0x18], eax
mov ecx, dword[ebp+0xc]
mov edx, dword[ebp-0x18]
mov dword[ecx+4], edx
cmp dword[ebp-0x18], 0
jne 0x7831b7d7
xor eax, eax
jmp 0x7831bb66
mov eax, dword[ebp-0x1c]
lea ecx, [eax+eax+2]
push ecx
mov edx, dword[ebp+0x10]
mov eax, dword[edx+4]
push eax
mov ecx, dword[ebp-0x1c]
lea edx, [ecx+ecx+2]
push edx
mov eax, dword[ebp-0x18]
push eax
call fcn.78213d30
add esp, 0x10
mov eax, 1
jmp 0x7831bb66
xor eax, eax
jmp 0x7831bb66
mov ecx, dword[ebp+0xc]
mov edx, dword[ebp+0x10]
mov eax, dword[ecx]
cmp eax, dword[edx]
je 0x7831b82b
push 0x303
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831b82b
int3
mov edx, dword[ebp+0x10]
mov eax, dword[edx]
mov dword[ebp-0x88], eax
mov ecx, dword[ebp-0x88]
sub ecx, 1
mov dword[ebp-0x88], ecx
cmp dword[ebp-0x88], 0x3f
ja case.0x7831b85f.2
mov edx, dword[ebp-0x88]
movzx eax, byte[edx+0x7831bbf8]
jmp dword[eax*4+0x7831bbe0]
mov ecx, dword[ebp+0x10]
mov edx, dword[ecx+4]
push edx
mov eax, dword[ebp+0xc]
mov ecx, dword[eax+4]
push ecx
call fcn.7831b4a0
mov dword[ebp-0x20], eax
cmp dword[ebp-0x20], 0
jne 0x7831b889
xor eax, eax
jmp 0x7831bb66
mov edx, dword[ebp+0xc]
mov eax, dword[ebp-0x20]
mov dword[edx+4], eax
mov eax, 1
jmp 0x7831bb66
mov ecx, dword[ebp+0xc]
cmp dword[ecx+4], 0
jne 0x7831b8b9
push 0x314
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831b8b9
int3
mov eax, dword[ebp+0x10]
cmp dword[eax+4], 0
jne 0x7831b8d6
push 0x315
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831b8d6
int3
push 1
lea edx, [ebp-0x6c]
push edx
mov eax, dword[ebp+0x10]
mov ecx, dword[eax+4]
mov edx, dword[ebp+0x10]
mov eax, dword[edx+4]
mov ecx, dword[ecx]
push eax
mov edx, dword[ecx+0x30]
call edx
test eax, eax
je 0x7831b8fb
xor eax, eax
jmp 0x7831bb66
cmp dword[ebp-0x6c], 0
je 0x7831b915
push 0x31e
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831b915
int3
mov dword[ebp-0x74], 0
mov dword[ebp-0x70], 0
push 0
push 0
mov ecx, dword[ebp-0x70]
push ecx
mov edx, dword[ebp-0x74]
push edx
mov eax, dword[ebp+0xc]
mov ecx, dword[eax+4]
mov edx, dword[ebp+0xc]
mov eax, dword[edx+4]
mov ecx, dword[ecx]
push eax
mov edx, dword[ecx+0x14]
call edx
push 0
push 0
mov eax, dword[ebp-0x70]
push eax
mov ecx, dword[ebp-0x74]
push ecx
mov edx, dword[ebp+0x10]
mov eax, dword[edx+4]
mov ecx, dword[ebp+0x10]
mov edx, dword[ecx+4]
mov eax, dword[eax]
push edx
mov ecx, dword[eax+0x14]
call ecx
push 0
push 0
mov edx, dword[ebp-0x60]
push edx
mov eax, dword[ebp-0x64]
push eax
mov ecx, dword[ebp+0xc]
mov edx, dword[ecx+4]
push edx
mov eax, dword[ebp+0x10]
mov ecx, dword[eax+4]
mov edx, dword[ebp+0x10]
mov eax, dword[edx+4]
mov ecx, dword[ecx]
push eax
mov edx, dword[ecx+0x1c]
call edx
test eax, eax
je 0x7831b995
xor eax, eax
jmp 0x7831bb66
push 0
push 0
mov eax, dword[ebp-0x70]
push eax
mov ecx, dword[ebp-0x74]
push ecx
mov edx, dword[ebp+0xc]
mov eax, dword[edx+4]
mov ecx, dword[ebp+0xc]
mov edx, dword[ecx+4]
mov eax, dword[eax]
push edx
mov ecx, dword[eax+0x14]
call ecx
push 0
push 0
mov edx, dword[ebp-0x70]
push edx
mov eax, dword[ebp-0x74]
push eax
mov ecx, dword[ebp+0x10]
mov edx, dword[ecx+4]
mov eax, dword[ebp+0x10]
mov ecx, dword[eax+4]
mov edx, dword[edx]
push ecx
mov eax, dword[edx+0x14]
call eax
mov eax, 1
jmp 0x7831bb66
mov ecx, dword[ebp+0xc]
cmp dword[ecx+4], 0
jne 0x7831b9fc
push 0x335
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831b9fc
int3
mov eax, dword[ebp+0x10]
cmp dword[eax+4], 0
jne 0x7831ba19
push 0x336
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831ba19
int3
mov edx, dword[ebp+0xc]
mov eax, dword[edx+4]
push eax
push 0
push 0
push 0
mov ecx, dword[ebp+0x10]
mov edx, dword[ecx+4]
mov eax, dword[ebp+0x10]
mov ecx, dword[eax+4]
mov edx, dword[edx]
push ecx
mov eax, dword[edx+0x1c]
call eax
test eax, eax
je 0x7831ba45
xor eax, eax
jmp 0x7831bb66
mov eax, 1
jmp 0x7831bb66
mov ecx, dword[ebp+0x10]
cmp dword[ecx+4], 0
jne 0x7831ba6c
push 0x340
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831ba6c
int3
mov eax, dword[ebp+0xc]
cmp dword[eax+4], 0
jne 0x7831ba89
push 0x341
push 0x781f08e8
call sym.MFC80D.DLL_Ordinal_1363
test eax, eax
je 0x7831ba89
int3
mov edx, dword[ebp+0xc]
mov eax, dword[edx+4]
push eax
lea ecx, [ebp-0x78]
call sym.MFC80D.DLL_Ordinal_9174
mov dword[ebp-4], 0
mov ecx, dword[ebp+0xc]
mov edx, dword[ecx+4]
push edx
lea ecx, [ebp-0x7c]
call sym.MFC80D.DLL_Ordinal_9174
mov eax, dword[ebp+0xc]
cmp dword[eax+4], 0
je 0x7831bac7
lea ecx, [ebp-0x7c]
call sym.MFC80D.DLL_Ordinal_1093
mov dword[ebp-0x8c], eax
jmp 0x7831bad1
mov dword[ebp-0x8c], 0
mov ecx, dword[ebp+0x10]
cmp dword[ecx+4], 0
je 0x7831baea
lea ecx, [ebp-0x78]
call sym.MFC80D.DLL_Ordinal_1093
mov dword[ebp-0x90], eax
jmp 0x7831baf4
mov dword[ebp-0x90], 0
push 0
mov edx, dword[ebp-0x8c]
push edx
mov eax, dword[ebp-0x90]
push eax
call dword[sym.imp.KERNEL32.dll_CopyFileA]
mov dword[ebp-0x80], eax
lea ecx, [ebp-0x7c]
call sym.MFC80D.DLL_Ordinal_673
mov dword[ebp-4], 0xffffffff
lea ecx, [ebp-0x78]
call sym.MFC80D.DLL_Ordinal_673
mov eax, dword[ebp-0x80]
jmp 0x7831bb66
mov ecx, dword[ebp+0xc]
cmp dword[ecx+4], 0
je 0x7831bb36
xor eax, eax
jmp 0x7831bb66
push 0
mov dx, word[ebp+8]
push edx
mov eax, dword[ebp+0x10]
mov ecx, dword[eax+4]
push ecx
call dword[sym.imp.ole32.dll_OleDuplicateData]
mov edx, dword[ebp+0xc]
mov dword[edx+4], eax
mov eax, dword[ebp+0xc]
cmp dword[eax+4], 0
jne 0x7831bb5d
xor eax, eax
jmp 0x7831bb66
mov eax, 1
jmp 0x7831bb66
xor eax, eax
mov ecx, dword[ebp-0xc]
mov dword
pop ecx
mov ecx, dword[ebp-0x24]
xor ecx, ebp
call fcn.783a2cd0
mov esp, ebp
pop ebp
ret 0xc

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/ebea46c6b17785efc2ebcb24ad99656c