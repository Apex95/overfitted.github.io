---
layout: post
title:  "fcn.10042d5f @ e5d49e0823e602f2ee948ac39d32c1eb"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.10042d5f
- **Origin (md5):** e5d49e0823e602f2ee948ac39d32c1eb
- **VirusTotal:** [virustotal.com/gui/file/e5d49e0823e602f2ee948ac39d32c1eb][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Behaviour Tags
<span class="bhv-tag" id="CONNECTS_TO_LISTENER">CONNECTS_TO_LISTENER / 0.0024854225884302097</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [71.67474365234375, -51.70834732055664, '<b><a href="/report/fcn.10042d5f@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10042d5f</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'point { fill-color: #e0440e; }'],
[-15.041509628295898, -63.41587448120117, '<b><a href="/report/fcn.10045e81@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10045e81</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[32.13689041137695, 72.20884704589844, '<b><a href="/report/fcn.10044332@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10044332</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[103.99308013916016, 48.40938949584961, '<b><a href="/report/fcn.10038d78@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10038d78</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[-125.205322265625, -2.045428991317749, '<b><a href="/report/fcn.004b79d9@9c2b894b84f59672d8be2e984066f76f">fcn.004b79d9</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],
[-10.598280906677246, 135.51315307617188, '<b><a href="/report/fcn.10045261@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10045261</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[-96.11506652832031, -55.483150482177734, '<b><a href="/report/fcn.10069084@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10069084</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[-92.6580810546875, 84.57238006591797, '<b><a href="/report/fcn.1011ae2f@e5d49e0823e602f2ee948ac39d32c1eb">fcn.1011ae2f</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[56.82500076293945, -145.68992614746094, '<b><a href="/report/fcn.004245c7@7b00dd8f2abf54a73bfb09681334ff78">fcn.004245c7</a><br>@7b00dd8f2abf54a73bfb09681334ff78</b><br>', 'null'],
[27.206947326660156, 18.850788116455078, '<b><a href="/report/fcn.0046b4d7@9c2b894b84f59672d8be2e984066f76f">fcn.0046b4d7</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],
[-59.34074020385742, 7.4269561767578125, '<b><a href="/report/fcn.004ef8b8@9c2b894b84f59672d8be2e984066f76f">fcn.004ef8b8</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push 0xdc
mov eax, 0x1013d968
call fcn.10124124
mov dword[ebp-0x98], ecx
mov ebx, dword[ebp+0xc]
cmp ebx, 0xffffffff
jne 0x10042d85
cmp dword[ebp+0x10], ebx
je 0x1004389d
mov esi, dword[ebp+8]
lea edi, [ebp-0xd8]
lea ecx, [ebp-0xd8]
movsd dword
movsd dword
movsd dword
movsd dword
call fcn.1004618a
mov esi, dword[ebp-0xcc]
sub esi, dword[ebp-0xd4]
mov edi, dword[ebp-0xd0]
sub edi, dword[ebp-0xd8]
mov dword[ebp-0x40], edi
mov dword[ebp-0x3c], esi
je 0x1004389d
test esi, esi
je 0x1004389d
lea ecx, [ebp-0xb0]
call fcn.1001703e
mov eax, dword[ebp-0x98]
and dword[ebp-4], 0
mov eax, dword[eax+4]
test eax, eax
je 0x10042de8
mov eax, dword[eax+4]
push eax
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
push eax
lea ecx, [ebp-0xb0]
call fcn.100179cf
test eax, eax
je 0x1004388e
and dword[ebp-0x70], 0
mov dword[ebp-0x74], 0x1014cb54
mov eax, dword[ebp-0x98]
push esi
push edi
mov byte[ebp-4], 1
mov eax, dword[eax+4]
push dword[eax+4]
call dword[sym.imp.GDI32.dll_CreateCompatibleBitmap]
push eax
lea ecx, [ebp-0x74]
call fcn.10017a05
test eax, eax
je 0x1004387b
push dword[ebp-0x70]
push dword[ebp-0xac]
call fcn.1001807d
xor ecx, ecx
mov dword[ebp-0xc0], eax
test eax, eax
setne cl
test ecx, ecx
jne 0x10042e5b
call fcn.10009c74
lea eax, [ebp-0x20]
push eax
lea eax, [ebp-0x40]
push eax
call fcn.10042ae4
mov dword[ebp-0xb4], eax
test eax, eax
je 0x1004387b
cmp dword[ebp-0x20], 0
je 0x1004387b
push eax
push dword[ebp-0xac]
call dword[sym.imp.GDI32.dll_SelectObject]
mov ecx, dword[ebp+0x10]
cmp ecx, 0xffffffff
jne 0x10042e97
mov ecx, ebx
movzx eax, cl
mov dword[ebp-0x44], eax
mov eax, ecx
shr eax, 8
movzx eax, al
mov dword[ebp-0x48], eax
shr ecx, 0x10
movzx eax, cl
mov dword[ebp-0x54], eax
mov eax, ebx
shr eax, 8
movzx edx, al
mov eax, ebx
shr eax, 0x10
movzx eax, al
mov dword[ebp-0x64], eax
xor eax, eax
cmp ebx, 0xffffffff
movzx ecx, bl
mov dword[ebp-0x78], ecx
setne al
mov dword[ebp-0x7c], edx
mov dword[ebp-0x60], eax
test eax, eax
je 0x10042ef4
mov eax, dword[ebp-0x64]
mov ebx, ecx
or ebx, 0xffffff00
movzx eax, al
shl ebx, 8
or ebx, edx
shl ebx, 8
or ebx, eax
mov esi, dword[ebp-0x40]
fldz
fld st(0)
mov byte[ebp+0x13], 0
lea eax, [esi-1]
mov dword[ebp+0xc], eax
fild dword[ebp+0xc]
mov eax, dword[ebp-0x3c]
dec eax
mov dword[ebp+0xc], eax
fld st(2)
fild dword[ebp+0xc]
fxch st(2)
fcom st(4)
fnstsw ax
test ah, 5
jp 0x10042f23
fstp st(3)
fld st(3)
fxch st(2)
fcom st(4)
fnstsw ax
test ah, 5
jp 0x10042f32
fstp st(1)
jmp 0x10042f34
fstp st(4)
fld st(3)
fsub st(1)
fld st(2)
fsub st(4)
fcompp
fnstsw ax
test ah, 1
jne 0x10042f51
fxch st(1)
mov byte[ebp+0x13], 1
fxch st(3)
fxch st(1)
fxch st(2)
cmp dword[ebp-0x60], 0
fld st(1)
fsub st(3)
fld qword[0x1017c4b8]
fmul st(1), st(0)
fxch st(1)
fst qword[ebp-0x84]
fld st(5)
fsub st(3)
fmul st(2)
fstp qword[ebp-0xa0]
fxch st(3)
faddp st(4)
fmul st(3), st(0)
fxch st(3)
fst qword[ebp-0x94]
fxch st(4)
faddp st(1)
fmulp st(2)
fxch st(1)
fstp qword[ebp-0x6c]
je 0x100430ba
fsubp st(1)
push ecx
push ecx
fstp qword[esp]
call fcn.101270d0
call fcn.10125470
fld qword[ebp-0x94]
mov edi, eax
fadd qword[ebp-0x84]
mov dword[ebp+0xc], edi
fstp qword[esp]
call fcn.101271f0
pop ecx
pop ecx
call fcn.10125470
fld qword[ebp-0x84]
mov dword[ebp-0x1c], eax
mov dword[ebp-0x18], edi
cmp edi, eax
jg 0x100430bc
mov eax, edi
imul eax, esi
mov dword[ebp+8], eax
fild dword[ebp-0x18]
fstp qword[ebp-0x5c]
fld qword[ebp-0x5c]
fsub qword[ebp-0x94]
mov esi, dword[ebp-0x40]
fdiv st(1)
fmul st(0), st(0)
fld1
fsubrp st(1)
fldz
fcomp st(1)
fnstsw ax
test ah, 0x41
je 0x100430a3
push ecx
fstp st(1)
push ecx
fstp qword[esp]
call fcn.101276f4
fmul qword[ebp-0xa0]
pop ecx
pop ecx
push ecx
push ecx
fst qword[ebp-0x5c]
fsubr qword[ebp-0x6c]
fstp qword[esp]
call fcn.101270d0
call fcn.10125470
fld qword[ebp-0x5c]
fadd qword[ebp-0x6c]
mov dword[ebp-0x18], eax
fstp qword[esp]
call fcn.101271f0
pop ecx
pop ecx
call fcn.10125470
cmp byte[ebp+0x13], 0
mov edx, dword[ebp-0x18]
mov ecx, dword[ebp-0x20]
jne 0x10043080
imul edx, esi
add edx, edi
lea ecx, [ecx+edx*4]
mov edx, dword[ebp-0x18]
cmp edx, eax
jg 0x10043078
mov edi, dword[ebp+0xc]
sub eax, edx
mov edx, esi
inc eax
shl edx, 2
mov dword[ecx], ebx
add ecx, edx
dec eax
jne 0x10043071
fld qword[ebp-0x84]
jmp 0x100430a5
add edx, dword[ebp+8]
fld qword[ebp-0x84]
lea edx, [ecx+edx*4]
mov ecx, dword[ebp-0x18]
cmp ecx, eax
jg 0x100430a5
sub eax, ecx
mov edi, edx
lea ecx, [eax+1]
mov eax, ebx
rep stosd
mov edi, dword[ebp+0xc]
jmp 0x100430a5
fstp st(0)
add dword[ebp+8], esi
inc edi
mov dword[ebp+0xc], edi
mov dword[ebp-0x18], edi
cmp edi, dword[ebp-0x1c]
jle 0x10042fe1
jmp 0x100430bc
fstp st(1)
fld qword[ebp-0xa0]
fld st(0)
fmulp st(1)
push ecx
push ecx
fst qword[ebp-0x5c]
fld st(1)
fmulp st(2)
fxch st(1)
fst qword[ebp-0x8c]
faddp st(1)
fst qword[ebp-0x14]
fstp qword[esp]
call fcn.101276f4
fdivr qword[ebp-0x8c]
fst qword[ebp-0x8c]
fsubr qword[ebp-0x94]
fstp qword[esp]
call fcn.101271f0
call fcn.10125470
fld qword[ebp-0x8c]
mov ebx, eax
fadd qword[ebp-0x94]
fstp qword[esp]
call fcn.101270d0
pop ecx
pop ecx
call fcn.10125470
mov dword[ebp-0x88], eax
mov dword[ebp+0xc], ebx
cmp ebx, eax
jg 0x10043478
mov edi, ebx
imul edi, esi
mov dword[ebp-0x18], edi
fild dword[ebp+0xc]
fstp qword[ebp-0x28]
fld qword[ebp-0x28]
fsub qword[ebp-0x94]
fdiv qword[ebp-0x84]
fmul st(0), st(0)
fld1
fsubrp st(1)
fldz
fcomp st(1)
fnstsw ax
test ah, 0x41
je 0x1004345e
push ecx
push ecx
fstp qword[esp]
call fcn.101276f4
fmul qword[ebp-0xa0]
fst qword[ebp-0x30]
fadd qword[ebp-0x6c]
fstp qword[esp]
call fcn.101270d0
pop ecx
pop ecx
call fcn.10125470
mov dword[ebp-0x1c], eax
fild dword[ebp-0x1c]
fstp qword[ebp-0x28]
fld qword[ebp-0x28]
fld qword[ebp-0x6c]
fsub st(1), st(0)
fld qword[ebp-0x30]
fsub st(2), st(0)
fild dword[ebp-0x54]
fstp qword[ebp-0x28]
fld qword[ebp-0x28]
fst qword[ebp-0xc8]
fmul st(3)
call fcn.10125470
fild dword[ebp-0x48]
mov dword[ebp+8], eax
fstp qword[ebp-0x28]
fld qword[ebp-0x28]
fst qword[ebp-0xbc]
fmul st(3)
call fcn.10125470
fild dword[ebp-0x44]
mov dword[ebp-0x2c], eax
fstp qword[ebp-0x28]
fld qword[ebp-0x28]
fst qword[ebp-0x38]
fmul st(3)
call fcn.10125470
fld st(2)
mov dword[ebp+0xc], eax
fmul qword[0x1014c518]
call fcn.10125470
cmp dword[ebp-0x60], 0
mov dword[ebp-0x24], eax
je 0x10043273
fstp st(1)
fld1
fsubrp st(2)
fild dword[ebp-0x78]
fstp qword[ebp-0x50]
fld qword[ebp-0x50]
fmul st(2)
fild dword[ebp+0xc]
fstp qword[ebp-0x50]
fadd qword[ebp-0x50]
call fcn.101254a6
fild dword[ebp-0x7c]
movzx esi, al
or esi, 0xffffff00
shl esi, 8
fstp qword[ebp-0x50]
fld qword[ebp-0x50]
fmul st(2)
fild dword[ebp-0x2c]
fstp qword[ebp-0x50]
fadd qword[ebp-0x50]
call fcn.101254a6
fild dword[ebp-0x64]
movzx eax, al
or esi, eax
shl esi, 8
fstp qword[ebp-0x50]
fld qword[ebp-0x50]
fmulp st(2)
fild dword[ebp+8]
fstp qword[ebp-0x50]
fld qword[ebp-0x50]
faddp st(2)
fxch st(1)
call fcn.101254a6
fld qword[ebp-0x6c]
mov ecx, dword[ebp+8]
mov edx, dword[ebp+0xc]
movzx eax, al
jmp 0x10043296
mov edx, dword[ebp+0xc]
mov esi, eax
mov ecx, dword[ebp+8]
fstp st(2)
shl esi, 8
movzx eax, dl
or esi, eax
mov eax, dword[ebp-0x2c]
shl esi, 8
movzx eax, al
or esi, eax
movzx eax, cl
shl esi, 8
or esi, eax
mov al, byte[ebp-0x44]
sub al, dl
movzx edx, al
or eax, 0xffffffff
sub eax, dword[ebp-0x24]
shl eax, 8
or edx, eax
mov al, byte[ebp-0x48]
sub al, byte[ebp-0x2c]
shl edx, 8
movzx eax, al
or edx, eax
mov al, byte[ebp-0x54]
sub al, cl
shl edx, 8
movzx eax, al
or edx, eax
cmp byte[ebp+0x13], 0
jne 0x100432eb
mov edi, dword[ebp-0x1c]
mov eax, edi
imul eax, dword[ebp-0x40]
mov ecx, dword[ebp-0x20]
add eax, ebx
mov dword[ecx+eax*4], edx
lea eax, [edi-1]
imul eax, dword[ebp-0x40]
add eax, ebx
mov dword[ecx+eax*4], esi
jmp 0x100432fa
mov ecx, dword[ebp-0x1c]
mov eax, dword[ebp-0x20]
add ecx, edi
mov dword[eax+ecx*4], edx
mov dword[eax+ecx*4-4], esi
fsubrp st(1)
push ecx
push ecx
fst qword[ebp-0x28]
fstp qword[esp]
call fcn.101271f0
pop ecx
pop ecx
call fcn.10125470
mov esi, eax
mov dword[ebp-0x1c], esi
fild dword[ebp-0x1c]
fstp qword[ebp-0x50]
fld qword[ebp-0x50]
fsubr qword[ebp-0x28]
fld qword[ebp-0xc8]
fmul st(1)
call fcn.10125470
fld qword[ebp-0xbc]
fmul st(1)
mov dword[ebp+8], eax
call fcn.10125470
fld qword[ebp-0x38]
fmul st(1)
mov dword[ebp-0x2c], eax
call fcn.10125470
fld st(0)
mov dword[ebp+0xc], eax
fmul qword[0x1014c518]
call fcn.10125470
cmp dword[ebp-0x60], 0
mov dword[ebp-0x24], eax
je 0x100433d0
fld1
fsubrp st(1)
fild dword[ebp-0x78]
fstp qword[ebp-0x38]
fld qword[ebp-0x38]
fmul st(1)
fild dword[ebp+0xc]
fstp qword[ebp-0x38]
fadd qword[ebp-0x38]
call fcn.101254a6
fild dword[ebp-0x7c]
movzx edi, al
or edi, 0xffffff00
shl edi, 8
fstp qword[ebp-0x38]
fld qword[ebp-0x38]
fmul st(1)
fild dword[ebp-0x2c]
fstp qword[ebp-0x38]
fadd qword[ebp-0x38]
call fcn.101254a6
fild dword[ebp-0x64]
movzx eax, al
or edi, eax
shl edi, 8
fstp qword[ebp-0x38]
fmul qword[ebp-0x38]
fild dword[ebp+8]
fstp qword[ebp-0x38]
fadd qword[ebp-0x38]
call fcn.101254a6
mov ecx, dword[ebp+8]
mov edx, dword[ebp+0xc]
movzx eax, al
jmp 0x100433f3
mov edx, dword[ebp+0xc]
mov edi, eax
mov ecx, dword[ebp+8]
fstp st(0)
shl edi, 8
movzx eax, dl
or edi, eax
mov eax, dword[ebp-0x2c]
shl edi, 8
movzx eax, al
or edi, eax
movzx eax, cl
shl edi, 8
or edi, eax
mov al, byte[ebp-0x44]
sub al, dl
movzx edx, al
or eax, 0xffffffff
sub eax, dword[ebp-0x24]
shl eax, 8
or edx, eax
mov al, byte[ebp-0x48]
sub al, byte[ebp-0x2c]
shl edx, 8
movzx eax, al
or edx, eax
mov al, byte[ebp-0x54]
sub al, cl
shl edx, 8
movzx eax, al
or edx, eax
cmp byte[ebp+0x13], 0
jne 0x1004344a
mov ecx, dword[ebp-0x20]
mov eax, esi
mov esi, dword[ebp-0x40]
imul eax, esi
add eax, ebx
mov dword[ecx+eax*4], edx
mov eax, dword[ebp-0x1c]
inc eax
imul eax, esi
add eax, ebx
mov dword[ecx+eax*4], edi
mov edi, dword[ebp-0x18]
jmp 0x10043463
mov ecx, dword[ebp-0x18]
mov eax, dword[ebp-0x20]
add ecx, esi
mov dword[eax+ecx*4+4], edi
mov edi, dword[ebp-0x18]
mov dword[eax+ecx*4], edx
jmp 0x10043460
fstp st(0)
mov esi, dword[ebp-0x40]
inc ebx
add edi, esi
mov dword[ebp+0xc], ebx
mov dword[ebp-0x18], edi
cmp ebx, dword[ebp-0x88]
jle 0x10043139
fld qword[ebp-0x14]
push ecx
push ecx
fstp qword[esp]
call fcn.101276f4
fdivr qword[ebp-0x5c]
fst qword[ebp-0x5c]
fsubr qword[ebp-0x6c]
fstp qword[esp]
call fcn.101270d0
call fcn.10125470
fld qword[ebp-0x5c]
mov ebx, eax
fadd qword[ebp-0x6c]
fstp qword[esp]
call fcn.101271f0
pop ecx
pop ecx
call fcn.10125470
mov dword[ebp-0x24], eax
mov dword[ebp+0xc], ebx
cmp ebx, eax
jg 0x1004380b
mov edi, ebx
imul edi, esi
mov dword[ebp-0x18], edi
fild dword[ebp+0xc]
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fsub qword[ebp-0x6c]
fdiv qword[ebp-0xa0]
fmul st(0), st(0)
fld1
fsubrp st(1)
fldz
fcomp st(1)
fnstsw ax
test ah, 0x41
je 0x100437f4
push ecx
push ecx
fstp qword[esp]
call fcn.101276f4
fmul qword[ebp-0x84]
fst qword[ebp-0x5c]
fsubr qword[ebp-0x94]
fst qword[ebp-0x38]
fstp qword[esp]
call fcn.101271f0
pop ecx
pop ecx
call fcn.10125470
mov dword[ebp-0x1c], eax
fild dword[ebp-0x1c]
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fsubr qword[ebp-0x38]
fild dword[ebp-0x54]
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fst qword[ebp-0x38]
fmul st(1)
call fcn.10125470
fild dword[ebp-0x48]
mov dword[ebp+8], eax
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fst qword[ebp-0xbc]
fmul st(1)
call fcn.10125470
fild dword[ebp-0x44]
mov dword[ebp-0x2c], eax
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fst qword[ebp-0xc8]
fmul st(1)
call fcn.10125470
fld st(0)
mov dword[ebp+0xc], eax
fmul qword[0x1014c518]
call fcn.10125470
cmp dword[ebp-0x60], 0
mov dword[ebp-0x88], eax
je 0x100435f6
fld1
fsubrp st(1)
fild dword[ebp-0x78]
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fmul st(1)
fild dword[ebp+0xc]
fstp qword[ebp-0x14]
fadd qword[ebp-0x14]
call fcn.101254a6
fild dword[ebp-0x7c]
movzx esi, al
or esi, 0xffffff00
shl esi, 8
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fmul st(1)
fild dword[ebp-0x2c]
fstp qword[ebp-0x14]
fadd qword[ebp-0x14]
call fcn.101254a6
fild dword[ebp-0x64]
movzx eax, al
or esi, eax
shl esi, 8
fstp qword[ebp-0x14]
fmul qword[ebp-0x14]
fild dword[ebp+8]
fstp qword[ebp-0x14]
fadd qword[ebp-0x14]
call fcn.101254a6
mov ecx, dword[ebp+8]
mov edx, dword[ebp+0xc]
movzx eax, al
jmp 0x10043619
mov edx, dword[ebp+0xc]
mov esi, eax
mov ecx, dword[ebp+8]
fstp st(0)
shl esi, 8
movzx eax, dl
or esi, eax
mov eax, dword[ebp-0x2c]
shl esi, 8
movzx eax, al
or esi, eax
movzx eax, cl
shl esi, 8
or esi, eax
mov al, byte[ebp-0x44]
sub al, dl
movzx edx, al
or eax, 0xffffffff
sub eax, dword[ebp-0x88]
shl eax, 8
or edx, eax
mov al, byte[ebp-0x48]
sub al, byte[ebp-0x2c]
shl edx, 8
movzx eax, al
or edx, eax
mov al, byte[ebp-0x54]
sub al, cl
shl edx, 8
movzx eax, al
or edx, eax
cmp byte[ebp+0x13], 0
jne 0x10043663
mov ecx, dword[ebp-0x1c]
mov eax, dword[ebp-0x20]
add ecx, edi
mov dword[eax+ecx*4], edx
mov dword[eax+ecx*4+4], esi
jmp 0x10043680
mov edi, dword[ebp-0x1c]
mov eax, edi
imul eax, dword[ebp-0x40]
mov ecx, dword[ebp-0x20]
add eax, ebx
mov dword[ecx+eax*4], edx
lea eax, [edi+1]
imul eax, dword[ebp-0x40]
add eax, ebx
mov dword[ecx+eax*4], esi
fld qword[ebp-0x5c]
fadd qword[ebp-0x94]
push ecx
push ecx
fstp qword[esp]
call fcn.101270d0
pop ecx
pop ecx
call fcn.10125470
mov esi, eax
mov dword[ebp-0x1c], esi
fild dword[ebp-0x1c]
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fsub qword[ebp-0x94]
fsub qword[ebp-0x5c]
fld qword[ebp-0x38]
fmul st(1)
call fcn.10125470
fld qword[ebp-0xbc]
fmul st(1)
mov dword[ebp+8], eax
call fcn.10125470
fld qword[ebp-0xc8]
fmul st(1)
mov dword[ebp-0x2c], eax
call fcn.10125470
fld st(0)
mov dword[ebp+0xc], eax
fmul qword[0x1014c518]
call fcn.10125470
cmp dword[ebp-0x60], 0
mov dword[ebp-0x88], eax
je 0x10043763
fld1
fsubrp st(1)
fild dword[ebp-0x78]
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fmul st(1)
fild dword[ebp+0xc]
fstp qword[ebp-0x14]
fadd qword[ebp-0x14]
call fcn.101254a6
fild dword[ebp-0x7c]
movzx edi, al
or edi, 0xffffff00
shl edi, 8
fstp qword[ebp-0x14]
fld qword[ebp-0x14]
fmul st(1)
fild dword[ebp-0x2c]
fstp qword[ebp-0x14]
fadd qword[ebp-0x14]
call fcn.101254a6
fild dword[ebp-0x64]
movzx eax, al
or edi, eax
shl edi, 8
fstp qword[ebp-0x14]
fmul qword[ebp-0x14]
fild dword[ebp+8]
fstp qword[ebp-0x14]
fadd qword[ebp-0x14]
call fcn.101254a6
mov ecx, dword[ebp+8]
mov edx, dword[ebp+0xc]
movzx eax, al
jmp 0x10043786
mov edx, dword[ebp+0xc]
mov edi, eax
mov ecx, dword[ebp+8]
fstp st(0)
shl edi, 8
movzx eax, dl
or edi, eax
mov eax, dword[ebp-0x2c]
shl edi, 8
movzx eax, al
or edi, eax
movzx eax, cl
shl edi, 8
or edi, eax
mov al, byte[ebp-0x44]
sub al, dl
movzx edx, al
or eax, 0xffffffff
sub eax, dword[ebp-0x88]
shl eax, 8
or edx, eax
mov al, byte[ebp-0x48]
sub al, byte[ebp-0x2c]
shl edx, 8
movzx eax, al
or edx, eax
mov al, byte[ebp-0x54]
sub al, cl
shl edx, 8
movzx eax, al
or edx, eax
cmp byte[ebp+0x13], 0
jne 0x100437d3
mov ecx, dword[ebp-0x18]
mov eax, dword[ebp-0x20]
add ecx, esi
mov dword[eax+ecx*4-4], edi
mov edi, dword[ebp-0x18]
mov dword[eax+ecx*4], edx
jmp 0x100437f6
mov ecx, dword[ebp-0x20]
mov eax, esi
mov esi, dword[ebp-0x40]
imul eax, esi
add eax, ebx
mov dword[ecx+eax*4], edx
mov eax, dword[ebp-0x1c]
dec eax
imul eax, esi
add eax, ebx
mov dword[ecx+eax*4], edi
mov edi, dword[ebp-0x18]
jmp 0x100437f9
fstp st(0)
mov esi, dword[ebp-0x40]
inc ebx
add edi, esi
mov dword[ebp+0xc], ebx
mov dword[ebp-0x18], edi
cmp ebx, dword[ebp-0x24]
jle 0x100434c8
mov eax, dword[ebp-0x3c]
xor ebx, ebx
mov dword[ebp-0xdc], eax
lea eax, [ebp-0xe8]
push eax
lea eax, [ebp-0xb0]
mov dword[ebp-0xe8], ebx
push eax
lea eax, [ebp-0xd8]
mov dword[ebp-0xe0], esi
push eax
mov eax, dword[ebp-0x98]
mov ecx, eax
mov dword[ebp-0xe4], ebx
push dword[eax+4]
call fcn.10042d16
mov eax, dword[ebp-0xc0]
test eax, eax
jne 0x1004385b
mov eax, ebx
jmp 0x1004385e
mov eax, dword[eax+4]
push eax
push dword[ebp-0xac]
call fcn.1001807d
push dword[ebp-0xb4]
call dword[sym.imp.GDI32.dll_DeleteObject]
mov byte[ebp-4], bl
jmp 0x1004387f
mov byte[ebp-4], 0
lea ecx, [ebp-0x74]
mov dword[ebp-0x74], 0x1014cb54
call fcn.100171ad
or dword[ebp-4], 0xffffffff
lea ecx, [ebp-0xb0]
call fcn.10017194
call fcn.101240f2
ret 0xc

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/e5d49e0823e602f2ee948ac39d32c1eb