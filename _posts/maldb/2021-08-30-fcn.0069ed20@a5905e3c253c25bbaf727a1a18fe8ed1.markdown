---
layout: post
title:  "fcn.0069ed20 @ a5905e3c253c25bbaf727a1a18fe8ed1"
date:   2021-08-30 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0069ed20
- **Origin (md5):** a5905e3c253c25bbaf727a1a18fe8ed1
- **VirusTotal:** [virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1][virustotal_ref]

# Code Tags
<span class="tag" id="THREAD">THREAD</span>


# Similar Functions

1. [fcn.00617220][similar_1_ref] (sim.: 0.9795013026675746)
2. [fcn.005ba960][similar_2_ref] (sim.: 0.9743753287012512)
3. [fcn.00674030][similar_3_ref] (sim.: 0.9669945053328689)
4. [fcn.005f0650][similar_4_ref] (sim.: 0.9657317741100628)
5. [fcn.005cbe30][similar_5_ref] (sim.: 0.9637389241241039)


# Disassembled Code

{% highlight nasm %}
push r15
push r14
push r13
push r12
push rbp
push rdi
push rsi
push rbx
sub rsp,0x138
mov rsi,qword[0x00a7d770]
mov r13,rcx
mov qword[rsp+0x188],rdx
mov dword[rsp+0x3c],r8d
mov rax,rsi
add rax,0xa0
mov qword[rsp+0x58],rax
je 0x69fc99
mov rbx,qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
call rbx
mov ebp,eax
lea rax,[rsi+0xa4]
mov rdi,rax
mov qword[rsp+0x30],rax
xor eax,eax
lock cmpxchg dword[rdi],eax
cmp ebp,eax
je 0x69f3c0
lea rdi,[rsi+0xa8]
mov r12d,dword[rsi+0xa8]
jmp 0x69eda3
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rdi
or edx,0x80000000
call fcn.008eebc0
cmp r12d,eax
jne 0x69eda0
test r12d,r12d
js 0x69f8f0
mov rax,qword[rsp+0x30]
xchg dword[rax],ebp
mov dword[rsi+0xa0],1
mov rax,qword[r13+0x170]
test rax,rax
mov qword[rsp+0xb0],rax
je 0x69edee
lock add dword[rax],1
mov r12,qword[r13+0xc0]
mov rdi,qword[r13+0xc8]
lea rbp,[rsp+0xb0]
lea rax,[rbp+0x18]
mov rcx,r12
add rcx,rdi
mov qword[rsp+0xb8],rax
setne cl
test r12,r12
sete dl
and cl,dl
mov byte[rsp+0x28],cl
je 0x69ee33
lea rcx,[0x00ab95c0]
call fcn.00a4f4e0
cmp rdi,0xf
mov qword[rsp+0x80],rdi
ja 0x69f370
cmp rdi,1
je 0x69f692
test rdi,rdi
mov rdx,rax
jne 0x69fb3b
mov qword[rsp+0xc0],rdi
mov byte[rdx+rdi],0
mov rdx,rbp
mov rcx,qword[0x00a7d770]
call fcn.005ce6d0
mov rcx,qword[rsp+0xb8]
mov rdi,rax
lea rax,[rbp+0x18]
cmp rcx,rax
je 0x69ee8f
call fcn.00a5af30
mov r12,qword[rsp+0xb0]
test r12,r12
je 0x69ef29
mov eax,1
mov r15d,0xffffffff
lock xadd dword[r12],r15d
sub r15d,eax
jne 0x69ef29
mov rax,qword[sym.imp.KERNEL32.dll_Sleep]
mov r14,qword[0x00b3d090]
mov r9d,1
mov qword[rsp+0x40],rax
jmp 0x69eed5
add r15d,1
mov eax,r9d
xchg dword[r14],eax
test eax,eax
je 0x69ef10
cmp r15d,3
jbe 0x69eed1
cmp r15d,0xf
jbe 0x69f360
cmp r15d,0x1f
mov dword[rsp+0x20],r9d
jbe 0x69f3d0
mov ecx,1
call qword[sym.imp.KERNEL32.dll_Sleep]
mov r9d,dword[rsp+0x20]
jmp 0x69eed1
mov rdx,qword[0x00a7d6e0]
mov qword[r12],rdx
mov qword[0x00a7d6e0],r12
mov dword[r14],0
lea r14,[rsp+0x90]
xor r8d,r8d
mov qword[rsp+0x88],0x16
lea rax,[r14+0x10]
mov rcx,r14
mov qword[rsp+0x90],rax
lea rax,[rsp+0x88]
mov rdx,rax
mov qword[rsp+0x50],rax
call fcn.00a2dfc0
mov rdx,qword[rsp+0x88]
movabs rcx,0x6168632e70706364
mov qword[rsp+0x90],rax
test rdi,rdi
mov qword[rsp+0xa0],rdx
mov qword[rax],rcx
mov edx,0x4d50
movabs rcx,0x6774754f6e6f2e74
mov dword[rax+0x10],0x676e696f
mov word[rax+0x14],dx
mov qword[rax+8],rcx
mov rax,qword[rsp+0x88]
mov rdx,qword[rsp+0x90]
mov qword[rsp+0x98],rax
mov byte[rdx+rax],0
mov rax,qword[0x00a7d790]
mov qword[rsp+0x20],rax
mov rax,qword[rsp+0x188]
mov rax,qword[rax]
mov qword[rsp+0x40],rax
je 0x69f0c0
call rbx
mov r15d,eax
lea rax,[rdi+0x3c]
mov rbx,rax
mov qword[rsp+0x48],rax
xor eax,eax
lock cmpxchg dword[rbx],eax
cmp r15d,eax
je 0x69f6b0
lea r12,[rdi+0x40]
mov ebx,dword[rdi+0x40]
jmp 0x69f013
mov ebx,eax
mov edx,ebx
mov r8d,ebx
mov rcx,r12
or edx,0x80000000
call fcn.008eebc0
cmp ebx,eax
jne 0x69f011
test ebx,ebx
js 0x69fa52
mov rax,qword[rsp+0x48]
xchg dword[rax],r15d
mov dword[rdi+0x38],1
mov rax,qword[rdi]
mov rcx,rdi
call qword[rax+0x10]
mov qword[rsp+0x60],rax
mov rax,qword[rsp+0x20]
cmp byte[rax+0x118],0
je 0x69f3e3
mov eax,dword[rdi+0x38]
sub eax,1
test eax,eax
mov dword[rdi+0x38],eax
je 0x69f4fd
mov rcx,qword[rsp+0x90]
lea rax,[r14+0x10]
cmp rcx,rax
je 0x69f088
call fcn.00a5af30
cmp byte[rsp+0x28],0
je 0x69f0e3
mov eax,dword[rsi+0xa0]
sub eax,1
test eax,eax
mov dword[rsi+0xa0],eax
je 0x69f7a0
add rsp,0x138
pop rbx
pop rsi
pop rdi
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov rax,qword[rsp+0x20]
cmp byte[rax+0x118],0
je 0x69f580
mov rcx,qword[rsp+0x90]
lea rax,[r14+0x10]
cmp rcx,rax
jne 0x69f083
mov eax,dword[rsi+0xa0]
sub eax,1
test eax,eax
mov dword[rsi+0xa0],eax
je 0x69f822
lea rsi,[rsp+0xe0]
mov r8d,0x43
mov edx,0x47534d
mov rcx,rsi
call fcn.006b4370
mov rbx,qword[rsp+0xe8]
cmp rbx,qword[rsp+0xf0]
je 0x69fb26
test rbx,rbx
je 0x69f1a9
mov rdi,qword[rsp+0x188]
mov rcx,qword[rsp+0x188]
lea rax,[rbx+0x10]
mov qword[rbx],rax
mov rdi,qword[rdi]
mov r12,qword[rcx+8]
mov rcx,rdi
add rcx,r12
je 0x69f170
test rdi,rdi
jne 0x69f170
lea rcx,[0x00ab95c0]
call fcn.00a4f4e0
nop word[rax+rax]
cmp r12,0xf
mov qword[rsp+0x90],r12
ja 0x69f760
cmp r12,1
je 0x69f684
test r12,r12
mov rdx,rax
jne 0x69fb6b
mov qword[rbx+8],r12
mov byte[rdx+r12],0
mov rbx,qword[rsp+0xe8]
add rbx,0x20
mov qword[rsp+0xe8],rbx
cmp byte[rsp+0x3c],0
je 0x69f2af
mov rbx,qword[rsp+0xe8]
cmp rbx,qword[rsp+0xf0]
lea rax,[r14+0x10]
lea rdx,[rbp+0x10]
mov byte[rsp+0xc0],0x31
mov qword[rsp+0xb8],1
mov qword[rsp+0x90],rax
mov eax,0x454d
mov byte[rsp+0xc1],0
mov qword[rsp+0xb0],rdx
mov word[rsp+0xa0],ax
mov qword[rsp+0x98],2
mov byte[rsp+0xa2],0
je 0x69fb43
test rbx,rbx
je 0x69f268
lea rax,[rbx+0x10]
mov rdi,qword[rsp+0x98]
mov qword[rbx],rax
mov r12,qword[rsp+0x90]
mov rcx,r12
add rcx,rdi
je 0x69f6b9
test r12,r12
jne 0x69f6b9
lea rcx,[0x00ab95c0]
call fcn.00a4f4e0
mov r8d,1
add rbx,0x20
mov qword[rsp+0xe8],rbx
lea rcx,[rbx-0x20]
call fcn.00a2de80
mov rcx,qword[rsp+0x90]
add r14,0x10
cmp rcx,r14
je 0x69f299
call fcn.00a5af30
mov rcx,qword[rsp+0xb0]
lea rax,[rbp+0x10]
cmp rcx,rax
je 0x69f2af
call fcn.00a5af30
mov r9d,dword[r13+0xb8]
xor r8d,r8d
mov rdx,rsi
mov rcx,rbp
and r9d,1
call fcn.006b4d70
mov rdx,rbp
mov rcx,r13
call fcn.00699ee0
mov rcx,qword[rsp+0xb0]
add rbp,0x10
cmp rcx,rbp
je 0x69f2e9
call fcn.00a5af30
mov rdx,rsi
mov rcx,r13
mov r8d,1
call fcn.0069c090
mov rcx,qword[rsp+0xf8]
add rsi,0x28
cmp rcx,rsi
je 0x69f310
call fcn.00a5af30
mov rsi,qword[rsp+0xe8]
mov rbx,qword[rsp+0xe0]
cmp rsi,rbx
je 0x69f347
mov rcx,qword[rbx]
lea rax,[rbx+0x10]
cmp rcx,rax
je 0x69f336
call fcn.00a5af30
add rbx,0x20
cmp rsi,rbx
jne 0x69f325
mov rbx,qword[rsp+0xe0]
test rbx,rbx
je 0x69f0a6
mov rcx,rbx
call fcn.00a5af30
jmp 0x69f0a6
pause
jmp 0x69eed1
lea rdx,[rsp+0x80]
lea rcx,[rbp+8]
xor r8d,r8d
call fcn.00a2dfc0
mov rcx,rax
mov qword[rsp+0xb8],rax
mov rax,qword[rsp+0x80]
mov qword[rsp+0xc8],rax
mov r8,rdi
mov rdx,r12
call sub.msvcrt.dll_memcpy
mov rdi,qword[rsp+0x80]
mov rdx,qword[rsp+0xb8]
jmp 0x69ee5b
add dword[rsi+0xa0],1
jmp 0x69edd6
xor ecx,ecx
mov rax,qword[rsp+0x40]
call rax
mov r9d,dword[rsp+0x20]
jmp 0x69eed1
mov r15,qword[rax+0x68]
lea rbx,[rax+0x60]
mov r12,rbx
mov qword[rsp+0x28],rbx
test r15,r15
je 0x69f4cf
mov rax,qword[rsp+0x90]
mov r9,qword[rsp+0x98]
mov qword[rsp+0x70],rsi
mov qword[rsp+0x68],rdi
mov qword[rsp+0x78],rax
mov rbx,rax
mov rsi,r9
jmp 0x69f443
mov rcx,qword[r15+0x20]
mov rdx,rbx
call sub.msvcrt.dll_memcmp
test eax,eax
je 0x69f456
test eax,eax
js 0x69f471
mov r12,r15
mov r15,qword[r15+0x10]
test r15,r15
je 0x69f47a
mov rdi,qword[r15+0x28]
mov r8,rsi
cmp rdi,rsi
cmovbe r8,rdi
test r8,r8
jne 0x69f423
sub rdi,rsi
cmp rdi,0x7fffffff
jg 0x69f437
cmp rdi,0xffffffff80000000
jl 0x69f471
mov eax,edi
test eax,eax
jns 0x69f437
mov r15,qword[r15+0x18]
test r15,r15
jne 0x69f443
cmp qword[rsp+0x28],r12
mov r9,rsi
mov rdi,qword[rsp+0x68]
mov rsi,qword[rsp+0x70]
je 0x69f4cf
mov rbx,qword[r12+0x28]
mov r8,r9
cmp rbx,r9
cmovbe r8,rbx
test r8,r8
je 0x69f710
mov rdx,qword[r12+0x20]
mov rcx,qword[rsp+0x78]
mov qword[rsp+0x68],r9
call sub.msvcrt.dll_memcmp
test eax,eax
mov r9,qword[rsp+0x68]
je 0x69f710
test eax,eax
cmovs r12,qword[rsp+0x28]
mov rdx,qword[r12+0x40]
mov r9,qword[rsp+0x40]
mov r8,qword[rsp+0x60]
mov rcx,qword[rsp+0x20]
call fcn.00634180
mov byte[rsp+0x28],al
mov eax,dword[rdi+0x38]
sub eax,1
test eax,eax
mov dword[rdi+0x38],eax
jne 0x69f072
mov rbx,qword[rsp+0x48]
xchg dword[rbx],eax
mov eax,0x80000000
lea rbx,[rdi+0x40]
lock xadd dword[rbx],eax
test eax,0x40000000
jne 0x69f072
cmp eax,0x80000000
je 0x69f072
mov r12d,dword[rdi+0x40]
jmp 0x69f533
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rbx
or edx,0x40000000
call fcn.008eebc0
cmp r12d,eax
jne 0x69f530
and r12d,0x40000000
jne 0x69f072
add rdi,0x48
xor eax,eax
lock cmpxchg qword[rdi],rax
test rax,rax
mov rbx,rax
je 0x69fb7b
mov rcx,rbx
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x69f072
mov r12,qword[rax+0x68]
lea rdi,[rax+0x60]
mov qword[rsp+0x28],rdi
test r12,r12
je 0x69f665
mov rax,qword[rsp+0x90]
mov r15,qword[rsp+0x98]
mov qword[rsp+0x48],rsi
mov qword[rsp+0x60],rax
mov rsi,rax
mov rax,rbp
mov rbp,r15
mov r15,rax
jmp 0x69f5e2
mov rcx,qword[r12+0x20]
mov rdx,rsi
call sub.msvcrt.dll_memcmp
test eax,eax
je 0x69f5f6
test eax,eax
js 0x69f611
mov rdi,r12
mov r12,qword[r12+0x10]
test r12,r12
je 0x69f61b
mov rbx,qword[r12+0x28]
mov r8,rbp
cmp rbx,rbp
cmovbe r8,rbx
test r8,r8
jne 0x69f5c0
sub rbx,rbp
cmp rbx,0x7fffffff
jg 0x69f5d5
cmp rbx,0xffffffff80000000
jl 0x69f611
mov eax,ebx
test eax,eax
jns 0x69f5d5
mov r12,qword[r12+0x18]
test r12,r12
jne 0x69f5e2
cmp qword[rsp+0x28],rdi
mov rax,r15
mov rsi,qword[rsp+0x48]
mov r15,rbp
mov rbp,rax
je 0x69f665
mov rbx,qword[rdi+0x28]
mov r8,r15
cmp rbx,r15
cmovbe r8,rbx
test r8,r8
je 0x69f735
mov rdx,qword[rdi+0x20]
mov rcx,qword[rsp+0x60]
call sub.msvcrt.dll_memcmp
test eax,eax
je 0x69f735
test eax,eax
cmovs rdi,qword[rsp+0x28]
mov rdx,qword[rdi+0x40]
mov r9,qword[rsp+0x40]
xor r8d,r8d
mov rcx,qword[rsp+0x20]
call fcn.00634180
mov byte[rsp+0x28],al
jmp 0x69f072
movzx edx,byte[rdi]
mov byte[rbx+0x10],dl
mov rdx,rax
jmp 0x69f198
movzx edx,byte[r12]
mov byte[rsp+0xc8],dl
mov rdx,rax
jmp 0x69ee5b
add dword[rdi+0x38],1
jmp 0x69f041
cmp rdi,0xf
mov qword[rsp+0x88],rdi
ja 0x69f8b0
cmp rdi,1
je 0x69fa42
test rdi,rdi
mov rdx,rax
jne 0x69fb73
mov qword[rbx+8],rdi
mov byte[rdx+rdi],0
mov rbx,qword[rsp+0xe8]
mov r8,qword[rsp+0xb8]
mov rdx,qword[rsp+0xb0]
jmp 0x69f26e
sub r9,rbx
cmp r9,0x7fffffff
jg 0x69f4cf
cmp r9,0xffffffff80000000
jl 0x69fbb6
mov eax,r9d
jmp 0x69f4c7
sub r15,rbx
cmp r15,0x7fffffff
jg 0x69f665
cmp r15,0xffffffff80000000
jl 0x69fc3c
mov eax,r15d
jmp 0x69f65d
xor r8d,r8d
mov rdx,r14
mov rcx,rbx
call fcn.00a2dfc0
mov rcx,rax
mov qword[rbx],rax
mov rax,qword[rsp+0x90]
mov qword[rbx+0x10],rax
mov r8,r12
mov rdx,rdi
call sub.msvcrt.dll_memcpy
mov r12,qword[rsp+0x90]
mov rdx,qword[rbx]
jmp 0x69f198
mov rdi,qword[rsp+0x30]
xchg dword[rdi],eax
mov eax,0x80000000
lea rdi,[rsi+0xa8]
lock xadd dword[rdi],eax
test eax,0x40000000
jne 0x69f0a6
cmp eax,0x80000000
je 0x69f0a6
mov ebx,dword[rsi+0xa8]
jmp 0x69f7d7
mov ebx,eax
mov edx,ebx
mov r8d,ebx
mov rcx,rdi
or edx,0x40000000
call fcn.008eebc0
cmp ebx,eax
jne 0x69f7d5
and ebx,0x40000000
jne 0x69f0a6
add rsi,0xb0
xor eax,eax
lock cmpxchg qword[rsi],rax
test rax,rax
mov rbx,rax
mov rcx,rax
je 0x69fbc0
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x69f0a6
mov rdi,qword[rsp+0x30]
xchg dword[rdi],eax
mov eax,0x80000000
lea rbx,[rsi+0xa8]
lock xadd dword[rbx],eax
test eax,0x40000000
jne 0x69f0fa
cmp eax,0x80000000
je 0x69f0fa
mov edi,dword[rsi+0xa8]
jmp 0x69f862
mov edi,eax
mov edx,edi
mov r8d,edi
mov rcx,rbx
or edx,0x40000000
call fcn.008eebc0
cmp edi,eax
jne 0x69f860
and edi,0x40000000
jne 0x69f0fa
add rsi,0xb0
xor eax,eax
lock cmpxchg qword[rsi],rax
test rax,rax
mov rbx,rax
mov rcx,rax
je 0x69fbfe
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x69f0fa
mov rdx,qword[rsp+0x50]
xor r8d,r8d
mov rcx,rbx
call fcn.00a2dfc0
mov rcx,rax
mov qword[rbx],rax
mov rax,qword[rsp+0x88]
mov qword[rbx+0x10],rax
mov r8,rdi
mov rdx,r12
call sub.msvcrt.dll_memcpy
mov rdi,qword[rsp+0x88]
mov rdx,qword[rbx]
jmp 0x69f6e1
mov edx,dword[rsi+0xa8]
jmp 0x69f902
mov edx,eax
lea eax,[rdx+1]
mov r15d,edx
or r15d,0x80000000
test edx,edx
cmovs r15d,eax
mov eax,edx
lock cmpxchg dword[rdi],r15d
cmp eax,edx
jne 0x69f900
shr edx,0x1f
test dl,dl
je 0x69edc5
mov eax,r15d
shr eax,0x1f
test al,al
je 0x69edc5
lea r10,[rsi+0xb0]
xor eax,eax
lock cmpxchg qword[r10],rax
test rax,rax
mov r14,rax
mov r12,rax
je 0x69fc46
mov rax,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov qword[rsp+0x20],rsi
mov r14d,0xffffffff
mov rsi,rdi
mov rdi,rbx
mov rbx,rax
xor r8d,r8d
mov edx,r14d
mov rcx,r12
call rbx
mov edx,r15d
and edx,0x7fffffff
or edx,0x40000000
test edx,edx
js 0x69f9b3
nop
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rsi],ecx
cmp eax,edx
je 0x69fa35
mov edx,eax
test edx,edx
jns 0x69f990
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rsi],ecx
cmp eax,edx
jne 0x69f9ad
mov r15d,eax
jmp 0x69f971
mov rcx,qword[rsp+0x58]
call fcn.00962120
mov rcx,rbx
call fcn.008da260
mov rbx,rax
mov rcx,rsi
call fcn.00928c40
mov rcx,rbx
call fcn.008da260
mov rcx,qword[rsp+0x90]
add r14,0x10
mov rbx,rax
cmp rcx,r14
je 0x69fa1d
call fcn.00a5af30
mov rcx,qword[rsp+0xb0]
add rbp,0x10
cmp rcx,rbp
je 0x69f9f4
call fcn.00a5af30
jmp 0x69f9f4
mov rsi,qword[rsp+0x20]
mov rbx,rdi
jmp 0x69edc5
movzx edx,byte[r12]
mov byte[rbx+0x10],dl
mov rdx,rax
jmp 0x69f6e1
mov edx,dword[rdi+0x40]
jmp 0x69fa62
mov edx,eax
lea eax,[rdx+1]
mov ebx,edx
or ebx,0x80000000
test edx,edx
cmovs ebx,eax
mov eax,edx
lock cmpxchg dword[r12],ebx
cmp eax,edx
jne 0x69fa60
mov eax,ebx
shr eax,0x1f
test al,al
je 0x69f032
shr edx,0x1f
test dl,dl
je 0x69f032
lea rax,[rdi+0x48]
mov rcx,rax
mov qword[rsp+0x68],rax
xor eax,eax
lock cmpxchg qword[rcx],rax
test rax,rax
mov qword[rsp+0x60],rax
je 0x69fd24
mov rax,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov qword[rsp+0x68],rax
xor r8d,r8d
mov edx,0xffffffff
mov rcx,qword[rsp+0x60]
call rax
and ebx,0x7fffffff
or ebx,0x40000000
mov edx,ebx
test edx,edx
js 0x69fb09
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[r12],ecx
cmp eax,edx
je 0x69f032
mov edx,eax
test edx,edx
jns 0x69fae4
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[r12],ecx
cmp eax,edx
jne 0x69fb03
mov ebx,eax
mov rax,qword[rsp+0x68]
jmp 0x69fac3
mov rdx,qword[rsp+0x188]
mov rcx,rsi
call fcn.00a1d580
jmp 0x69f1b5
mov rcx,rax
jmp 0x69f39f
mov rdx,r14
mov rcx,rsi
call fcn.00a1d580
mov rbx,qword[rsp+0xe8]
mov r8,qword[rsp+0xb8]
mov rdx,qword[rsp+0xb0]
jmp 0x69f27a
mov rcx,rax
jmp 0x69f780
mov rcx,rax
jmp 0x69f8d2
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x69fec5
mov rax,rbx
lock cmpxchg qword[rdi],rcx
test rax,rax
mov rbx,rax
je 0x69fc91
call qword[sym.imp.KERNEL32.dll_CloseHandle]
jmp 0x69f570
mov r12,qword[rsp+0x28]
jmp 0x69f4cf
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x69fd79
mov rax,rbx
lock cmpxchg qword[rsi],rcx
test rax,rax
mov rbx,rax
je 0x69f817
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rbx
jmp 0x69f817
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x69ffa1
mov rax,rbx
lock cmpxchg qword[rsi],rcx
test rax,rax
mov rbx,rax
je 0x69f8a2
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rbx
jmp 0x69f8a2
mov rdi,qword[rsp+0x28]
jmp 0x69f665
mov qword[rsp+0x20],r10
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r12,rax
mov r10,qword[rsp+0x20]
je 0x69ff2e
mov rax,r14
lock cmpxchg qword[r10],r12
test rax,rax
mov r14,rax
je 0x69f956
mov rcx,r12
mov r12,r14
call qword[sym.imp.KERNEL32.dll_CloseHandle]
jmp 0x69f956
mov rbx,rcx
jmp 0x69f570
lea rbx,[rsp+0xe0]
call fcn.006ea660
lea rdx,[0x00ab9658]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xf0],1
mov qword[rsp+0xf8],rsi
mov qword[rsp+0x108],0
mov qword[rsp+0x100],rax
lea rax,[0x00b714e0]
mov byte[rsp+0x110],0
mov qword[rsp+0xe0],rax
call fcn.009472d0
mov rsi,rax
lea rax,[0x00b72450]
mov rcx,rbx
mov qword[rsp+0xe0],rax
call fcn.00962490
mov rcx,rsi
call fcn.008da260
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov qword[rsp+0x60],rax
je 0x69fde2
mov rcx,qword[rsp+0x68]
mov rdx,rax
xor eax,eax
lock cmpxchg qword[rcx],rdx
test rax,rax
mov qword[rsp+0x68],rax
je 0x69fab7
mov rcx,qword[rsp+0x60]
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rax,qword[rsp+0x68]
mov qword[rsp+0x60],rax
jmp 0x69fab7
lea rbx,[rsp+0xe0]
call fcn.006ea660
lea rdx,[0x00ab95ea]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xf0],0xb
mov qword[rsp+0xf8],rsi
mov qword[rsp+0x108],0
mov qword[rsp+0x100],rax
lea rax,[0x00b72480]
mov byte[rsp+0x110],0
mov qword[rsp+0xe0],rax
call fcn.00947760
lea rsi,[rsp+0xe0]
call fcn.006ea660
lea rdx,[0x00ab95ea]
mov rcx,rsi
mov rbx,rax
call fcn.009de540
lea rax,[rsi+0x30]
mov rcx,rsi
mov dword[rsp+0xf0],0xb
mov qword[rsp+0xf8],rbx
mov qword[rsp+0x108],0
mov qword[rsp+0x100],rax
lea rax,[0x00b72480]
mov byte[rsp+0x110],0
mov qword[rsp+0xe0],rax
call fcn.00947760
lea rax,[0x00b72450]
mov rcx,rbx
mov qword[rsp+0xe0],rax
call fcn.00962490
call fcn.00a55e20
mov rbx,rax
lea rax,[0x00b72450]
mov rcx,rsi
mov qword[rsp+0xe0],rax
call fcn.00962490
mov rcx,qword[rsp+0x90]
add r14,0x10
cmp rcx,r14
je 0x69f9df
call fcn.00a5af30
jmp 0x69f9df
lea rbx,[rsp+0xe0]
call fcn.006ea660
lea rdx,[0x00ab95ea]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xf0],0xb
mov qword[rsp+0xf8],rsi
mov qword[rsp+0x108],0
mov qword[rsp+0x100],rax
lea rax,[0x00b72480]
mov byte[rsp+0x110],0
mov qword[rsp+0xe0],rax
call fcn.00947760
lea rbx,[rsp+0xe0]
call fcn.006ea660
lea rdx,[0x00ab95ea]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xf0],0xb
mov qword[rsp+0xf8],rsi
mov qword[rsp+0x108],0
mov qword[rsp+0x100],rax
lea rax,[0x00b72480]
mov byte[rsp+0x110],0
mov qword[rsp+0xe0],rax
call fcn.00947760
jmp 0x69fe4b
lea rbx,[rsp+0xe0]
call fcn.006ea660
lea rdx,[0x00ab95ea]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xf0],0xb
mov qword[rsp+0xf8],rsi
mov qword[rsp+0x108],0
mov qword[rsp+0x100],rax
lea rax,[0x00b72480]
mov byte[rsp+0x110],0
mov qword[rsp+0xe0],rax
call fcn.00947760
mov rbx,rax
jmp 0x69fe81
{% endhighlight %}


[similar_1_ref]: /report/fcn.00617220@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_2_ref]: /report/fcn.005ba960@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_3_ref]: /report/fcn.00674030@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_4_ref]: /report/fcn.005f0650@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_5_ref]: /report/fcn.005cbe30@a5905e3c253c25bbaf727a1a18fe8ed1
[virustotal_ref]: https://www.virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1