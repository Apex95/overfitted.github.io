---
layout: post
title:  "fcn.00469eda @ 9c2b894b84f59672d8be2e984066f76f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.00469eda
- **Origin (md5):** 9c2b894b84f59672d8be2e984066f76f
- **VirusTotal:** [virustotal.com/gui/file/9c2b894b84f59672d8be2e984066f76f][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.00469eda@9c2b894b84f59672d8be2e984066f76f">fcn.00469eda</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push 0xe8
mov eax, 0x578a93
call fcn.005538d4
mov dword[ebp-0xa4], ecx
mov ebx, dword[ebp+0xc]
cmp ebx, 0xffffffff
jne off.b38
cmp dword[ebp+0x10], ebx
je off.b2867
mov esi, dword[ebp+8]
lea edi, [ebp-0xe4]
lea ecx, [ebp-0xe4]
movsd dword
movsd dword
movsd dword
movsd dword
call fcn.0046d29d
mov esi, dword[ebp-0xd8]
sub esi, dword[ebp-0xe0]
mov edi, dword[ebp-0xdc]
sub edi, dword[ebp-0xe4]
mov dword[ebp-0x4c], edi
mov dword[ebp-0x48], esi
je off.b2867
test esi, esi
je off.b2867
lea ecx, [ebp-0xbc]
call fcn.004119b2
mov eax, dword[ebp-0xa4]
and dword[ebp-4], 0
mov eax, dword[eax+4]
test eax, eax
je off.b137
mov eax, dword[eax+4]
push eax
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
push eax
lea ecx, [ebp-0xbc]
call fcn.004122af
test eax, eax
je off.b2856
and dword[ebp-0x94], 0
mov dword[ebp-0x98], 0x585684
mov eax, dword[ebp-0xa4]
push esi
push edi
mov byte[ebp-4], 1
mov eax, dword[eax+4]
push dword[eax+4]
call dword[sym.imp.GDI32.dll_CreateCompatibleBitmap]
push eax
lea ecx, [ebp-0x98]
call fcn.004122f0
test eax, eax
je off.b2835
push dword[ebp-0x94]
push dword[ebp-0xb8]
call fcn.00412959
mov dword[ebp-0xc8], eax
test eax, eax
jne off.b257
call fcn.0040f785
lea eax, [ebp-0x34]
push eax
lea eax, [ebp-0x4c]
push eax
call fcn.00469c5b
mov dword[ebp-0xcc], eax
test eax, eax
je off.b2835
cmp dword[ebp-0x34], 0
je off.b2835
push eax
push dword[ebp-0xb8]
call dword[sym.imp.GDI32.dll_SelectObject]
mov ecx, dword[ebp+0x10]
cmp ecx, 0xffffffff
jne off.b317
mov ecx, ebx
movzx eax, cl
mov dword[ebp-0x50], eax
mov eax, ecx
shr eax, 8
movzx eax, al
mov dword[ebp-0x54], eax
shr ecx, 0x10
movzx eax, cl
mov dword[ebp-0x58], eax
mov eax, ebx
shr eax, 8
movzx edx, al
mov eax, ebx
shr eax, 0x10
movzx eax, al
mov dword[ebp-0x68], eax
xor eax, eax
cmp ebx, 0xffffffff
movzx ecx, bl
mov dword[ebp-0x7c], ecx
setne al
mov dword[ebp-0x80], edx
mov dword[ebp-0x64], eax
test eax, eax
je off.b410
mov eax, dword[ebp-0x68]
mov ebx, ecx
or ebx, 0xffffff00
movzx eax, al
shl ebx, 8
or ebx, edx
shl ebx, 8
or ebx, eax
mov esi, dword[ebp-0x4c]
fldz
fld st(0)
mov byte[ebp-0xd], 0
lea eax, [esi-1]
mov dword[ebp-0x24], eax
fild dword[ebp-0x24]
mov eax, dword[ebp-0x48]
dec eax
mov dword[ebp-0x24], eax
fld st(2)
fild dword[ebp-0x24]
fxch st(2)
fcom st(4)
fnstsw ax
test ah, 5
jp off.b457
fstp st(3)
fld st(3)
fxch st(2)
fcom st(4)
fnstsw ax
test ah, 5
jp off.b472
fstp st(1)
jmp off.b474
fstp st(4)
fld st(3)
fsub st(1)
fld st(2)
fsub st(4)
fcompp
fnstsw ax
test ah, 1
jne off.b503
fxch st(1)
mov byte[ebp-0xd], 1
fxch st(3)
fxch st(1)
fxch st(2)
cmp dword[ebp-0x64], 0
fld st(1)
fsub st(3)
fld qword[0x5b9908]
fmul st(1), st(0)
fxch st(1)
fst qword[ebp-0x90]
fld st(5)
fsub st(3)
fmul st(2)
fstp qword[ebp-0xac]
fxch st(3)
faddp st(4)
fmul st(3), st(0)
fxch st(3)
fst qword[ebp-0xa0]
fxch st(4)
faddp st(1)
fmulp st(2)
fxch st(1)
fstp qword[ebp-0x78]
je off.b866
fsubp st(1)
push ecx
push ecx
fstp qword[esp]
call fcn.005653c0
call fcn.00553a60
fld qword[ebp-0xa0]
mov edi, eax
fadd qword[ebp-0x90]
mov dword[ebp-0x24], edi
fstp qword[esp]
call fcn.005654e0
pop ecx
pop ecx
call fcn.00553a60
fld qword[ebp-0x90]
mov dword[ebp-0x20], eax
mov dword[ebp-0x2c], edi
cmp edi, eax
jg off.b868
mov eax, edi
imul eax, esi
mov dword[ebp-0x14], eax
fild dword[ebp-0x2c]
fstp qword[ebp-0x70]
fld qword[ebp-0x70]
fsub qword[ebp-0xa0]
mov esi, dword[ebp-0x4c]
fdiv st(1)
fmul st(0), st(0)
fld1
fsubrp st(1)
fldz
fcomp st(1)
fnstsw ax
test ah, 0x41
je off.b843
push ecx
fstp st(1)
push ecx
fstp qword[esp]
call fcn.005657b4
fmul qword[ebp-0xac]
pop ecx
pop ecx
push ecx
push ecx
fst qword[ebp-0x70]
fsubr qword[ebp-0x78]
fstp qword[esp]
call fcn.005653c0
call fcn.00553a60
fld qword[ebp-0x70]
fadd qword[ebp-0x78]
mov dword[ebp-0x2c], eax
fstp qword[esp]
call fcn.005654e0
pop ecx
pop ecx
call fcn.00553a60
cmp byte[ebp-0xd], 0
mov edx, dword[ebp-0x2c]
mov ecx, dword[ebp-0x34]
jne off.b808
imul edx, esi
add edx, edi
lea ecx, [ecx+edx*4]
mov edx, dword[ebp-0x2c]
cmp edx, eax
jg off.b800
mov edi, dword[ebp-0x24]
sub eax, edx
mov edx, esi
inc eax
shl edx, 2
mov dword[ecx], ebx
add ecx, edx
sub eax, 1
jne off.b791
fld qword[ebp-0x90]
jmp off.b845
add edx, dword[ebp-0x14]
fld qword[ebp-0x90]
lea edx, [ecx+edx*4]
mov ecx, dword[ebp-0x2c]
cmp ecx, eax
jg off.b845
sub eax, ecx
mov edi, edx
lea ecx, [eax+1]
mov eax, ebx
rep stosd
mov edi, dword[ebp-0x24]
jmp off.b845
fstp st(0)
add dword[ebp-0x14], esi
inc edi
mov dword[ebp-0x24], edi
mov dword[ebp-0x2c], edi
cmp edi, dword[ebp-0x20]
jle off.b647
jmp off.b868
fstp st(1)
fld st(0)
fmulp st(1)
push ecx
push ecx
fst qword[ebp-0x88]
fld qword[ebp-0xac]
fld st(0)
fmulp st(1)
fst qword[ebp-0x70]
faddp st(1)
fst qword[ebp-0x1c]
fstp qword[esp]
call fcn.005657b4
fdivr qword[ebp-0x88]
fst qword[ebp-0x88]
fsubr qword[ebp-0xa0]
fstp qword[esp]
call fcn.005654e0
call fcn.00553a60
fld qword[ebp-0x88]
mov ebx, eax
fadd qword[ebp-0xa0]
fstp qword[esp]
call fcn.005653c0
pop ecx
pop ecx
call fcn.00553a60
mov dword[ebp-0x84], eax
mov dword[ebp-0x14], ebx
cmp ebx, eax
jg off.b1822
mov edi, ebx
imul edi, esi
mov dword[ebp-0x24], edi
fild dword[ebp-0x14]
fstp qword[ebp-0x3c]
fld qword[ebp-0x3c]
fsub qword[ebp-0xa0]
fdiv qword[ebp-0x90]
fmul st(0), st(0)
fld1
fsubrp st(1)
fldz
fcomp st(1)
fnstsw ax
test ah, 0x41
je off.b1796
push ecx
push ecx
fstp qword[esp]
call fcn.005657b4
fmul qword[ebp-0xac]
fst qword[ebp-0x30]
fadd qword[ebp-0x78]
fstp qword[esp]
call fcn.005653c0
pop ecx
pop ecx
call fcn.00553a60
mov dword[ebp-0x14], eax
fild dword[ebp-0x14]
fstp qword[ebp-0x3c]
fld qword[ebp-0x3c]
fld qword[ebp-0x78]
fsub st(1), st(0)
fld qword[ebp-0x30]
fsub st(2), st(0)
fild dword[ebp-0x58]
fstp qword[ebp-0x3c]
fld qword[ebp-0x3c]
fst qword[ebp-0xd4]
fmul st(3)
call fcn.00553a60
fild dword[ebp-0x54]
mov dword[ebp-0x20], eax
fstp qword[ebp-0x3c]
fld qword[ebp-0x3c]
fst qword[ebp-0xc4]
fmul st(3)
call fcn.00553a60
fild dword[ebp-0x50]
mov dword[ebp-0x2c], eax
fstp qword[ebp-0x3c]
fld qword[ebp-0x3c]
fst qword[ebp-0x44]
fmul st(3)
call fcn.00553a60
fld st(2)
mov dword[ebp-0x28], eax
fmul qword[0x58d3e8]
call fcn.00553a60
cmp dword[ebp-0x64], 0
mov dword[ebp-0x38], eax
je off.b1305
fstp st(1)
fld1
fsubrp st(2)
fild dword[ebp-0x7c]
fstp qword[ebp-0x60]
fld qword[ebp-0x60]
fmul st(2)
fild dword[ebp-0x28]
fstp qword[ebp-0x60]
fadd qword[ebp-0x60]
call fcn.00553aa0
fild dword[ebp-0x80]
movzx esi, al
or esi, 0xffffff00
shl esi, 8
fstp qword[ebp-0x60]
fld qword[ebp-0x60]
fmul st(2)
fild dword[ebp-0x2c]
fstp qword[ebp-0x60]
fadd qword[ebp-0x60]
call fcn.00553aa0
fild dword[ebp-0x68]
movzx eax, al
or esi, eax
shl esi, 8
fstp qword[ebp-0x60]
fld qword[ebp-0x60]
fmulp st(2)
fild dword[ebp-0x20]
fstp qword[ebp-0x60]
fld qword[ebp-0x60]
faddp st(2)
fxch st(1)
call fcn.00553aa0
fld qword[ebp-0x78]
mov ecx, dword[ebp-0x20]
mov edx, dword[ebp-0x28]
movzx eax, al
jmp off.b1340
mov edx, dword[ebp-0x28]
mov esi, eax
mov ecx, dword[ebp-0x20]
fstp st(2)
shl esi, 8
movzx eax, dl
or esi, eax
mov eax, dword[ebp-0x2c]
shl esi, 8
movzx eax, al
or esi, eax
movzx eax, cl
shl esi, 8
or esi, eax
mov al, byte[ebp-0x50]
sub al, dl
movzx edx, al
or eax, 0xffffffff
sub eax, dword[ebp-0x38]
shl eax, 8
or edx, eax
mov al, byte[ebp-0x54]
sub al, byte[ebp-0x2c]
shl edx, 8
movzx eax, al
or edx, eax
mov al, byte[ebp-0x58]
sub al, cl
shl edx, 8
movzx eax, al
or edx, eax
cmp byte[ebp-0xd], 0
jne off.b1425
mov edi, dword[ebp-0x14]
mov eax, edi
imul eax, dword[ebp-0x4c]
mov ecx, dword[ebp-0x34]
add eax, ebx
mov dword[ecx+eax*4], edx
lea eax, [edi-1]
imul eax, dword[ebp-0x4c]
add eax, ebx
mov dword[ecx+eax*4], esi
jmp off.b1440
mov ecx, dword[ebp-0x14]
mov eax, dword[ebp-0x34]
add ecx, edi
mov dword[eax+ecx*4], edx
mov dword[eax+ecx*4-4], esi
fsubrp st(1)
push ecx
push ecx
fst qword[ebp-0x3c]
fstp qword[esp]
call fcn.005654e0
pop ecx
pop ecx
call fcn.00553a60
mov esi, eax
mov dword[ebp-0x14], esi
fild dword[ebp-0x14]
fstp qword[ebp-0x60]
fld qword[ebp-0x60]
fsubr qword[ebp-0x3c]
fld qword[ebp-0xd4]
fmul st(1)
call fcn.00553a60
fld qword[ebp-0xc4]
fmul st(1)
mov dword[ebp-0x20], eax
call fcn.00553a60
fld qword[ebp-0x44]
fmul st(1)
mov dword[ebp-0x2c], eax
call fcn.00553a60
fld st(0)
mov dword[ebp-0x28], eax
fmul qword[0x58d3e8]
call fcn.00553a60
cmp dword[ebp-0x64], 0
mov dword[ebp-0x38], eax
je off.b1654
fld1
fsubrp st(1)
fild dword[ebp-0x7c]
fstp qword[ebp-0x44]
fld qword[ebp-0x44]
fmul st(1)
fild dword[ebp-0x28]
fstp qword[ebp-0x44]
fadd qword[ebp-0x44]
call fcn.00553aa0
fild dword[ebp-0x80]
movzx edi, al
or edi, 0xffffff00
shl edi, 8
fstp qword[ebp-0x44]
fld qword[ebp-0x44]
fmul st(1)
fild dword[ebp-0x2c]
fstp qword[ebp-0x44]
fadd qword[ebp-0x44]
call fcn.00553aa0
fild dword[ebp-0x68]
movzx eax, al
or edi, eax
shl edi, 8
fstp qword[ebp-0x44]
fmul qword[ebp-0x44]
fild dword[ebp-0x20]
fstp qword[ebp-0x44]
fadd qword[ebp-0x44]
call fcn.00553aa0
mov ecx, dword[ebp-0x20]
mov edx, dword[ebp-0x28]
movzx eax, al
jmp off.b1689
mov edx, dword[ebp-0x28]
mov edi, eax
mov ecx, dword[ebp-0x20]
fstp st(0)
shl edi, 8
movzx eax, dl
or edi, eax
mov eax, dword[ebp-0x2c]
shl edi, 8
movzx eax, al
or edi, eax
movzx eax, cl
shl edi, 8
or edi, eax
mov al, byte[ebp-0x50]
sub al, dl
movzx edx, al
or eax, 0xffffffff
sub eax, dword[ebp-0x38]
shl eax, 8
or edx, eax
mov al, byte[ebp-0x54]
sub al, byte[ebp-0x2c]
shl edx, 8
movzx eax, al
or edx, eax
mov al, byte[ebp-0x58]
sub al, cl
shl edx, 8
movzx eax, al
or edx, eax
cmp byte[ebp-0xd], 0
jne off.b1776
mov ecx, dword[ebp-0x34]
mov eax, esi
mov esi, dword[ebp-0x4c]
imul eax, esi
add eax, ebx
mov dword[ecx+eax*4], edx
mov eax, dword[ebp-0x14]
inc eax
imul eax, esi
add eax, ebx
mov dword[ecx+eax*4], edi
mov edi, dword[ebp-0x24]
jmp off.b1801
mov ecx, dword[ebp-0x24]
mov eax, dword[ebp-0x34]
add ecx, esi
mov dword[eax+ecx*4+4], edi
mov edi, dword[ebp-0x24]
mov dword[eax+ecx*4], edx
jmp off.b1798
fstp st(0)
mov esi, dword[ebp-0x4c]
inc ebx
add edi, esi
mov dword[ebp-0x14], ebx
mov dword[ebp-0x24], edi
cmp ebx, dword[ebp-0x84]
jle off.b991
fld qword[ebp-0x1c]
push ecx
push ecx
fstp qword[esp]
call fcn.005657b4
fdivr qword[ebp-0x70]
fst qword[ebp-0x70]
fsubr qword[ebp-0x78]
fstp qword[esp]
call fcn.005653c0
call fcn.00553a60
fld qword[ebp-0x70]
mov ebx, eax
fadd qword[ebp-0x78]
fstp qword[esp]
call fcn.005654e0
pop ecx
pop ecx
call fcn.00553a60
mov dword[ebp-0x38], eax
mov dword[ebp-0x14], ebx
cmp ebx, eax
jg off.b2737
mov edi, ebx
imul edi, esi
mov dword[ebp-0x24], edi
fild dword[ebp-0x14]
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fsub qword[ebp-0x78]
fdiv qword[ebp-0xac]
fmul st(0), st(0)
fld1
fsubrp st(1)
fldz
fcomp st(1)
fnstsw ax
test ah, 0x41
je off.b2714
push ecx
push ecx
fstp qword[esp]
call fcn.005657b4
fmul qword[ebp-0x90]
fst qword[ebp-0x70]
fsubr qword[ebp-0xa0]
fst qword[ebp-0x44]
fstp qword[esp]
call fcn.005654e0
pop ecx
pop ecx
call fcn.00553a60
mov dword[ebp-0x14], eax
fild dword[ebp-0x14]
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fsubr qword[ebp-0x44]
fild dword[ebp-0x58]
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fst qword[ebp-0x44]
fmul st(1)
call fcn.00553a60
fild dword[ebp-0x54]
mov dword[ebp-0x20], eax
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fst qword[ebp-0xc4]
fmul st(1)
call fcn.00553a60
fild dword[ebp-0x50]
mov dword[ebp-0x2c], eax
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fst qword[ebp-0xd4]
fmul st(1)
call fcn.00553a60
fld st(0)
mov dword[ebp-0x28], eax
fmul qword[0x58d3e8]
call fcn.00553a60
cmp dword[ebp-0x64], 0
mov dword[ebp-0x84], eax
je off.b2204
fld1
fsubrp st(1)
fild dword[ebp-0x7c]
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fmul st(1)
fild dword[ebp-0x28]
fstp qword[ebp-0x1c]
fadd qword[ebp-0x1c]
call fcn.00553aa0
fild dword[ebp-0x80]
movzx esi, al
or esi, 0xffffff00
shl esi, 8
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fmul st(1)
fild dword[ebp-0x2c]
fstp qword[ebp-0x1c]
fadd qword[ebp-0x1c]
call fcn.00553aa0
fild dword[ebp-0x68]
movzx eax, al
or esi, eax
shl esi, 8
fstp qword[ebp-0x1c]
fmul qword[ebp-0x1c]
fild dword[ebp-0x20]
fstp qword[ebp-0x1c]
fadd qword[ebp-0x1c]
call fcn.00553aa0
mov ecx, dword[ebp-0x20]
mov edx, dword[ebp-0x28]
movzx eax, al
jmp off.b2239
mov edx, dword[ebp-0x28]
mov esi, eax
mov ecx, dword[ebp-0x20]
fstp st(0)
shl esi, 8
movzx eax, dl
or esi, eax
mov eax, dword[ebp-0x2c]
shl esi, 8
movzx eax, al
or esi, eax
movzx eax, cl
shl esi, 8
or esi, eax
mov al, byte[ebp-0x50]
sub al, dl
movzx edx, al
or eax, 0xffffffff
sub eax, dword[ebp-0x84]
shl eax, 8
or edx, eax
mov al, byte[ebp-0x54]
sub al, byte[ebp-0x2c]
shl edx, 8
movzx eax, al
or edx, eax
mov al, byte[ebp-0x58]
sub al, cl
shl edx, 8
movzx eax, al
or edx, eax
cmp byte[ebp-0xd], 0
jne off.b2313
mov ecx, dword[ebp-0x14]
mov eax, dword[ebp-0x34]
add ecx, edi
mov dword[eax+ecx*4], edx
mov dword[eax+ecx*4+4], esi
jmp off.b2342
mov edi, dword[ebp-0x14]
mov eax, edi
imul eax, dword[ebp-0x4c]
mov ecx, dword[ebp-0x34]
add eax, ebx
mov dword[ecx+eax*4], edx
lea eax, [edi+1]
imul eax, dword[ebp-0x4c]
add eax, ebx
mov dword[ecx+eax*4], esi
fld qword[ebp-0x70]
fadd qword[ebp-0xa0]
push ecx
push ecx
fstp qword[esp]
call fcn.005653c0
pop ecx
pop ecx
call fcn.00553a60
mov esi, eax
mov dword[ebp-0x14], esi
fild dword[ebp-0x14]
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fsub qword[ebp-0xa0]
fsub qword[ebp-0x70]
fld qword[ebp-0x44]
fmul st(1)
call fcn.00553a60
fld qword[ebp-0xc4]
fmul st(1)
mov dword[ebp-0x20], eax
call fcn.00553a60
fld qword[ebp-0xd4]
fmul st(1)
mov dword[ebp-0x2c], eax
call fcn.00553a60
fld st(0)
mov dword[ebp-0x28], eax
fmul qword[0x58d3e8]
call fcn.00553a60
cmp dword[ebp-0x64], 0
mov dword[ebp-0x84], eax
je off.b2569
fld1
fsubrp st(1)
fild dword[ebp-0x7c]
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fmul st(1)
fild dword[ebp-0x28]
fstp qword[ebp-0x1c]
fadd qword[ebp-0x1c]
call fcn.00553aa0
fild dword[ebp-0x80]
movzx edi, al
or edi, 0xffffff00
shl edi, 8
fstp qword[ebp-0x1c]
fld qword[ebp-0x1c]
fmul st(1)
fild dword[ebp-0x2c]
fstp qword[ebp-0x1c]
fadd qword[ebp-0x1c]
call fcn.00553aa0
fild dword[ebp-0x68]
movzx eax, al
or edi, eax
shl edi, 8
fstp qword[ebp-0x1c]
fmul qword[ebp-0x1c]
fild dword[ebp-0x20]
fstp qword[ebp-0x1c]
fadd qword[ebp-0x1c]
call fcn.00553aa0
mov ecx, dword[ebp-0x20]
mov edx, dword[ebp-0x28]
movzx eax, al
jmp off.b2604
mov edx, dword[ebp-0x28]
mov edi, eax
mov ecx, dword[ebp-0x20]
fstp st(0)
shl edi, 8
movzx eax, dl
or edi, eax
mov eax, dword[ebp-0x2c]
shl edi, 8
movzx eax, al
or edi, eax
movzx eax, cl
shl edi, 8
or edi, eax
mov al, byte[ebp-0x50]
sub al, dl
movzx edx, al
or eax, 0xffffffff
sub eax, dword[ebp-0x84]
shl eax, 8
or edx, eax
mov al, byte[ebp-0x54]
sub al, byte[ebp-0x2c]
shl edx, 8
movzx eax, al
or edx, eax
mov al, byte[ebp-0x58]
sub al, cl
shl edx, 8
movzx eax, al
or edx, eax
cmp byte[ebp-0xd], 0
jne off.b2681
mov ecx, dword[ebp-0x24]
mov eax, dword[ebp-0x34]
add ecx, esi
mov dword[eax+ecx*4-4], edi
mov edi, dword[ebp-0x24]
mov dword[eax+ecx*4], edx
jmp off.b2716
mov ecx, dword[ebp-0x34]
mov eax, esi
mov esi, dword[ebp-0x4c]
imul eax, esi
add eax, ebx
mov dword[ecx+eax*4], edx
mov eax, dword[ebp-0x14]
dec eax
imul eax, esi
add eax, ebx
mov dword[ecx+eax*4], edi
mov edi, dword[ebp-0x24]
jmp off.b2719
fstp st(0)
mov esi, dword[ebp-0x4c]
inc ebx
add edi, esi
mov dword[ebp-0x14], ebx
mov dword[ebp-0x24], edi
cmp ebx, dword[ebp-0x38]
jle off.b1902
mov eax, dword[ebp-0x48]
and dword[ebp-0xf4], 0
and dword[ebp-0xf0], 0
mov dword[ebp-0xe8], eax
lea eax, [ebp-0xf4]
push eax
lea eax, [ebp-0xbc]
mov dword[ebp-0xec], esi
push eax
lea eax, [ebp-0xe4]
push eax
mov eax, dword[ebp-0xa4]
mov ecx, eax
push dword[eax+4]
call fcn.00469e91
mov eax, dword[ebp-0xc8]
push dword[eax+4]
push dword[ebp-0xb8]
call fcn.00412959
push dword[ebp-0xcc]
call dword[sym.imp.GDI32.dll_DeleteObject]
lea ecx, [ebp-0x98]
mov dword[ebp-0x98], 0x585684
call fcn.00404d00
lea ecx, [ebp-0xbc]
call fcn.00411b08
call fcn.0055389d
ret 0xc

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/9c2b894b84f59672d8be2e984066f76f