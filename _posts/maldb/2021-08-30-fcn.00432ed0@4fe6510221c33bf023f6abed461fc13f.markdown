---
layout: post
title:  "fcn.00432ed0 @ 4fe6510221c33bf023f6abed461fc13f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.00432ed0
- **Origin (md5):** 4fe6510221c33bf023f6abed461fc13f
- **VirusTotal:** [virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f][virustotal_ref]

# Code Tags
<span class="tag" id="PROCESS">PROCESS</span>
<span class="tag" id="SCREEN">SCREEN</span>


# Behaviour Tags
<span class="bhv-tag" id="SCREENSHOTS_FOREGROUND_WINDOW">SCREENSHOTS_FOREGROUND_WINDOW / 0.259450762218963</span><span class="bhv-tag" id="CREATES_SOCKET_LISTENER">CREATES_SOCKET_LISTENER / 0.011207664453262439</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.00432ed0@4fe6510221c33bf023f6abed461fc13f">fcn.00432ed0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>push ebp<br>mov ebp, esp<br>mov eax, 0x8538<br>call fcn.00498540<br>mov eax, dword[0x4c6400]<br>push ebx<br>xor ebx, ebx<br>push esi<br>push edi<br>mov dword[ebp-0x10], eax<br>cmp eax, ebx<br>jne 0x432f1f<br>cmp dword[0x4c8600], 1<br>mov edx, dword[ebp+8]<br>sete al<br>test al, al<br>sete al<br>movzx ecx, al<br>push ecx<br>push edx<br>mov dword[0x4c8600], ebx<br>call fcn.0042dd40<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br>mov eax, dword[0x4c6464]<br>mov edi, dword[0x4c645c]<br>mov esi, dword[0x4c6460]<br>mov dword[ebp-0x30], eax<br>mov dword[0x4c8600], ebx<br>mov dword[0x4c862c], 1<br>mov word[0x4c8630], bx<br>mov dword[0x4c863c], 0x3fff<br>movzx eax, word[edi]<br>mov dword[ebp-0x20], esi<br>mov dword[ebp-0x28], ebx<br>mov byte[ebp-6], bl<br>cmp ax, bx<br>je 0x433034<br>lea ebx, [edi+2]<br>lea esp, [esp]<br>movzx esi, ax<br>test esi, 0xffffff80<br>jne 0x432f8d<br>push 2<br>push esi<br>call fcn.0048df9e<br>add esp, 8<br>test eax, eax<br>je 0x432f8d<br>and esi, 0xffffffdf<br>movzx eax, si<br>add eax, 0xffffffd6<br>cmp eax, 0x2c<br>ja case.0x432fa3.43<br>movzx ecx, byte[eax+0x433ea8]<br>jmp dword[ecx*4+0x433e80]<br>mov byte[0x4c862c], 0<br>jmp case.0x432fa3.43<br>mov byte[0x4c862d], 1<br>jmp case.0x432fa3.43<br>mov byte[0x4c862e], 1<br>jmp case.0x432fa3.43<br>mov byte[0x4c862f], 1<br>jmp case.0x432fa3.43<br>push ebx<br>call fcn.0048dfe6<br>add esp, 4<br>mov dword[0x4c863c], eax<br>cmp eax, 0x3fff<br>jle case.0x432fa3.43<br>mov dword[0x4c863c], 0x3fff<br>jmp case.0x432fa3.43<br>mov esi, ebx<br>call fcn.004130d0<br>fmul qword[0x4bd4a8]<br>call fcn.0049b670<br>mov dword[ebp-0x28], eax<br>jmp case.0x432fa3.43<br>mov byte[0x4c8630], 1<br>jmp case.0x432fa3.43<br>mov byte[0x4c8631], 1<br>jmp case.0x432fa3.43<br>mov byte[ebp-6], 1<br>movzx eax, word[edi+2]<br>add edi, 2<br>add ebx, 2<br>test ax, ax<br>jne 0x432f70<br>mov esi, dword[ebp-0x20]<br>xor ebx, ebx<br>push 0xff<br>lea edx, [ebp-0x333]<br>push ebx<br>push edx<br>mov byte[ebp-0x334], 0<br>call fcn.00495c20<br>add esp, 0xc<br>push 0x1ff<br>lea eax, [ebp-0x533]<br>push ebx<br>push eax<br>mov byte[ebp-0x534], 0<br>call fcn.00495c20<br>xor ecx, ecx<br>add esp, 0xc<br>mov word[ebp-0x1a], cx<br>mov dword[ebp-0xc], ebx<br>mov eax, esi<br>mov dword[ebp-0x14], esi<br>cmp word[esi], bx<br>je 0x433243<br>xor edx, edx<br>mov word[ebp-0x1c], dx<br>movzx ecx, word[eax]<br>mov eax, ecx<br>sub eax, 0x7b<br>je 0x43315f<br>sub eax, 2<br>je 0x433230<br>cmp byte[ebp-6], dl<br>je 0x4330ad<br>inc dword[ebp-0xc]<br>jmp 0x433230<br>push 0<br>mov word[ebp-0x1c], cx<br>mov byte[ebp-5], dl<br>call dword[sym.imp.USER32.dll_GetKeyboardLayout]<br>mov cx, word[ebp-0x1c]<br>test cx, cx<br>je 0x433230<br>cmp word[ebp-0x1a], 0<br>jne 0x4330e4<br>mov ecx, eax<br>mov eax, dword[ebp-0x1c]<br>lea esi, [ebp-5]<br>call fcn.00412360<br>mov bl, al<br>jmp 0x4331f7<br>movzx esi, cx<br>test esi, 0xffffff80<br>jne 0x433101<br>push 2<br>push esi<br>call fcn.0048df9e<br>add esp, 8<br>test eax, eax<br>je 0x433101<br>and esi, 0xffffffdf<br>cmp si, 0x56<br>jne 0x43312c<br>mov eax, dword[ebp-0x1a]<br>call fcn.004095a0<br>cmp ax, 0x4b<br>jne 0x43312c<br>push 0x10<br>lea eax, [ebp-0x18]<br>push 0<br>push eax<br>call fcn.0048e37b<br>add esp, 0xc<br>mov bl, al<br>jmp 0x4331f7<br>xor esi, esi<br>mov edi, edi<br>mov edx, dword[esi*8+0x4c36f8]<br>lea ecx, [ebp-0x1c]<br>push ecx<br>push edx<br>call fcn.0048cd49<br>add esp, 8<br>test eax, eax<br>je 0x433153<br>inc esi<br>cmp esi, 0x6d<br>jl 0x433130<br>jmp 0x433230<br>mov bl, byte[esi*8+0x4c36fc]<br>jmp 0x4331f7<br>mov ebx, dword[ebp-0x14]<br>lea edi, [ebx+2]<br>push 0x7d<br>push edi<br>call fcn.0048db21<br>mov esi, eax<br>add esp, 8<br>test esi, esi<br>je 0x433230<br>sub eax, ebx<br>sar eax, 1<br>dec eax<br>jne 0x433191<br>cmp word[esi+2], 0x7d<br>jne 0x433230<br>add esi, 2<br>jmp 0x433196<br>cmp eax, 1<br>jne 0x4331ab<br>cmp byte[ebp-6], 0<br>je 0x4331a4<br>inc dword[ebp-0xc]<br>jmp 0x433230<br>mov ax, word[edi]<br>mov word[ebp-0x1c], ax<br>xor ecx, ecx<br>push ecx<br>mov word[esi], cx<br>mov byte[ebp-5], cl<br>call dword[sym.imp.USER32.dll_GetKeyboardLayout]<br>push 1<br>mov ecx, eax<br>push 1<br>lea edx, [ebp-5]<br>mov eax, edi<br>call fcn.004122a0<br>mov bl, al<br>add esp, 8<br>test bl, bl<br>jne 0x4331ec<br>mov eax, edi<br>call fcn.00412200<br>movzx eax, ax<br>test ax, ax<br>je 0x4331ec<br>mov edx, eax<br>mov byte[ebp+edx-0x534], 1<br>mov eax, 0x7d<br>mov word[esi], ax<br>mov dword[ebp-0x14], esi<br>test bl, bl<br>je 0x433230<br>movzx esi, bl<br>or byte[ebp+esi-0x334], 1<br>cmp word[ebp-0x1c], 0<br>lea esi, [ebp+esi-0x334]<br>je 0x433230<br>mov ecx, dword[ebp-0x1c]<br>push ecx<br>call dword[sym.imp.USER32.dll_IsCharAlphaW]<br>test eax, eax<br>jne 0x433230<br>test byte[ebp-5], 0x30<br>je 0x43322d<br>or byte[esi], 2<br>jmp 0x433230<br>or byte[esi], 4<br>mov eax, dword[ebp-0x14]<br>add eax, 2<br>cmp word[eax], 0<br>mov dword[ebp-0x14], eax<br>jne 0x433083<br>mov eax, dword[ebp-0xc]<br>mov dword[0x4c860c], 0x4ab02c<br>test eax, eax<br>je 0x4332c7<br>lea eax, [eax+eax+2]<br>call fcn.00494320<br>mov esi, dword[ebp-0x20]<br>mov eax, esp<br>mov dword[0x4c860c], eax<br>cmp word[esi], 0<br>mov ebx, eax<br>je 0x4332c2<br>nop <br>movzx ecx, word[esi]<br>mov eax, ecx<br>sub eax, 0x7b<br>je 0x433287<br>sub eax, 2<br>je 0x4332b9<br>mov word[ebx], cx<br>add ebx, 2<br>jmp 0x4332b9<br>lea edi, [esi+2]<br>push 0x7d<br>push edi<br>call fcn.0048db21<br>add esp, 8<br>test eax, eax<br>je 0x4332b9<br>cmp eax, edi<br>jne 0x4332a7<br>cmp word[eax+2], 0x7d<br>jne 0x4332a7<br>add eax, 2<br>add esi, 4<br>cmp eax, esi<br>jne 0x4332b7<br>mov dx, word[edi]<br>mov word[ebx], dx<br>add ebx, 2<br>mov esi, eax<br>add esi, 2<br>cmp word[esi], 0<br>jne 0x433270<br>xor eax, eax<br>mov word[ebx], ax<br>mov ecx, dword[ebp-0x30]<br>mov esi, dword[ebp+8]<br>xor edi, edi<br>mov dword[0x4c861c], edi<br>cmp word[ecx], di<br>je 0x433501<br>cmp dword[0x4c8618], edi<br>jne 0x43330a<br>push 0x1000<br>call fcn.0048cdd4<br>add esp, 4<br>mov dword[0x4c8618], eax<br>cmp eax, edi<br>je 0x4333f0<br>mov dword[0x4c8620], 0x400<br>cmp byte[esi+1], 3<br>ja 0x433317<br>xor eax, eax<br>jmp 0x43339f<br>mov eax, dword[0x4c640c]<br>cmp eax, edi<br>je 0x433380<br>mov dl, byte[eax+0x17]<br>test dl, dl<br>jne 0x43332f<br>mov ecx, dword[eax+0xc]<br>mov cl, byte[ecx+0x17]<br>jmp 0x433331<br>mov cl, dl<br>cmp cl, 1<br>jne 0x433380<br>movzx ecx, byte[esi]<br>lea ebx, [ecx*8]<br>sub ebx, ecx<br>test byte[ebx*2+0x4c29d6], 0x80<br>jne 0x433380<br>cmp dword[0x4c661c], edi<br>jne 0x433371<br>test dl, dl<br>jne 0x43335d<br>mov ecx, dword[eax+0xc]<br>jmp 0x43335f<br>mov ecx, eax<br>test byte[ecx+0x15], 0xa<br>jne 0x433371<br>xor edx, edx<br>cmp dword[ecx+0xc], edi<br>setne dl<br>cmp edx, edi<br>je 0x433380<br>cmp eax, dword[0x4c6cb4]<br>je 0x433380<br>call fcn.00413620<br>jmp 0x43339f<br>mov eax, dword[0x4c6464]<br>lea edx, [eax+2]<br>jmp 0x433390<br>mov cx, word[eax]<br>add eax, 2<br>cmp cx, di<br>jne 0x433390<br>sub eax, edx<br>sar eax, 1<br>inc eax<br>cmp eax, dword[0x4c8628]<br>jbe 0x433411<br>mov dword[0x4c8628], eax<br>cmp eax, 0x1000<br>ja 0x4333be<br>mov dword[0x4c8628], 0x1000<br>mov eax, dword[0x4c8624]<br>cmp eax, edi<br>je 0x4333d0<br>push eax<br>call fcn.0048e3af<br>add esp, 4<br>mov eax, dword[0x4c8628]<br>lea ecx, [eax+eax]<br>push ecx<br>call fcn.0048cdd4<br>add esp, 4<br>mov dword[0x4c8624], eax<br>cmp eax, edi<br>jne 0x433416<br>mov dword[0x4c8628], edi<br>push 0x4ab02c<br>push edi<br>push str.Out_of_memory.<br>mov ecx, esi<br>call fcn.0042df10<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br>mov eax, dword[0x4c8624]<br>mov edx, dword[0x4c8618]<br>mov ecx, dword[0x4c861c]<br>mov edi, dword[ebp-0x30]<br>mov dword[edx+ecx*4], eax<br>cmp word[edi], 0<br>mov esi, dword[0x4c8624]<br>je 0x4334e1<br>mov ebx, 0x2c<br>lea ecx, [ecx]<br>movzx eax, word[edi]<br>cmp ax, bx<br>je 0x433453<br>mov word[esi], ax<br>add esi, 2<br>jmp 0x4334d4<br>cmp word[edi+2], bx<br>jne 0x433466<br>mov edx, ebx<br>mov word[esi], dx<br>add esi, 2<br>add edi, 2<br>jmp 0x4334d4<br>xor eax, eax<br>mov word[esi], ax<br>mov ecx, dword[0x4c8618]<br>mov eax, dword[0x4c861c]<br>mov edx, dword[ecx+eax*4]<br>cmp word[edx], 0<br>je 0x43349b<br>inc eax<br>mov dword[0x4c861c], eax<br>add esi, 2<br>mov dword[ecx+eax*4], esi<br>xor eax, eax<br>mov word[esi], ax<br>mov eax, dword[0x4c861c]<br>mov ecx, dword[0x4c8618]<br>cmp word[edi+2], 0<br>je 0x4334d4<br>mov edx, dword[0x4c8620]<br>cmp eax, edx<br>jb 0x4334d4<br>lea edx, [edx*4+0x1000]<br>push edx<br>push ecx<br>call fcn.0048e007<br>add esp, 8<br>test eax, eax<br>je 0x43362c<br>add dword[0x4c8620], 0x400<br>mov dword[0x4c8618], eax<br>add edi, 2<br>cmp word[edi], 0<br>jne 0x433440<br>xor eax, eax<br>mov word[esi], ax<br>mov ecx, dword[0x4c8618]<br>mov edx, dword[0x4c861c]<br>mov eax, dword[ecx+edx*4]<br>cmp word[eax], 0<br>je 0x433501<br>inc dword[0x4c861c]<br>cmp byte[0x4c660d], 0<br>je 0x43353f<br>mov ecx, dword[0x4c64b8]<br>push 0xc<br>push ecx<br>call dword[sym.imp.USER32.dll_KillTimer]<br>test eax, eax<br>je 0x433524<br>mov byte[0x4c660d], 0<br>push 0x10<br>call dword[sym.imp.USER32.dll_GetQueueStatus]<br>shr eax, 0x10<br>test al, 0x10<br>je 0x43353f<br>push 1<br>push 0xffffffffffffffff<br>call fcn.00401340<br>add esp, 8<br>xor edx, edx<br>push 0x7ffe<br>push edx<br>lea eax, [ebp-0x8532]<br>push eax<br>mov word[ebp-0x8534], dx<br>call fcn.00495c20<br>or byte[0x4c6ec6], 1<br>add esp, 0xc<br>cmp dword[0x4c65e8], 0<br>lea ecx, [ebp-0x8534]<br>lea edx, [ebp-0x334]<br>lea eax, [ebp-0x534]<br>mov dword[0x4c8634], ecx<br>mov dword[0x4c8638], 0<br>mov dword[0x4c8604], edx<br>mov dword[0x4c8608], eax<br>mov dword[0x4c8600], 1<br>mov byte[0x4c6608], 1<br>jne 0x4335bd<br>mov ecx, dword[0x4c3acc]<br>movzx edx, word[ecx]<br>push edx<br>call fcn.00408030<br>add esp, 4<br>mov eax, dword[ebp-0x28]<br>test eax, eax<br>jle 0x433600<br>cmp byte[0x4c660d], 0<br>jne 0x433600<br>cmp eax, 0xa<br>jge 0x4335d7<br>mov eax, 0xa<br>push 0x403830<br>push eax<br>mov eax, dword[0x4c64b8]<br>push 0xc<br>push eax<br>call dword[sym.imp.USER32.dll_SetTimer]<br>test eax, eax<br>setne cl<br>mov byte[0x4c660d], cl<br>jmp 0x433600<br>push 1<br>push 0x8000012f<br>call fcn.00401340<br>mov eax, dword[0x4c8600]<br>add esp, 8<br>cmp eax, 1<br>je 0x433600<br>add eax, 0xfffffffe<br>cmp eax, 3<br>ja case.default.0x433625<br>jmp dword[eax*4+0x433ed8]<br>mov ecx, dword[ebp+8]<br>push 0x4ab02c<br>push 0<br>push str.Out_of_memory.<br>call fcn.0042df10<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br>mov edx, dword[0x4c6cb4]<br>push 1<br>push 0<br>push 0xffffffffffffffff<br>push str.Timeout<br>push edx<br>call fcn.00476680<br>jmp 0x4339cc<br>mov eax, dword[0x4c6cb4]<br>push 1<br>push 0<br>push 0xffffffffffffffff<br>push str.Match<br>push eax<br>call fcn.00476680<br>jmp 0x4339cc<br>mov edx, dword[0x4a9a5c]<br>mov ecx, dword[str.EndKey:]<br>mov eax, dword[0x4a9a60]<br>push 0xf0<br>mov dword[ebp-0x130], edx<br>mov dword[ebp-0x134], ecx<br>mov ecx, dword[0x4a9a64]<br>lea edx, [ebp-0x124]<br>push 0<br>push edx<br>mov dword[ebp-0x12c], eax<br>mov dword[ebp-0x128], ecx<br>call fcn.00495c20<br>mov ax, word[0x4c8614]<br>add esp, 0xc<br>test ax, ax<br>je 0x4336eb<br>mov word[ebp-0x126], ax<br>xor eax, eax<br>mov word[ebp-0x124], ax<br>jmp 0x433825<br>cmp byte[0x4c8617], 0<br>je 0x43378a<br>push 0xff<br>lea ecx, [ebp-0x233]<br>push 0<br>push ecx<br>mov byte[ebp-0x234], 0<br>call fcn.00495c20<br>or byte[ebp-0x224], 0x80<br>add esp, 0xc<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>test eax, eax<br>je 0x433731<br>push 0<br>push eax<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>jmp 0x433733<br>xor eax, eax<br>push eax<br>call dword[sym.imp.USER32.dll_GetKeyboardLayout]<br>xor edx, edx<br>cmp dword[0x4c6648], edx<br>push eax<br>setne dl<br>lea eax, [ebp-0x126]<br>lea ecx, [ebp-0x234]<br>xor bl, bl<br>push edx<br>movzx edx, byte[0x4c8610]<br>push 2<br>push eax<br>push ecx<br>push edx<br>call fcn.00412700<br>movzx ecx, byte[0x4c8610]<br>movzx eax, ax<br>add esp, 4<br>push eax<br>push ecx<br>call dword[sym.imp.USER32.dll_ToUnicodeEx]<br>xor edx, edx<br>mov word[ebp+eax*2-0x126], dx<br>jmp 0x433825<br>cmp byte[0x4c8616], 0<br>je 0x4337ef<br>mov cx, word[0x4c8612]<br>xor eax, eax<br>lea esp, [esp]<br>cmp word[eax*8+0x4c3a64], cx<br>je 0x4337ce<br>inc eax<br>cmp eax, 0xd<br>jl 0x4337a0<br>movzx eax, cx<br>push eax<br>push str.sc_03X<br>mov esi, 0x79<br>lea edi, [ebp-0x126]<br>call fcn.004738d0<br>add esp, 8<br>jmp 0x43380a<br>mov eax, dword[eax*8+0x4c3a60]<br>push 0x78<br>push eax<br>lea ecx, [ebp-0x126]<br>push ecx<br>call fcn.0048fa44<br>add esp, 0xc<br>xor edx, edx<br>mov word[ebp-0x36], dx<br>jmp 0x43380a<br>mov bl, byte[0x4c8610]<br>push 1<br>mov eax, 0x79<br>lea ecx, [ebp-0x126]<br>call fcn.00412060<br>add esp, 4<br>mov ecx, dword[ebp-0x126]<br>add ecx, 0xffffff9f<br>cmp cx, 0x19<br>ja 0x433825<br>mov edx, 0xffe0<br>add word[ebp-0x126], dx<br>mov ecx, dword[0x4c6cb4]<br>push 1<br>push 0<br>push 0xffffffffffffffff<br>lea eax, [ebp-0x134]<br>push eax<br>push ecx<br>call fcn.00476680<br>jmp 0x4339cc<br>mov edx, dword[0x4c6cb4]<br>push 1<br>push 0<br>push 0xffffffffffffffff<br>push 0x4a9a68<br>push edx<br>call fcn.00476680<br>jmp 0x4339cc<br>mov ecx, dword[0x4c6cb4]<br>mov al, byte[ecx+0x17]<br>mov dword[ebp-0xc], ecx<br>test al, al<br>jne 0x433888<br>mov eax, dword[ecx+0xc]<br>push 1<br>push 0<br>push 0xffffffffffffffff<br>push str.NewInput<br>push eax<br>call fcn.00476680<br>jmp 0x4339cc<br>cmp dword[ecx+8], str.NewInput<br>lea edx, [ecx+8]<br>mov dword[ebp-0x14], edx<br>jne 0x43389e<br>mov edx, dword[ecx+0xc]<br>shr edx, 1<br>jmp 0x4338a3<br>mov edx, 8<br>lea esi, [edx+1]<br>mov dword[ebp-0x20], edx<br>lea ebx, [esi+esi]<br>cmp al, 2<br>jne 0x43390f<br>cmp dword[0x4c85f0], 0<br>mov ebx, edx<br>jne 0x4339cc<br>cmp edx, 0xffffffff<br>jne 0x4338cb<br>mov ebx, 8<br>jmp 0x4338cf<br>test edx, edx<br>je 0x433900<br>lea edi, [ebx+1]<br>mov esi, 0x4c85e4<br>call fcn.004041f0<br>test eax, eax<br>je 0x4339cc<br>mov eax, dword[0x4c85f0]<br>push ebx<br>push str.NewInput<br>push eax<br>mov esi, eax<br>call fcn.0048fa44<br>add esp, 0xc<br>xor ecx, ecx<br>mov word[esi+ebx*2], cx<br>mov ecx, 0x4c85e4<br>call fcn.00404270<br>jmp 0x4339cc<br>cmp ebx, dword[0x4c28bc]<br>jbe 0x433935<br>cmp ebx, dword[ecx+0x10]<br>jbe 0x433935<br>push 0x4ab02c<br>push 0x4bb9f0<br>mov ecx, 0x4c8640<br>call fcn.0042e1d0<br>jmp 0x4339cc<br>cmp esi, 2<br>jae 0x433948<br>push 4<br>xor al, al<br>call fcn.00476c30<br>jmp 0x4339cc<br>mov al, byte[ecx+0x15]<br>lea edi, [ecx+0x15]<br>test al, 2<br>je 0x433960<br>mov ecx, dword[ecx]<br>and al, 0x3d<br>mov byte[edi], al<br>mov edx, dword[ecx]<br>mov eax, dword[edx+8]<br>push ecx<br>call eax<br>mov esi, dword[ebp-0xc]<br>mov edx, dword[esi+0x10]<br>and byte[edi], 0x82<br>mov dword[ebp+8], edx<br>cmp ebx, edx<br>jbe 0x43399b<br>mov cl, byte[esi+0x14]<br>cmp cl, 1<br>jbe 0x433a46<br>cmp cl, 2<br>je 0x433a83<br>mov esi, dword[ebp+8]<br>mov eax, dword[ebp+8]<br>mov edx, dword[ebp-0xc]<br>mov ecx, dword[ebp-0x14]<br>and byte[edi], 0x7f<br>mov dword[edx+0x10], esi<br>mov dword[ecx], eax<br>mov esi, edx<br>mov edi, dword[ebp-0x14]<br>mov eax, dword[edi]<br>cmp eax, str.NewInput<br>je 0x4339bc<br>mov ecx, dword[ebp-0x20]<br>lea edx, [ecx+ecx]<br>push edx<br>push str.NewInput<br>push eax<br>call fcn.0048d7c0<br>add esp, 0xc<br>mov eax, dword[ebp-0x20]<br>mov ecx, dword[edi]<br>add eax, eax<br>xor edx, edx<br>mov word[eax+ecx], dx<br>mov dword[esi+0xc], eax<br>cmp byte[0x4c660d], 0<br>mov edi, dword[ebp-0x10]<br>mov dword[0x4c8600], 0<br>je 0x433a16<br>mov eax, dword[0x4c64b8]<br>push 0xc<br>push eax<br>call dword[sym.imp.USER32.dll_KillTimer]<br>test eax, eax<br>je 0x4339fb<br>mov byte[0x4c660d], 0<br>push 0x10<br>call dword[sym.imp.USER32.dll_GetQueueStatus]<br>shr eax, 0x10<br>test al, 0x10<br>je 0x433a16<br>push 1<br>push 0xffffffffffffffff<br>call fcn.00401340<br>add esp, 8<br>mov dl, byte[edi+0x17]<br>test dl, dl<br>jne 0x433b98<br>mov edx, dword[edi+0xc]<br>push 1<br>push 0<br>push 0xffffffffffffffff<br>lea ecx, [ebp-0x8534]<br>push ecx<br>push edx<br>call fcn.00476680<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br>cmp ebx, 0x80<br>ja 0x433a83<br>cmp ebx, 8<br>ja 0x433a5a<br>mov esi, 8<br>jmp 0x433a68<br>mov ecx, 0x10<br>cmp ecx, ebx<br>sbb esi, esi<br>and esi, 0x70<br>add esi, ecx<br>mov eax, esi<br>call fcn.00470d00<br>test eax, eax<br>je 0x4339cc<br>mov edx, dword[ebp-0xc]<br>mov byte[edx+0x14], 1<br>jmp 0x43398b<br>cmp ebx, 0x20<br>jae 0x433a92<br>mov esi, 0x20<br>jmp 0x433b0d<br>cmp ebx, 0x208<br>jae 0x433aa1<br>mov esi, 0x208<br>jmp 0x433b0d<br>cmp ebx, 0x50000<br>jae 0x433adc<br>mov dword[ebp+8], ebx<br>fild dword[ebp+8]<br>test ebx, ebx<br>jns 0x433ab9<br>fadd qword[0x4bd480]<br>fmul qword[0x4bd4b8]<br>fnstcw word[ebp+0xa]<br>movzx eax, word[ebp+0xa]<br>or eax, 0xc00<br>mov dword[ebp-0x28], eax<br>fldcw word[ebp-0x28]<br>fistp qword[ebp-0x2c]<br>mov esi, dword[ebp-0x2c]<br>fldcw word[ebp+0xa]<br>jmp 0x433b0d<br>cmp ebx, 0x320000<br>jae 0x433aec<br>lea esi, [ebx+0x8000]<br>jmp 0x433b0d<br>cmp ebx, 0xc80000<br>jae 0x433b07<br>mov eax, 0x51eb851f<br>mul ebx<br>mov esi, edx<br>mov edx, dword[ebp+8]<br>shr esi, 5<br>add esi, ebx<br>jmp 0x433b0d<br>lea esi, [ebx+0x20000]<br>mov eax, dword[0x4c28bc]<br>cmp esi, eax<br>jbe 0x433b18<br>mov esi, eax<br>cmp cl, 2<br>jne 0x433b4e<br>test edx, edx<br>je 0x433b4e<br>mov eax, dword[ebp-0x14]<br>mov ecx, dword[eax]<br>push ecx<br>mov bl, 1<br>call fcn.0048e3af<br>add esp, 4<br>test esi, esi<br>js 0x433b52<br>push esi<br>call fcn.0048cdd4<br>add esp, 4<br>test eax, eax<br>je 0x433b52<br>mov edx, dword[ebp-0xc]<br>mov byte[edx+0x14], 2<br>jmp 0x43398b<br>xor bl, bl<br>jmp 0x433b31<br>test bl, bl<br>je 0x433b6b<br>mov eax, dword[ebp-0xc]<br>mov ecx, dword[ebp-0x14]<br>mov dword[eax+0x10], 0<br>mov dword[ecx], 0x4c85b8<br>jmp 0x433b75<br>mov edx, dword[ebp-0x14]<br>mov eax, dword[edx]<br>xor ecx, ecx<br>mov word[eax], cx<br>mov edx, dword[ebp-0xc]<br>push 0x4ab02c<br>push str.Out_of_memory.<br>mov ecx, 0x4c8640<br>mov dword[edx+0xc], 0<br>call fcn.0042e1d0<br>jmp 0x4339cc<br>lea eax, [ebp-0x8534]<br>cmp dword[edi+8], eax<br>jne 0x433bad<br>mov esi, dword[edi+0xc]<br>shr esi, 1<br>mov dword[ebp-0x28], esi<br>jmp 0x433bca<br>lea eax, [ebp-0x8534]<br>lea esi, [eax+2]<br>mov cx, word[eax]<br>add eax, 2<br>test cx, cx<br>jne 0x433bb6<br>sub eax, esi<br>sar eax, 1<br>mov esi, eax<br>mov dword[ebp-0x28], eax<br>lea eax, [esi+1]<br>lea ebx, [eax+eax]<br>cmp dl, 2<br>jne 0x433c57<br>cmp dword[0x4c85f0], 0<br>mov ebx, esi<br>jne 0x433d57<br>cmp esi, 0xffffffff<br>jne 0x433c07<br>lea eax, [ebp-0x8534]<br>lea edx, [eax+2]<br>mov cx, word[eax]<br>add eax, 2<br>test cx, cx<br>jne 0x433bf6<br>sub eax, edx<br>sar eax, 1<br>mov ebx, eax<br>test ebx, ebx<br>je 0x433c3e<br>lea edi, [ebx+1]<br>mov esi, 0x4c85e4<br>call fcn.004041f0<br>test eax, eax<br>je 0x433d57<br>mov eax, dword[0x4c85f0]<br>push ebx<br>lea ecx, [ebp-0x8534]<br>push ecx<br>push eax<br>mov esi, eax<br>call fcn.0048fa44<br>add esp, 0xc<br>xor edx, edx<br>mov word[esi+ebx*2], dx<br>mov ecx, 0x4c85e4<br>call fcn.00404270<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br>cmp ebx, dword[0x4c28bc]<br>jbe 0x433c87<br>cmp ebx, dword[edi+0x10]<br>jbe 0x433c87<br>push 0x4ab02c<br>push 0x4bb9f0<br>mov ecx, 0x4c8640<br>call fcn.0042e1d0<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br>cmp eax, 2<br>jae 0x433cab<br>push 4<br>xor al, al<br>mov ecx, edi<br>call fcn.00476c30<br>mov eax, 1<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br>mov al, byte[edi+0x15]<br>test al, 2<br>je 0x433cc1<br>and al, 0x3d<br>mov byte[edi+0x15], al<br>mov eax, dword[edi]<br>mov ecx, dword[eax]<br>mov edx, dword[ecx+8]<br>push eax<br>call edx<br>and byte[edi+0x15], 0x82<br>cmp ebx, dword[edi+0x10]<br>jbe 0x433cee<br>mov cl, byte[edi+0x14]<br>cmp cl, 1<br>jbe 0x433d2a<br>cmp cl, 2<br>je 0x433d71<br>mov esi, dword[ebp+8]<br>mov eax, dword[ebp+8]<br>and byte[edi+0x15], 0x7f<br>mov dword[edi+0x10], esi<br>mov esi, dword[ebp-0x28]<br>mov dword[edi+8], eax<br>mov eax, dword[edi+8]<br>lea ecx, [ebp-0x8534]<br>cmp eax, ecx<br>je 0x433d09<br>lea edx, [esi+esi]<br>push edx<br>push ecx<br>push eax<br>call fcn.0048d7c0<br>add esp, 0xc<br>mov edx, dword[edi+8]<br>lea eax, [esi+esi]<br>xor ecx, ecx<br>mov word[eax+edx], cx<br>mov dword[edi+0xc], eax<br>lea eax, [ecx+1]<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br>cmp ebx, 0x80<br>ja 0x433d71<br>cmp ebx, 8<br>ja 0x433d3e<br>mov esi, 8<br>jmp 0x433d4c<br>mov eax, 0x10<br>cmp eax, ebx<br>sbb esi, esi<br>and esi, 0x70<br>add esi, eax<br>mov eax, esi<br>call fcn.00470d00<br>test eax, eax<br>jne 0x433d68<br>xor eax, eax<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br>mov byte[edi+0x14], 1<br>jmp 0x433ce1<br>cmp ebx, 0x20<br>jae 0x433d80<br>mov esi, 0x20<br>jmp 0x433df8<br>cmp ebx, 0x208<br>jae 0x433d8f<br>mov esi, 0x208<br>jmp 0x433df8<br>cmp ebx, 0x50000<br>jae 0x433dca<br>mov dword[ebp+8], ebx<br>fild dword[ebp+8]<br>test ebx, ebx<br>jns 0x433da7<br>fadd qword[0x4bd480]<br>fmul qword[0x4bd4b8]<br>fnstcw word[ebp+0xa]<br>movzx eax, word[ebp+0xa]<br>or eax, 0xc00<br>mov dword[ebp-0x30], eax<br>fldcw word[ebp-0x30]<br>fistp qword[ebp-0x34]<br>mov esi, dword[ebp-0x34]<br>fldcw word[ebp+0xa]<br>jmp 0x433df8<br>cmp ebx, 0x320000<br>jae 0x433dda<br>lea esi, [ebx+0x8000]<br>jmp 0x433df8<br>cmp ebx, 0xc80000<br>jae 0x433df2<br>mov eax, 0x51eb851f<br>mul ebx<br>mov esi, edx<br>shr esi, 5<br>add esi, ebx<br>jmp 0x433df8<br>lea esi, [ebx+0x20000]<br>mov eax, dword[0x4c28bc]<br>cmp esi, eax<br>jbe 0x433e03<br>mov esi, eax<br>cmp cl, 2<br>jne 0x433e36<br>cmp dword[edi+0x10], 0<br>je 0x433e36<br>mov ecx, dword[edi+8]<br>push ecx<br>mov bl, 1<br>call fcn.0048e3af<br>add esp, 4<br>test esi, esi<br>js 0x433e3a<br>push esi<br>call fcn.0048cdd4<br>add esp, 4<br>test eax, eax<br>je 0x433e3a<br>mov byte[edi+0x14], 2<br>jmp 0x433ce1<br>xor bl, bl<br>jmp 0x433e1c<br>test bl, bl<br>je 0x433e4e<br>mov dword[edi+0x10], 0<br>mov dword[edi+8], 0x4c85b8<br>jmp 0x433e56<br>mov edx, dword[edi+8]<br>xor eax, eax<br>mov word[edx], ax<br>push 0x4ab02c<br>push str.Out_of_memory.<br>mov ecx, 0x4c8640<br>mov dword[edi+0xc], 0<br>call fcn.0042e1d0<br>lea esp, [ebp-0x8544]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret 4<br><eoc> ', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
mov ebp, esp
mov eax, 0x8538
call fcn.00498540
mov eax, dword[0x4c6400]
push ebx
xor ebx, ebx
push esi
push edi
mov dword[ebp-0x10], eax
cmp eax, ebx
jne 0x432f1f
cmp dword[0x4c8600], 1
mov edx, dword[ebp+8]
sete al
test al, al
sete al
movzx ecx, al
push ecx
push edx
mov dword[0x4c8600], ebx
call fcn.0042dd40
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4
mov eax, dword[0x4c6464]
mov edi, dword[0x4c645c]
mov esi, dword[0x4c6460]
mov dword[ebp-0x30], eax
mov dword[0x4c8600], ebx
mov dword[0x4c862c], 1
mov word[0x4c8630], bx
mov dword[0x4c863c], 0x3fff
movzx eax, word[edi]
mov dword[ebp-0x20], esi
mov dword[ebp-0x28], ebx
mov byte[ebp-6], bl
cmp ax, bx
je 0x433034
lea ebx, [edi+2]
lea esp, [esp]
movzx esi, ax
test esi, 0xffffff80
jne 0x432f8d
push 2
push esi
call fcn.0048df9e
add esp, 8
test eax, eax
je 0x432f8d
and esi, 0xffffffdf
movzx eax, si
add eax, 0xffffffd6
cmp eax, 0x2c
ja case.0x432fa3.43
movzx ecx, byte[eax+0x433ea8]
jmp dword[ecx*4+0x433e80]
mov byte[0x4c862c], 0
jmp case.0x432fa3.43
mov byte[0x4c862d], 1
jmp case.0x432fa3.43
mov byte[0x4c862e], 1
jmp case.0x432fa3.43
mov byte[0x4c862f], 1
jmp case.0x432fa3.43
push ebx
call fcn.0048dfe6
add esp, 4
mov dword[0x4c863c], eax
cmp eax, 0x3fff
jle case.0x432fa3.43
mov dword[0x4c863c], 0x3fff
jmp case.0x432fa3.43
mov esi, ebx
call fcn.004130d0
fmul qword[0x4bd4a8]
call fcn.0049b670
mov dword[ebp-0x28], eax
jmp case.0x432fa3.43
mov byte[0x4c8630], 1
jmp case.0x432fa3.43
mov byte[0x4c8631], 1
jmp case.0x432fa3.43
mov byte[ebp-6], 1
movzx eax, word[edi+2]
add edi, 2
add ebx, 2
test ax, ax
jne 0x432f70
mov esi, dword[ebp-0x20]
xor ebx, ebx
push 0xff
lea edx, [ebp-0x333]
push ebx
push edx
mov byte[ebp-0x334], 0
call fcn.00495c20
add esp, 0xc
push 0x1ff
lea eax, [ebp-0x533]
push ebx
push eax
mov byte[ebp-0x534], 0
call fcn.00495c20
xor ecx, ecx
add esp, 0xc
mov word[ebp-0x1a], cx
mov dword[ebp-0xc], ebx
mov eax, esi
mov dword[ebp-0x14], esi
cmp word[esi], bx
je 0x433243
xor edx, edx
mov word[ebp-0x1c], dx
movzx ecx, word[eax]
mov eax, ecx
sub eax, 0x7b
je 0x43315f
sub eax, 2
je 0x433230
cmp byte[ebp-6], dl
je 0x4330ad
inc dword[ebp-0xc]
jmp 0x433230
push 0
mov word[ebp-0x1c], cx
mov byte[ebp-5], dl
call dword[sym.imp.USER32.dll_GetKeyboardLayout]
mov cx, word[ebp-0x1c]
test cx, cx
je 0x433230
cmp word[ebp-0x1a], 0
jne 0x4330e4
mov ecx, eax
mov eax, dword[ebp-0x1c]
lea esi, [ebp-5]
call fcn.00412360
mov bl, al
jmp 0x4331f7
movzx esi, cx
test esi, 0xffffff80
jne 0x433101
push 2
push esi
call fcn.0048df9e
add esp, 8
test eax, eax
je 0x433101
and esi, 0xffffffdf
cmp si, 0x56
jne 0x43312c
mov eax, dword[ebp-0x1a]
call fcn.004095a0
cmp ax, 0x4b
jne 0x43312c
push 0x10
lea eax, [ebp-0x18]
push 0
push eax
call fcn.0048e37b
add esp, 0xc
mov bl, al
jmp 0x4331f7
xor esi, esi
mov edi, edi
mov edx, dword[esi*8+0x4c36f8]
lea ecx, [ebp-0x1c]
push ecx
push edx
call fcn.0048cd49
add esp, 8
test eax, eax
je 0x433153
inc esi
cmp esi, 0x6d
jl 0x433130
jmp 0x433230
mov bl, byte[esi*8+0x4c36fc]
jmp 0x4331f7
mov ebx, dword[ebp-0x14]
lea edi, [ebx+2]
push 0x7d
push edi
call fcn.0048db21
mov esi, eax
add esp, 8
test esi, esi
je 0x433230
sub eax, ebx
sar eax, 1
dec eax
jne 0x433191
cmp word[esi+2], 0x7d
jne 0x433230
add esi, 2
jmp 0x433196
cmp eax, 1
jne 0x4331ab
cmp byte[ebp-6], 0
je 0x4331a4
inc dword[ebp-0xc]
jmp 0x433230
mov ax, word[edi]
mov word[ebp-0x1c], ax
xor ecx, ecx
push ecx
mov word[esi], cx
mov byte[ebp-5], cl
call dword[sym.imp.USER32.dll_GetKeyboardLayout]
push 1
mov ecx, eax
push 1
lea edx, [ebp-5]
mov eax, edi
call fcn.004122a0
mov bl, al
add esp, 8
test bl, bl
jne 0x4331ec
mov eax, edi
call fcn.00412200
movzx eax, ax
test ax, ax
je 0x4331ec
mov edx, eax
mov byte[ebp+edx-0x534], 1
mov eax, 0x7d
mov word[esi], ax
mov dword[ebp-0x14], esi
test bl, bl
je 0x433230
movzx esi, bl
or byte[ebp+esi-0x334], 1
cmp word[ebp-0x1c], 0
lea esi, [ebp+esi-0x334]
je 0x433230
mov ecx, dword[ebp-0x1c]
push ecx
call dword[sym.imp.USER32.dll_IsCharAlphaW]
test eax, eax
jne 0x433230
test byte[ebp-5], 0x30
je 0x43322d
or byte[esi], 2
jmp 0x433230
or byte[esi], 4
mov eax, dword[ebp-0x14]
add eax, 2
cmp word[eax], 0
mov dword[ebp-0x14], eax
jne 0x433083
mov eax, dword[ebp-0xc]
mov dword[0x4c860c], 0x4ab02c
test eax, eax
je 0x4332c7
lea eax, [eax+eax+2]
call fcn.00494320
mov esi, dword[ebp-0x20]
mov eax, esp
mov dword[0x4c860c], eax
cmp word[esi], 0
mov ebx, eax
je 0x4332c2
nop
movzx ecx, word[esi]
mov eax, ecx
sub eax, 0x7b
je 0x433287
sub eax, 2
je 0x4332b9
mov word[ebx], cx
add ebx, 2
jmp 0x4332b9
lea edi, [esi+2]
push 0x7d
push edi
call fcn.0048db21
add esp, 8
test eax, eax
je 0x4332b9
cmp eax, edi
jne 0x4332a7
cmp word[eax+2], 0x7d
jne 0x4332a7
add eax, 2
add esi, 4
cmp eax, esi
jne 0x4332b7
mov dx, word[edi]
mov word[ebx], dx
add ebx, 2
mov esi, eax
add esi, 2
cmp word[esi], 0
jne 0x433270
xor eax, eax
mov word[ebx], ax
mov ecx, dword[ebp-0x30]
mov esi, dword[ebp+8]
xor edi, edi
mov dword[0x4c861c], edi
cmp word[ecx], di
je 0x433501
cmp dword[0x4c8618], edi
jne 0x43330a
push 0x1000
call fcn.0048cdd4
add esp, 4
mov dword[0x4c8618], eax
cmp eax, edi
je 0x4333f0
mov dword[0x4c8620], 0x400
cmp byte[esi+1], 3
ja 0x433317
xor eax, eax
jmp 0x43339f
mov eax, dword[0x4c640c]
cmp eax, edi
je 0x433380
mov dl, byte[eax+0x17]
test dl, dl
jne 0x43332f
mov ecx, dword[eax+0xc]
mov cl, byte[ecx+0x17]
jmp 0x433331
mov cl, dl
cmp cl, 1
jne 0x433380
movzx ecx, byte[esi]
lea ebx, [ecx*8]
sub ebx, ecx
test byte[ebx*2+0x4c29d6], 0x80
jne 0x433380
cmp dword[0x4c661c], edi
jne 0x433371
test dl, dl
jne 0x43335d
mov ecx, dword[eax+0xc]
jmp 0x43335f
mov ecx, eax
test byte[ecx+0x15], 0xa
jne 0x433371
xor edx, edx
cmp dword[ecx+0xc], edi
setne dl
cmp edx, edi
je 0x433380
cmp eax, dword[0x4c6cb4]
je 0x433380
call fcn.00413620
jmp 0x43339f
mov eax, dword[0x4c6464]
lea edx, [eax+2]
jmp 0x433390
mov cx, word[eax]
add eax, 2
cmp cx, di
jne 0x433390
sub eax, edx
sar eax, 1
inc eax
cmp eax, dword[0x4c8628]
jbe 0x433411
mov dword[0x4c8628], eax
cmp eax, 0x1000
ja 0x4333be
mov dword[0x4c8628], 0x1000
mov eax, dword[0x4c8624]
cmp eax, edi
je 0x4333d0
push eax
call fcn.0048e3af
add esp, 4
mov eax, dword[0x4c8628]
lea ecx, [eax+eax]
push ecx
call fcn.0048cdd4
add esp, 4
mov dword[0x4c8624], eax
cmp eax, edi
jne 0x433416
mov dword[0x4c8628], edi
push 0x4ab02c
push edi
push str.Out_of_memory.
mov ecx, esi
call fcn.0042df10
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4
mov eax, dword[0x4c8624]
mov edx, dword[0x4c8618]
mov ecx, dword[0x4c861c]
mov edi, dword[ebp-0x30]
mov dword[edx+ecx*4], eax
cmp word[edi], 0
mov esi, dword[0x4c8624]
je 0x4334e1
mov ebx, 0x2c
lea ecx, [ecx]
movzx eax, word[edi]
cmp ax, bx
je 0x433453
mov word[esi], ax
add esi, 2
jmp 0x4334d4
cmp word[edi+2], bx
jne 0x433466
mov edx, ebx
mov word[esi], dx
add esi, 2
add edi, 2
jmp 0x4334d4
xor eax, eax
mov word[esi], ax
mov ecx, dword[0x4c8618]
mov eax, dword[0x4c861c]
mov edx, dword[ecx+eax*4]
cmp word[edx], 0
je 0x43349b
inc eax
mov dword[0x4c861c], eax
add esi, 2
mov dword[ecx+eax*4], esi
xor eax, eax
mov word[esi], ax
mov eax, dword[0x4c861c]
mov ecx, dword[0x4c8618]
cmp word[edi+2], 0
je 0x4334d4
mov edx, dword[0x4c8620]
cmp eax, edx
jb 0x4334d4
lea edx, [edx*4+0x1000]
push edx
push ecx
call fcn.0048e007
add esp, 8
test eax, eax
je 0x43362c
add dword[0x4c8620], 0x400
mov dword[0x4c8618], eax
add edi, 2
cmp word[edi], 0
jne 0x433440
xor eax, eax
mov word[esi], ax
mov ecx, dword[0x4c8618]
mov edx, dword[0x4c861c]
mov eax, dword[ecx+edx*4]
cmp word[eax], 0
je 0x433501
inc dword[0x4c861c]
cmp byte[0x4c660d], 0
je 0x43353f
mov ecx, dword[0x4c64b8]
push 0xc
push ecx
call dword[sym.imp.USER32.dll_KillTimer]
test eax, eax
je 0x433524
mov byte[0x4c660d], 0
push 0x10
call dword[sym.imp.USER32.dll_GetQueueStatus]
shr eax, 0x10
test al, 0x10
je 0x43353f
push 1
push 0xffffffffffffffff
call fcn.00401340
add esp, 8
xor edx, edx
push 0x7ffe
push edx
lea eax, [ebp-0x8532]
push eax
mov word[ebp-0x8534], dx
call fcn.00495c20
or byte[0x4c6ec6], 1
add esp, 0xc
cmp dword[0x4c65e8], 0
lea ecx, [ebp-0x8534]
lea edx, [ebp-0x334]
lea eax, [ebp-0x534]
mov dword[0x4c8634], ecx
mov dword[0x4c8638], 0
mov dword[0x4c8604], edx
mov dword[0x4c8608], eax
mov dword[0x4c8600], 1
mov byte[0x4c6608], 1
jne 0x4335bd
mov ecx, dword[0x4c3acc]
movzx edx, word[ecx]
push edx
call fcn.00408030
add esp, 4
mov eax, dword[ebp-0x28]
test eax, eax
jle 0x433600
cmp byte[0x4c660d], 0
jne 0x433600
cmp eax, 0xa
jge 0x4335d7
mov eax, 0xa
push 0x403830
push eax
mov eax, dword[0x4c64b8]
push 0xc
push eax
call dword[sym.imp.USER32.dll_SetTimer]
test eax, eax
setne cl
mov byte[0x4c660d], cl
jmp 0x433600
push 1
push 0x8000012f
call fcn.00401340
mov eax, dword[0x4c8600]
add esp, 8
cmp eax, 1
je 0x433600
add eax, 0xfffffffe
cmp eax, 3
ja case.default.0x433625
jmp dword[eax*4+0x433ed8]
mov ecx, dword[ebp+8]
push 0x4ab02c
push 0
push str.Out_of_memory.
call fcn.0042df10
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4
mov edx, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
push str.Timeout
push edx
call fcn.00476680
jmp 0x4339cc
mov eax, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
push str.Match
push eax
call fcn.00476680
jmp 0x4339cc
mov edx, dword[0x4a9a5c]
mov ecx, dword[str.EndKey:]
mov eax, dword[0x4a9a60]
push 0xf0
mov dword[ebp-0x130], edx
mov dword[ebp-0x134], ecx
mov ecx, dword[0x4a9a64]
lea edx, [ebp-0x124]
push 0
push edx
mov dword[ebp-0x12c], eax
mov dword[ebp-0x128], ecx
call fcn.00495c20
mov ax, word[0x4c8614]
add esp, 0xc
test ax, ax
je 0x4336eb
mov word[ebp-0x126], ax
xor eax, eax
mov word[ebp-0x124], ax
jmp 0x433825
cmp byte[0x4c8617], 0
je 0x43378a
push 0xff
lea ecx, [ebp-0x233]
push 0
push ecx
mov byte[ebp-0x234], 0
call fcn.00495c20
or byte[ebp-0x224], 0x80
add esp, 0xc
call dword[sym.imp.USER32.dll_GetForegroundWindow]
test eax, eax
je 0x433731
push 0
push eax
call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]
jmp 0x433733
xor eax, eax
push eax
call dword[sym.imp.USER32.dll_GetKeyboardLayout]
xor edx, edx
cmp dword[0x4c6648], edx
push eax
setne dl
lea eax, [ebp-0x126]
lea ecx, [ebp-0x234]
xor bl, bl
push edx
movzx edx, byte[0x4c8610]
push 2
push eax
push ecx
push edx
call fcn.00412700
movzx ecx, byte[0x4c8610]
movzx eax, ax
add esp, 4
push eax
push ecx
call dword[sym.imp.USER32.dll_ToUnicodeEx]
xor edx, edx
mov word[ebp+eax*2-0x126], dx
jmp 0x433825
cmp byte[0x4c8616], 0
je 0x4337ef
mov cx, word[0x4c8612]
xor eax, eax
lea esp, [esp]
cmp word[eax*8+0x4c3a64], cx
je 0x4337ce
inc eax
cmp eax, 0xd
jl 0x4337a0
movzx eax, cx
push eax
push str.sc_03X
mov esi, 0x79
lea edi, [ebp-0x126]
call fcn.004738d0
add esp, 8
jmp 0x43380a
mov eax, dword[eax*8+0x4c3a60]
push 0x78
push eax
lea ecx, [ebp-0x126]
push ecx
call fcn.0048fa44
add esp, 0xc
xor edx, edx
mov word[ebp-0x36], dx
jmp 0x43380a
mov bl, byte[0x4c8610]
push 1
mov eax, 0x79
lea ecx, [ebp-0x126]
call fcn.00412060
add esp, 4
mov ecx, dword[ebp-0x126]
add ecx, 0xffffff9f
cmp cx, 0x19
ja 0x433825
mov edx, 0xffe0
add word[ebp-0x126], dx
mov ecx, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
lea eax, [ebp-0x134]
push eax
push ecx
call fcn.00476680
jmp 0x4339cc
mov edx, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
push 0x4a9a68
push edx
call fcn.00476680
jmp 0x4339cc
mov ecx, dword[0x4c6cb4]
mov al, byte[ecx+0x17]
mov dword[ebp-0xc], ecx
test al, al
jne 0x433888
mov eax, dword[ecx+0xc]
push 1
push 0
push 0xffffffffffffffff
push str.NewInput
push eax
call fcn.00476680
jmp 0x4339cc
cmp dword[ecx+8], str.NewInput
lea edx, [ecx+8]
mov dword[ebp-0x14], edx
jne 0x43389e
mov edx, dword[ecx+0xc]
shr edx, 1
jmp 0x4338a3
mov edx, 8
lea esi, [edx+1]
mov dword[ebp-0x20], edx
lea ebx, [esi+esi]
cmp al, 2
jne 0x43390f
cmp dword[0x4c85f0], 0
mov ebx, edx
jne 0x4339cc
cmp edx, 0xffffffff
jne 0x4338cb
mov ebx, 8
jmp 0x4338cf
test edx, edx
je 0x433900
lea edi, [ebx+1]
mov esi, 0x4c85e4
call fcn.004041f0
test eax, eax
je 0x4339cc
mov eax, dword[0x4c85f0]
push ebx
push str.NewInput
push eax
mov esi, eax
call fcn.0048fa44
add esp, 0xc
xor ecx, ecx
mov word[esi+ebx*2], cx
mov ecx, 0x4c85e4
call fcn.00404270
jmp 0x4339cc
cmp ebx, dword[0x4c28bc]
jbe 0x433935
cmp ebx, dword[ecx+0x10]
jbe 0x433935
push 0x4ab02c
push 0x4bb9f0
mov ecx, 0x4c8640
call fcn.0042e1d0
jmp 0x4339cc
cmp esi, 2
jae 0x433948
push 4
xor al, al
call fcn.00476c30
jmp 0x4339cc
mov al, byte[ecx+0x15]
lea edi, [ecx+0x15]
test al, 2
je 0x433960
mov ecx, dword[ecx]
and al, 0x3d
mov byte[edi], al
mov edx, dword[ecx]
mov eax, dword[edx+8]
push ecx
call eax
mov esi, dword[ebp-0xc]
mov edx, dword[esi+0x10]
and byte[edi], 0x82
mov dword[ebp+8], edx
cmp ebx, edx
jbe 0x43399b
mov cl, byte[esi+0x14]
cmp cl, 1
jbe 0x433a46
cmp cl, 2
je 0x433a83
mov esi, dword[ebp+8]
mov eax, dword[ebp+8]
mov edx, dword[ebp-0xc]
mov ecx, dword[ebp-0x14]
and byte[edi], 0x7f
mov dword[edx+0x10], esi
mov dword[ecx], eax
mov esi, edx
mov edi, dword[ebp-0x14]
mov eax, dword[edi]
cmp eax, str.NewInput
je 0x4339bc
mov ecx, dword[ebp-0x20]
lea edx, [ecx+ecx]
push edx
push str.NewInput
push eax
call fcn.0048d7c0
add esp, 0xc
mov eax, dword[ebp-0x20]
mov ecx, dword[edi]
add eax, eax
xor edx, edx
mov word[eax+ecx], dx
mov dword[esi+0xc], eax
cmp byte[0x4c660d], 0
mov edi, dword[ebp-0x10]
mov dword[0x4c8600], 0
je 0x433a16
mov eax, dword[0x4c64b8]
push 0xc
push eax
call dword[sym.imp.USER32.dll_KillTimer]
test eax, eax
je 0x4339fb
mov byte[0x4c660d], 0
push 0x10
call dword[sym.imp.USER32.dll_GetQueueStatus]
shr eax, 0x10
test al, 0x10
je 0x433a16
push 1
push 0xffffffffffffffff
call fcn.00401340
add esp, 8
mov dl, byte[edi+0x17]
test dl, dl
jne 0x433b98
mov edx, dword[edi+0xc]
push 1
push 0
push 0xffffffffffffffff
lea ecx, [ebp-0x8534]
push ecx
push edx
call fcn.00476680
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4
cmp ebx, 0x80
ja 0x433a83
cmp ebx, 8
ja 0x433a5a
mov esi, 8
jmp 0x433a68
mov ecx, 0x10
cmp ecx, ebx
sbb esi, esi
and esi, 0x70
add esi, ecx
mov eax, esi
call fcn.00470d00
test eax, eax
je 0x4339cc
mov edx, dword[ebp-0xc]
mov byte[edx+0x14], 1
jmp 0x43398b
cmp ebx, 0x20
jae 0x433a92
mov esi, 0x20
jmp 0x433b0d
cmp ebx, 0x208
jae 0x433aa1
mov esi, 0x208
jmp 0x433b0d
cmp ebx, 0x50000
jae 0x433adc
mov dword[ebp+8], ebx
fild dword[ebp+8]
test ebx, ebx
jns 0x433ab9
fadd qword[0x4bd480]
fmul qword[0x4bd4b8]
fnstcw word[ebp+0xa]
movzx eax, word[ebp+0xa]
or eax, 0xc00
mov dword[ebp-0x28], eax
fldcw word[ebp-0x28]
fistp qword[ebp-0x2c]
mov esi, dword[ebp-0x2c]
fldcw word[ebp+0xa]
jmp 0x433b0d
cmp ebx, 0x320000
jae 0x433aec
lea esi, [ebx+0x8000]
jmp 0x433b0d
cmp ebx, 0xc80000
jae 0x433b07
mov eax, 0x51eb851f
mul ebx
mov esi, edx
mov edx, dword[ebp+8]
shr esi, 5
add esi, ebx
jmp 0x433b0d
lea esi, [ebx+0x20000]
mov eax, dword[0x4c28bc]
cmp esi, eax
jbe 0x433b18
mov esi, eax
cmp cl, 2
jne 0x433b4e
test edx, edx
je 0x433b4e
mov eax, dword[ebp-0x14]
mov ecx, dword[eax]
push ecx
mov bl, 1
call fcn.0048e3af
add esp, 4
test esi, esi
js 0x433b52
push esi
call fcn.0048cdd4
add esp, 4
test eax, eax
je 0x433b52
mov edx, dword[ebp-0xc]
mov byte[edx+0x14], 2
jmp 0x43398b
xor bl, bl
jmp 0x433b31
test bl, bl
je 0x433b6b
mov eax, dword[ebp-0xc]
mov ecx, dword[ebp-0x14]
mov dword[eax+0x10], 0
mov dword[ecx], 0x4c85b8
jmp 0x433b75
mov edx, dword[ebp-0x14]
mov eax, dword[edx]
xor ecx, ecx
mov word[eax], cx
mov edx, dword[ebp-0xc]
push 0x4ab02c
push str.Out_of_memory.
mov ecx, 0x4c8640
mov dword[edx+0xc], 0
call fcn.0042e1d0
jmp 0x4339cc
lea eax, [ebp-0x8534]
cmp dword[edi+8], eax
jne 0x433bad
mov esi, dword[edi+0xc]
shr esi, 1
mov dword[ebp-0x28], esi
jmp 0x433bca
lea eax, [ebp-0x8534]
lea esi, [eax+2]
mov cx, word[eax]
add eax, 2
test cx, cx
jne 0x433bb6
sub eax, esi
sar eax, 1
mov esi, eax
mov dword[ebp-0x28], eax
lea eax, [esi+1]
lea ebx, [eax+eax]
cmp dl, 2
jne 0x433c57
cmp dword[0x4c85f0], 0
mov ebx, esi
jne 0x433d57
cmp esi, 0xffffffff
jne 0x433c07
lea eax, [ebp-0x8534]
lea edx, [eax+2]
mov cx, word[eax]
add eax, 2
test cx, cx
jne 0x433bf6
sub eax, edx
sar eax, 1
mov ebx, eax
test ebx, ebx
je 0x433c3e
lea edi, [ebx+1]
mov esi, 0x4c85e4
call fcn.004041f0
test eax, eax
je 0x433d57
mov eax, dword[0x4c85f0]
push ebx
lea ecx, [ebp-0x8534]
push ecx
push eax
mov esi, eax
call fcn.0048fa44
add esp, 0xc
xor edx, edx
mov word[esi+ebx*2], dx
mov ecx, 0x4c85e4
call fcn.00404270
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4
cmp ebx, dword[0x4c28bc]
jbe 0x433c87
cmp ebx, dword[edi+0x10]
jbe 0x433c87
push 0x4ab02c
push 0x4bb9f0
mov ecx, 0x4c8640
call fcn.0042e1d0
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4
cmp eax, 2
jae 0x433cab
push 4
xor al, al
mov ecx, edi
call fcn.00476c30
mov eax, 1
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4
mov al, byte[edi+0x15]
test al, 2
je 0x433cc1
and al, 0x3d
mov byte[edi+0x15], al
mov eax, dword[edi]
mov ecx, dword[eax]
mov edx, dword[ecx+8]
push eax
call edx
and byte[edi+0x15], 0x82
cmp ebx, dword[edi+0x10]
jbe 0x433cee
mov cl, byte[edi+0x14]
cmp cl, 1
jbe 0x433d2a
cmp cl, 2
je 0x433d71
mov esi, dword[ebp+8]
mov eax, dword[ebp+8]
and byte[edi+0x15], 0x7f
mov dword[edi+0x10], esi
mov esi, dword[ebp-0x28]
mov dword[edi+8], eax
mov eax, dword[edi+8]
lea ecx, [ebp-0x8534]
cmp eax, ecx
je 0x433d09
lea edx, [esi+esi]
push edx
push ecx
push eax
call fcn.0048d7c0
add esp, 0xc
mov edx, dword[edi+8]
lea eax, [esi+esi]
xor ecx, ecx
mov word[eax+edx], cx
mov dword[edi+0xc], eax
lea eax, [ecx+1]
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4
cmp ebx, 0x80
ja 0x433d71
cmp ebx, 8
ja 0x433d3e
mov esi, 8
jmp 0x433d4c
mov eax, 0x10
cmp eax, ebx
sbb esi, esi
and esi, 0x70
add esi, eax
mov eax, esi
call fcn.00470d00
test eax, eax
jne 0x433d68
xor eax, eax
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4
mov byte[edi+0x14], 1
jmp 0x433ce1
cmp ebx, 0x20
jae 0x433d80
mov esi, 0x20
jmp 0x433df8
cmp ebx, 0x208
jae 0x433d8f
mov esi, 0x208
jmp 0x433df8
cmp ebx, 0x50000
jae 0x433dca
mov dword[ebp+8], ebx
fild dword[ebp+8]
test ebx, ebx
jns 0x433da7
fadd qword[0x4bd480]
fmul qword[0x4bd4b8]
fnstcw word[ebp+0xa]
movzx eax, word[ebp+0xa]
or eax, 0xc00
mov dword[ebp-0x30], eax
fldcw word[ebp-0x30]
fistp qword[ebp-0x34]
mov esi, dword[ebp-0x34]
fldcw word[ebp+0xa]
jmp 0x433df8
cmp ebx, 0x320000
jae 0x433dda
lea esi, [ebx+0x8000]
jmp 0x433df8
cmp ebx, 0xc80000
jae 0x433df2
mov eax, 0x51eb851f
mul ebx
mov esi, edx
shr esi, 5
add esi, ebx
jmp 0x433df8
lea esi, [ebx+0x20000]
mov eax, dword[0x4c28bc]
cmp esi, eax
jbe 0x433e03
mov esi, eax
cmp cl, 2
jne 0x433e36
cmp dword[edi+0x10], 0
je 0x433e36
mov ecx, dword[edi+8]
push ecx
mov bl, 1
call fcn.0048e3af
add esp, 4
test esi, esi
js 0x433e3a
push esi
call fcn.0048cdd4
add esp, 4
test eax, eax
je 0x433e3a
mov byte[edi+0x14], 2
jmp 0x433ce1
xor bl, bl
jmp 0x433e1c
test bl, bl
je 0x433e4e
mov dword[edi+0x10], 0
mov dword[edi+8], 0x4c85b8
jmp 0x433e56
mov edx, dword[edi+8]
xor eax, eax
mov word[edx], ax
push 0x4ab02c
push str.Out_of_memory.
mov ecx, 0x4c8640
mov dword[edi+0xc], 0
call fcn.0042e1d0
lea esp, [ebp-0x8544]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 4

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f