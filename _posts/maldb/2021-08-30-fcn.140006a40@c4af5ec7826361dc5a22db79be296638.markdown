---
layout: post
title:  "fcn.140006a40 @ c4af5ec7826361dc5a22db79be296638"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.140006a40
- **Origin (md5):** c4af5ec7826361dc5a22db79be296638
- **VirusTotal:** [virustotal.com/gui/file/c4af5ec7826361dc5a22db79be296638][virustotal_ref]

# Code Tags
<span class="tag" id="MEMORY">MEMORY</span>


# Behaviour Tags
<span class="bhv-tag" id="na">N/A</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.140006a40@c4af5ec7826361dc5a22db79be296638">fcn.140006a40</a><br>@c4af5ec7826361dc5a22db79be296638</b><br>mov dword[rsp+0x20], r9d<br>mov dword[rsp+0x18], r8d<br>push rbx<br>push rbp<br>push rsi<br>push rdi<br>push r12<br>push r14<br>push r15<br>sub rsp, 0x30<br>xor eax, eax<br>or r15, 0xffffffffffffffff<br>mov rsi, rdx<br>mov rbx, rcx<br>test rcx, rcx<br>je 0x140006a7b<br>mov rbp, r15<br>nop dword[rax]<br>inc rbp<br>cmp word[rcx+rbp*2], ax<br>jne 0x140006a70<br>jmp 0x140006a7d<br>mov ebp, eax<br>call fcn.140011240<br>mov rcx, rsi<br>mov edi, eax<br>call fcn.140011240<br>mov edx, dword[rsp+0x98]<br>mov ecx, ebp<br>mov r12d, eax<br>mov dword[rsp+0x70], eax<br>call fcn.1400112e0<br>mov r14, rax<br>test edi, edi<br>je 0x140006ab2<br>mov ecx, edi<br>call fcn.140011400<br>mov rbx, rax<br>test r12d, r12d<br>je 0x140006ac2<br>mov ecx, r12d<br>call fcn.140011400<br>mov rsi, rax<br>mov qword[rsp+0x78], r13<br>mov qword[rsp+0x28], r14<br>test rbx, rbx<br>je 0x140006c48<br>cmp word[rbx], 0<br>je 0x140006c48<br>test rsi, rsi<br>je 0x140006c25<br>cmp word[rsi], 0<br>je 0x140006c25<br>mov qword[rsp+0x20], rbx<br>nop word[rax+rax]<br>inc r15<br>cmp word[rsi+r15*2], 0<br>jne 0x140006b00<br>test r12d, r12d<br>je 0x140006b56<br>mov rcx, qword[0x14001e444]<br>lea eax, [r15+1]<br>xor edx, edx<br>movsxd r8, eax<br>add r8, r8<br>call qword[sym.imp.KERNEL32.dll_HeapAlloc]<br>mov rdx, rax<br>mov r13, rax<br>sub rdx, rsi<br>nop dword[rax]<br>nop word[rax+rax]<br>movzx ecx, word[rsi]<br>lea rsi, [rsi+2]<br>mov word[rdx+rsi-2], cx<br>test cx, cx<br>jne 0x140006b40<br>mov rsi, rax<br>jmp 0x140006b5b<br>mov r13, qword[rsp+0x70]<br>test byte[rsp+0x80], 1<br>lea rax, [0x1400060b4]<br>lea r12, [sub.msvcrt.dll_wcsncmp]<br>cmovne r12, rax<br>mov eax, dword[rsp+0x88]<br>cmp eax, 1<br>jle 0x140006b9c<br>dec eax<br>mov rdx, rbx<br>mov rcx, r14<br>movsxd rdi, eax<br>mov r8, rdi<br>call sub.msvcrt.dll_wcsncpy<br>lea r14, [r14+rdi*2]<br>lea rbx, [rbx+rdi*2]<br>cmp word[rbx], 0<br>je 0x140006bf2<br>mov edi, dword[rsp+0x90]<br>movsxd r15, r15d<br>nop dword[rax]<br>mov r8, r15<br>mov rdx, rsi<br>mov rcx, rbx<br>call r12<br>test eax, eax<br>jne 0x140006c0d<br>lea rbx, [rbx+r15*2]<br>cmp edi, 0xffffffff<br>je 0x140006c1d<br>dec edi<br>test edi, edi<br>jg 0x140006c1d<br>mov rax, rbx<br>movsxd rdi, ebp<br>mov rdx, rbx<br>sub rax, qword[rsp+0x20]<br>mov rcx, r14<br>sar rax, 1<br>sub rdi, rax<br>mov r8, rdi<br>call sub.msvcrt.dll_wcsncpy<br>lea r14, [r14+rdi*2]<br>cmp dword[rsp+0x70], 0<br>je 0x140006c48<br>mov rcx, qword[0x14001e444]<br>mov r8, r13<br>xor edx, edx<br>call qword[sym.imp.KERNEL32.dll_HeapFree]<br>jmp 0x140006c48<br>movzx eax, word[rbx]<br>add r14, 2<br>add rbx, 2<br>mov word[r14-2], ax<br>cmp word[rbx], 0<br>jne 0x140006bb0<br>jmp 0x140006bf2<br>mov rcx, r14<br>sub rcx, rbx<br>nop dword[rax+rax]<br>movzx eax, word[rbx]<br>lea rbx, [rbx+2]<br>mov word[rcx+rbx-2], ax<br>test ax, ax<br>jne 0x140006c30<br>movsxd rax, ebp<br>lea r14, [r14+rax*2]<br>mov rax, r14<br>sub rax, qword[rsp+0x28]<br>sar rax, 1<br>sub ebp, eax<br>mov ecx, ebp<br>call fcn.1400114b0<br>mov r13, qword[rsp+0x78]<br>xor eax, eax<br>mov word[r14], ax<br>add rsp, 0x30<br>pop r15<br>pop r14<br>pop r12<br>pop rdi<br>pop rsi<br>pop rbp<br>pop rbx<br>ret <br><eoc> ', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

mov dword[rsp+0x20], r9d
mov dword[rsp+0x18], r8d
push rbx
push rbp
push rsi
push rdi
push r12
push r14
push r15
sub rsp, 0x30
xor eax, eax
or r15, 0xffffffffffffffff
mov rsi, rdx
mov rbx, rcx
test rcx, rcx
je 0x140006a7b
mov rbp, r15
nop dword[rax]
inc rbp
cmp word[rcx+rbp*2], ax
jne 0x140006a70
jmp 0x140006a7d
mov ebp, eax
call fcn.140011240
mov rcx, rsi
mov edi, eax
call fcn.140011240
mov edx, dword[rsp+0x98]
mov ecx, ebp
mov r12d, eax
mov dword[rsp+0x70], eax
call fcn.1400112e0
mov r14, rax
test edi, edi
je 0x140006ab2
mov ecx, edi
call fcn.140011400
mov rbx, rax
test r12d, r12d
je 0x140006ac2
mov ecx, r12d
call fcn.140011400
mov rsi, rax
mov qword[rsp+0x78], r13
mov qword[rsp+0x28], r14
test rbx, rbx
je 0x140006c48
cmp word[rbx], 0
je 0x140006c48
test rsi, rsi
je 0x140006c25
cmp word[rsi], 0
je 0x140006c25
mov qword[rsp+0x20], rbx
nop word[rax+rax]
inc r15
cmp word[rsi+r15*2], 0
jne 0x140006b00
test r12d, r12d
je 0x140006b56
mov rcx, qword[0x14001e444]
lea eax, [r15+1]
xor edx, edx
movsxd r8, eax
add r8, r8
call qword[sym.imp.KERNEL32.dll_HeapAlloc]
mov rdx, rax
mov r13, rax
sub rdx, rsi
nop dword[rax]
nop word[rax+rax]
movzx ecx, word[rsi]
lea rsi, [rsi+2]
mov word[rdx+rsi-2], cx
test cx, cx
jne 0x140006b40
mov rsi, rax
jmp 0x140006b5b
mov r13, qword[rsp+0x70]
test byte[rsp+0x80], 1
lea rax, [0x1400060b4]
lea r12, [sub.msvcrt.dll_wcsncmp]
cmovne r12, rax
mov eax, dword[rsp+0x88]
cmp eax, 1
jle 0x140006b9c
dec eax
mov rdx, rbx
mov rcx, r14
movsxd rdi, eax
mov r8, rdi
call sub.msvcrt.dll_wcsncpy
lea r14, [r14+rdi*2]
lea rbx, [rbx+rdi*2]
cmp word[rbx], 0
je 0x140006bf2
mov edi, dword[rsp+0x90]
movsxd r15, r15d
nop dword[rax]
mov r8, r15
mov rdx, rsi
mov rcx, rbx
call r12
test eax, eax
jne 0x140006c0d
lea rbx, [rbx+r15*2]
cmp edi, 0xffffffff
je 0x140006c1d
dec edi
test edi, edi
jg 0x140006c1d
mov rax, rbx
movsxd rdi, ebp
mov rdx, rbx
sub rax, qword[rsp+0x20]
mov rcx, r14
sar rax, 1
sub rdi, rax
mov r8, rdi
call sub.msvcrt.dll_wcsncpy
lea r14, [r14+rdi*2]
cmp dword[rsp+0x70], 0
je 0x140006c48
mov rcx, qword[0x14001e444]
mov r8, r13
xor edx, edx
call qword[sym.imp.KERNEL32.dll_HeapFree]
jmp 0x140006c48
movzx eax, word[rbx]
add r14, 2
add rbx, 2
mov word[r14-2], ax
cmp word[rbx], 0
jne 0x140006bb0
jmp 0x140006bf2
mov rcx, r14
sub rcx, rbx
nop dword[rax+rax]
movzx eax, word[rbx]
lea rbx, [rbx+2]
mov word[rcx+rbx-2], ax
test ax, ax
jne 0x140006c30
movsxd rax, ebp
lea r14, [r14+rax*2]
mov rax, r14
sub rax, qword[rsp+0x28]
sar rax, 1
sub ebp, eax
mov ecx, ebp
call fcn.1400114b0
mov r13, qword[rsp+0x78]
xor eax, eax
mov word[r14], ax
add rsp, 0x30
pop r15
pop r14
pop r12
pop rdi
pop rsi
pop rbp
pop rbx
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/c4af5ec7826361dc5a22db79be296638