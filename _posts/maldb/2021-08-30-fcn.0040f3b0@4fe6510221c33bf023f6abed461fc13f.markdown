---
layout: post
title:  "fcn.0040f3b0 @ 4fe6510221c33bf023f6abed461fc13f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0040f3b0
- **Origin (md5):** 4fe6510221c33bf023f6abed461fc13f
- **VirusTotal:** [virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f][virustotal_ref]

# Code Tags
<span class="tag" id="PROCESS">PROCESS</span>
<span class="tag" id="SCREEN">SCREEN</span>
<span class="tag" id="THREAD">THREAD</span>
<span class="tag" id="LINKING">LINKING</span>


# Behaviour Tags
<span class="bhv-tag" id="SCREENSHOTS_FOREGROUND_WINDOW">SCREENSHOTS_FOREGROUND_WINDOW / 0.19860365578332217</span><span class="bhv-tag" id="CREATES_SOCKET_LISTENER">CREATES_SOCKET_LISTENER / 0.20038857495960222</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [20.694665908813477, -258.96441650390625, '<b><a href="/report/fcn.0040f3b0@4fe6510221c33bf023f6abed461fc13f">fcn.0040f3b0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>push ebp<br>mov ebp, esp<br>and esp, 0xfffffff8<br>movzx eax, byte[ebp+0xc]<br>sub esp, 0x11c<br>push ebx<br>mov ebx, dword[ebp+0x10]<br>or ax, bx<br>push esi<br>push edi<br>je 0x40f9c7<br>cmp dword[ebp+0x1c], 0<br>jne 0x40f3dc<br>mov dword[ebp+0x1c], 0xffc3d44d<br>call dword[sym.imp.KERNEL32.dll_GetCurrentThreadId]<br>cmp eax, dword[0x4c53a0]<br>mov eax, dword[0x4c7f18]<br>sete byte[esp+0x11]<br>test eax, eax<br>je 0x40f402<br>cmp byte[esp+0x11], 0<br>mov byte[esp+0x12], 1<br>je 0x40f407<br>mov byte[esp+0x12], 0<br>cmp eax, 1<br>je 0x40f413<br>cmp byte[esp+0x11], 0<br>je 0x40f417<br>mov byte[ebp+0x18], 0<br>cmp byte[ebp+0xc], 0<br>jne 0x40f429<br>mov ecx, ebx<br>call fcn.00412980<br>mov byte[ebp+0xc], al<br>jmp 0x40f442<br>test bx, bx<br>jne 0x40f442<br>mov ecx, dword[ebp+0xc]<br>push ecx<br>xor bl, bl<br>call fcn.00412700<br>movzx ebx, ax<br>add esp, 4<br>mov dword[ebp+0x10], ebx<br>mov edx, ebx<br>xor eax, eax<br>shr edx, 8<br>test dl, dl<br>setne al<br>cmp dword[0x4c7f18], 2<br>mov dword[esp+0x1c], eax<br>jne case.default.0x40f469<br>movzx eax, byte[ebp+0xc]<br>add eax, 0xffffff60<br>cmp eax, 5<br>ja case.default.0x40f469<br>jmp dword[eax*4+0x40f9d0]<br>mov byte[ebp+0xc], 0x11<br>jmp case.default.0x40f469<br>mov byte[ebp+0xc], 0x10<br>jmp case.default.0x40f469<br>mov byte[ebp+0xc], 0x12<br>cmp dword[ebp+0x14], 0<br>mov al, byte[ebp+0xc]<br>je 0x40f5b5<br>xor ecx, ecx<br>mov edx, ebx<br>call fcn.00411b10<br>mov ebx, dword[ebp+8]<br>test al, al<br>je 0x40f54b<br>lea ecx, [esp+0x28]<br>push ecx<br>call dword[sym.imp.USER32.dll_GetKeyboardState]<br>mov cl, 0x80<br>mov dl, 0x7f<br>test ebx, ebx<br>jne 0x40f4c2<br>movzx eax, byte[ebp+0xc]<br>or byte[esp+eax+0x28], cl<br>lea eax, [esp+eax+0x28]<br>jmp 0x40f4d3<br>cmp ebx, 1<br>jne 0x40f4d3<br>movzx eax, byte[ebp+0xc]<br>and byte[esp+eax+0x28], dl<br>lea eax, [esp+eax+0x28]<br>movzx eax, byte[ebp+0xc]<br>add eax, 0xffffff60<br>cmp eax, 5<br>ja case.default.0x40f4e1<br>jmp dword[eax*4+0x40f9e8]<br>test byte[esp+0xca], cl<br>jne 0x40f500<br>test byte[esp+0xcb], cl<br>jne 0x40f500<br>and byte[esp+0x39], dl<br>jmp case.default.0x40f4e1<br>or byte[esp+0x39], cl<br>jmp case.default.0x40f4e1<br>test byte[esp+0xc8], cl<br>jne 0x40f51e<br>test byte[esp+0xc9], cl<br>jne 0x40f51e<br>and byte[esp+0x38], dl<br>jmp case.default.0x40f4e1<br>or byte[esp+0x38], cl<br>jmp case.default.0x40f4e1<br>test byte[esp+0xcc], cl<br>jne 0x40f53c<br>test byte[esp+0xcd], cl<br>jne 0x40f53c<br>and byte[esp+0x3a], dl<br>jmp case.default.0x40f4e1<br>or byte[esp+0x3a], cl<br>lea edx, [esp+0x28]<br>push edx<br>call dword[sym.imp.USER32.dll_SetKeyboardState]<br>movzx esi, word[ebp+0x10]<br>mov edi, dword[sym.imp.USER32.dll_PostMessageW]<br>shl esi, 0x10<br>cmp ebx, 1<br>je 0x40f573<br>movzx ecx, byte[ebp+0xc]<br>mov edx, dword[ebp+0x14]<br>mov eax, esi<br>or eax, 1<br>push eax<br>push ecx<br>push 0x100<br>push edx<br>call edi<br>cmp byte[ebp+0x18], 0<br>je 0x40f591<br>cmp ebx, 2<br>jne 0x40f591<br>mov eax, dword[0x4c28ec]<br>mov ecx, dword[eax+0x64]<br>push ecx<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40f599<br>test ebx, ebx<br>je 0x40f98e<br>movzx edx, byte[ebp+0xc]<br>mov eax, dword[ebp+0x14]<br>or esi, 0xc0000001<br>push esi<br>push edx<br>push 0x101<br>push eax<br>call edi<br>jmp 0x40f98e<br>cmp byte[0x4c6ec4], 0<br>mov ecx, dword[ebp+8]<br>mov dword[0x4c53f8], ecx<br>mov byte[0x4c6eff], al<br>je 0x40f612<br>cmp al, 0x12<br>je 0x40f5d8<br>cmp al, 0xa4<br>je 0x40f5d8<br>cmp al, 0xa5<br>jne 0x40f612<br>cmp byte[esp+0x11], 0<br>jne 0x40f612<br>test byte[0x4c9b80], 1<br>mov byte[esp+0x16], 1<br>jne 0x40f643<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>jmp 0x40f648<br>cmp byte[esp+0x11], 0<br>mov byte[esp+0x16], 0<br>lea esi, [esp+0x24]<br>jne 0x40f627<br>mov esi, 0x4c53f0<br>mov dword[esp+0x18], esi<br>cmp al, 0xa5<br>jne 0x40f65c<br>cmp byte[esp+0x12], 0<br>jne 0x40f65c<br>cmp dword[0x4c65e8], 0<br>je 0x40f65c<br>mov al, 1<br>jmp 0x40f65e<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x40f650<br>push 0<br>call eax<br>mov al, byte[ebp+0xc]<br>mov byte[0x4c6ec4], 0<br>jmp 0x40f622<br>xor al, al<br>mov byte[esp+0x14], al<br>mov byte[esp+0x13], al<br>test al, al<br>je 0x40f6d6<br>cmp byte[esp+0x11], 0<br>jne 0x40f679<br>mov edi, dword[0x4c53f4]<br>jmp 0x40f6a6<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>test eax, eax<br>je 0x40f68e<br>push 0<br>push eax<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>jmp 0x40f690<br>xor eax, eax<br>push eax<br>call dword[sym.imp.USER32.dll_GetKeyboardLayout]<br>mov edi, eax<br>push edi<br>xor eax, eax<br>call fcn.00411f10<br>add esp, 4<br>mov dword[esi], eax<br>cmp dword[esi], 0<br>je 0x40f6b2<br>mov byte[esp+0x13], 0<br>jmp 0x40f6da<br>push 0xa2<br>mov byte[esp+0x19], 0xa2<br>call dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>mov edx, dword[ebp+0x1c]<br>mov dword[0x4c65dc], edx<br>shr eax, 0xf<br>and al, 1<br>mov byte[esp+0x17], al<br>jmp 0x40f6da<br>mov edi, dword[esp+0x24]<br>cmp byte[esp+0x12], 0<br>je 0x40f6f3<br>mov al, byte[ebp+0xc]<br>xor ecx, ecx<br>mov edx, ebx<br>call fcn.00411b10<br>mov byte[esp+0x20], al<br>jmp 0x40f6f8<br>mov byte[esp+0x20], 0<br>cmp byte[esp+0x11], 0<br>jne 0x40f71e<br>mov eax, dword[0x4c7f18]<br>cmp eax, 2<br>je 0x40f71e<br>cmp dword[0x4c65e8], 0<br>je 0x40f717<br>cmp eax, 1<br>jne 0x40f71e<br>mov byte[esp+0x11], 1<br>jmp 0x40f723<br>mov byte[esp+0x11], 0<br>cmp dword[ebp+8], 1<br>mov esi, dword[sym.imp.USER32.dll_keybd_event]<br>mov ebx, dword[esp+0x20]<br>je 0x40f812<br>cmp byte[esp+0x12], 0<br>je 0x40f75d<br>mov eax, dword[ebp+0x1c]<br>mov ecx, dword[esp+0x1c]<br>mov edx, dword[ebp+0x10]<br>push eax<br>mov eax, dword[ebp+0xc]<br>push ecx<br>push edx<br>push eax<br>push ebx<br>call fcn.00410920<br>add esp, 0x14<br>jmp 0x40f7f9<br>cmp byte[esp+0x14], 0<br>je 0x40f776<br>mov ecx, dword[esp+0x18]<br>cmp dword[ecx], 3<br>jne 0x40f776<br>mov edx, dword[ebp+0x1c]<br>mov dword[0x4c65e0], edx<br>mov eax, dword[ebp+0x1c]<br>mov ecx, dword[esp+0x1c]<br>mov edx, dword[ebp+0x10]<br>push eax<br>mov eax, dword[ebp+0xc]<br>push ecx<br>push edx<br>push eax<br>call esi<br>cmp byte[esp+0x13], 0<br>mov dword[0x4c65e0], 0<br>je 0x40f7f9<br>cmp dword[0x4c65dc], 0<br>mov byte[esp+0x13], 0<br>je 0x40f7c5<br>push edi<br>mov eax, 4<br>mov dword[0x4c65dc], 0<br>call fcn.00411f10<br>mov ecx, dword[esp+0x1c]<br>mov dword[ecx], eax<br>jmp 0x40f7f6<br>cmp byte[esp+0x17], 0<br>jne 0x40f7f9<br>movzx edx, byte[esp+0x15]<br>push edx<br>call dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>mov ecx, 0x8000<br>and ax, cx<br>movzx eax, ax<br>neg eax<br>sbb eax, eax<br>add eax, 4<br>push edi<br>call fcn.00411f10<br>mov edx, dword[esp+0x1c]<br>mov dword[edx], eax<br>add esp, 4<br>cmp byte[esp+0x11], 0<br>je 0x40f812<br>mov eax, dword[ebp+0x10]<br>mov ecx, dword[ebp+0xc]<br>push eax<br>push ecx<br>xor dl, dl<br>call fcn.00411010<br>add esp, 8<br>cmp byte[ebp+0x18], 0<br>je 0x40f851<br>mov eax, 2<br>cmp dword[ebp+8], eax<br>jne 0x40f851<br>cmp dword[0x4c7f18], eax<br>jne 0x40f83e<br>mov edx, dword[0x4c28ec]<br>mov eax, dword[edx+0x68]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40f85b<br>mov eax, dword[0x4c28ec]<br>mov eax, dword[eax+0x64]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40f85b<br>cmp dword[ebp+8], 0<br>je 0x40f945<br>or dword[esp+0x1c], 2<br>cmp byte[esp+0x12], 0<br>je 0x40f889<br>mov ecx, dword[ebp+0x1c]<br>mov edx, dword[esp+0x1c]<br>mov eax, dword[ebp+0x10]<br>push ecx<br>mov ecx, dword[ebp+0xc]<br>push edx<br>push eax<br>push ecx<br>push ebx<br>call fcn.00410920<br>mov ebx, dword[ebp+0x10]<br>add esp, 0x14<br>jmp 0x40f915<br>cmp byte[esp+0x14], 0<br>je 0x40f8a1<br>mov edx, dword[esp+0x18]<br>cmp dword[edx], 3<br>jne 0x40f8a1<br>mov eax, dword[ebp+0x1c]<br>mov dword[0x4c65e4], eax<br>mov ecx, dword[ebp+0x1c]<br>mov edx, dword[esp+0x1c]<br>mov ebx, dword[ebp+0x10]<br>mov eax, dword[ebp+0xc]<br>push ecx<br>push edx<br>push ebx<br>push eax<br>call esi<br>xor eax, eax<br>mov dword[0x4c65e4], eax<br>cmp byte[esp+0x13], al<br>je 0x40f915<br>cmp dword[0x4c65dc], eax<br>je 0x40f8e1<br>mov dword[0x4c65dc], eax<br>push edi<br>mov eax, 4<br>call fcn.00411f10<br>mov ecx, dword[esp+0x1c]<br>mov dword[ecx], eax<br>jmp 0x40f912<br>cmp byte[esp+0x17], al<br>je 0x40f915<br>movzx edx, byte[esp+0x15]<br>push edx<br>call dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>mov ecx, 0x8000<br>test cx, ax<br>mov eax, 0<br>setne al<br>push edi<br>add eax, 3<br>call fcn.00411f10<br>mov edx, dword[esp+0x1c]<br>mov dword[edx], eax<br>add esp, 4<br>mov eax, dword[esp+0x18]<br>cmp dword[eax], 0<br>je 0x40f92f<br>mov ecx, 0x138<br>cmp bx, cx<br>jne 0x40f92f<br>and byte[0x4c53d7], 0xfe<br>cmp byte[esp+0x11], 0<br>je 0x40f945<br>mov edx, dword[ebp+0xc]<br>push ebx<br>push edx<br>mov dl, 1<br>call fcn.00411010<br>add esp, 8<br>cmp byte[esp+0x16], 0<br>je 0x40f98e<br>test byte[0x4c9b80], 1<br>jne 0x40f97a<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>jmp 0x40f97f<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x40f987<br>push 1<br>call eax<br>mov byte[0x4c6ec4], 1<br>cmp byte[ebp+0x18], 0<br>je 0x40f9c7<br>cmp dword[0x4c7f18], 2<br>jne 0x40f9b5<br>mov eax, dword[0x4c28ec]<br>mov eax, dword[eax+0x60]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret <br>mov ecx, dword[0x4c28ec]<br>mov eax, dword[ecx+0x5c]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret <br><eoc> ', 'point { fill-color: #e0440e; }'],
[14.762373924255371, 248.3730010986328, '<b><a href="/report/fcn.0040fee0@4fe6510221c33bf023f6abed461fc13f">fcn.0040fee0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>mov eax, dword[0x4c28ec]<br>mov eax, dword[eax+0xd0]<br>sub esp, 0x124<br>push ebx<br>mov ebx, dword[esp+0x134]<br>push ebp<br>mov ebp, dword[esp+0x13c]<br>push esi<br>mov esi, dword[esp+0x154]<br>mov dword[0x4c7f18], eax<br>cmp eax, 1<br>je 0x40ff18<br>cmp eax, 3<br>jne 0x40ff48<br>cmp dword[0x4c92dc], 0<br>je 0x40ff3b<br>call fcn.00408e80<br>test al, al<br>jne 0x40ff36<br>mov eax, 1<br>mov dword[0x4c7f18], eax<br>jmp 0x40ff4c<br>mov eax, dword[0x4c7f18]<br>dec eax<br>neg eax<br>sbb eax, eax<br>and eax, 2<br>mov dword[0x4c7f18], eax<br>test eax, eax<br>je 0x40ff97<br>lea ecx, [esp+0x18]<br>mov dword[0x4c53ec], ecx<br>mov ecx, 0x80000000<br>mov dword[0x4c53e4], 0xa<br>mov byte[0x4c53d7], 0<br>mov dword[0x4c53d8], ecx<br>mov dword[0x4c53dc], ecx<br>mov byte[0x4c53d6], 0<br>mov dword[0x4c53e8], 0<br>mov byte[0x4c53d5], 0<br>mov byte[0x4c53d4], 1<br>mov ecx, dword[0x4c29c8]<br>mov dl, byte[0x4c6ec4]<br>mov byte[esp+0x13], dl<br>cmp ecx, 9<br>je 0x40ffb5<br>cmp ecx, 0xa<br>jne 0x410045<br>test eax, eax<br>jne 0x410045<br>test byte[0x4c9b80], 1<br>mov byte[esp+0x12], 1<br>jne 0x40fff3<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>mov eax, dword[0x4c7f18]<br>mov ecx, dword[0x4c9b7c]<br>test ecx, ecx<br>je 0x410006<br>push 1<br>call ecx<br>mov eax, dword[0x4c7f18]<br>mov byte[0x4c6ec4], 1<br>movzx ecx, byte[esp+0x134]<br>sub ecx, 0x56<br>je 0x410072<br>dec ecx<br>je 0x41004c<br>dec ecx<br>jne 0x410094<br>mov eax, dword[esp+0x148]<br>mov ecx, dword[esp+0x144]<br>push esi<br>push edi<br>push eax<br>mov al, byte[esp+0x144]<br>push ecx<br>push ebp<br>push ebx<br>call fcn.00410160<br>add esp, 0x18<br>jmp 0x41008f<br>mov byte[esp+0x12], 0<br>jmp 0x41000d<br>mov edx, dword[esp+0x150]<br>mov eax, dword[esp+0x14c]<br>push esi<br>push edx<br>push eax<br>mov al, byte[esp+0x144]<br>push ebp<br>push ebx<br>mov ecx, edi<br>call fcn.004102e0<br>add esp, 0x14<br>jmp 0x41008f<br>push esi<br>lea ecx, [esp+0x144]<br>push edi<br>push ecx<br>lea ecx, [esp+0x20]<br>lea eax, [esp+0x148]<br>call fcn.004106d0<br>add esp, 0xc<br>mov eax, dword[0x4c7f18]<br>test eax, eax<br>je 0x410102<br>cmp byte[0x4c53d5], 0<br>mov dword[esp+0x14], 0xffffffff<br>jne 0x4100c6<br>cmp dword[0x4c53e8], 0<br>jbe 0x4100c6<br>lea edx, [esp+0x14]<br>push 0<br>push edx<br>call fcn.00410cf0<br>mov eax, dword[0x4c7f18]<br>add esp, 8<br>dec eax<br>neg eax<br>sbb eax, eax<br>and eax, 0x3e8<br>add eax, 0x1f4<br>cmp dword[0x4c53e4], eax<br>jbe 0x4100eb<br>mov eax, dword[0x4c53ec]<br>push eax<br>call fcn.0048e3af<br>add esp, 4<br>mov ecx, dword[esp+0x14]<br>push ecx<br>mov dword[0x4c7f18], 0<br>call fcn.00410e40<br>add esp, 4<br>cmp byte[esp+0x12], 0<br>je 0x410152<br>cmp byte[esp+0x13], 0<br>jne 0x410152<br>test byte[0x4c9b80], 1<br>jne 0x41013e<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>jmp 0x410143<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x41014b<br>push 0<br>call eax<br>mov byte[0x4c6ec4], 0<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0x124<br>ret <br><eoc> ', 'null'],
[-235.9376220703125, -8.261780738830566, '<b><a href="/report/fcn.0040d900@4fe6510221c33bf023f6abed461fc13f">fcn.0040d900</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>push ebp<br>mov ebp, esp<br>sub esp, 0x94<br>push ebx<br>push esi<br>push edi<br>mov edi, dword[ebp+8]<br>cmp word[edi], 0<br>je 0x40ea6c<br>mov bl, byte[ebp+0xc]<br>mov esi, dword[0x4c28ec]<br>mov dword[ebp-0x38], esi<br>test bl, bl<br>jne 0x40d99c<br>push 7<br>push str.Blind<br>push edi<br>call fcn.0048d597<br>add esp, 0xc<br>test eax, eax<br>jne 0x40d99c<br>add edi, 0xe<br>mov byte[0x4c53cf], 1<br>mov dword[ebp+8], edi<br>mov edi, dword[ebp+0x10]<br>mov eax, dword[esi+0x5c]<br>mov ecx, dword[esi+0x64]<br>mov dword[ebp-0x5c], eax<br>mov dword[ebp-0x58], ecx<br>cmp edi, 1<br>je 0x40d963<br>cmp edi, 3<br>jne 0x40d9cf<br>cmp dword[0x4c92dc], 0<br>je 0x40d9a5<br>call fcn.00408e20<br>test al, al<br>jne 0x40d9a5<br>test bl, bl<br>jne 0x40d993<br>call fcn.00408e80<br>test al, al<br>je 0x40d993<br>mov ecx, dword[ebp+8]<br>mov eax, str.Click<br>call fcn.00473c80<br>test eax, eax<br>jne 0x40d9a5<br>mov dword[ebp+0x10], 1<br>jmp 0x40d9cf<br>mov byte[0x4c53cf], 0<br>jmp 0x40d94a<br>cmp edi, 3<br>jne 0x40d9b3<br>mov dword[ebp+0x10], 2<br>jmp 0x40d9cf<br>xor eax, eax<br>mov dword[ebp+0x10], eax<br>cmp dword[esi+0x5c], eax<br>jge 0x40d9c5<br>cmp dword[esi+0x64], eax<br>jge 0x40d9c5<br>or eax, 0xffffffff<br>mov dword[esi+0x64], eax<br>mov dword[esi+0x5c], 0xffffffff<br>xor edi, edi<br>mov byte[ebp-0xb], 0<br>cmp dword[ebp+0x14], edi<br>je 0x40da77<br>mov edx, dword[ebp+0x14]<br>push edi<br>push edx<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>mov ebx, eax<br>mov dword[ebp-0x54], ebx<br>test ebx, ebx<br>je 0x40da20<br>cmp ebx, dword[0x4c85cc]<br>je 0x40da20<br>mov esi, dword[ebp+0x14]<br>call fcn.00478540<br>test al, al<br>jne 0x40da1d<br>mov eax, dword[0x4c85cc]<br>push 1<br>push ebx<br>push eax<br>call dword[sym.imp.USER32.dll_AttachThreadInput]<br>test eax, eax<br>setne byte[ebp-0xb]<br>mov edi, ebx<br>mov esi, dword[ebp-0x38]<br>push edi<br>call dword[sym.imp.USER32.dll_GetKeyboardLayout]<br>mov dword[0x4c53f4], eax<br>push eax<br>xor eax, eax<br>call fcn.00411f10<br>add esp, 4<br>push 1<br>mov dword[0x4c53f0], eax<br>call fcn.00411940<br>add esp, 4<br>cmp dword[0x4c65e8], 0<br>mov bl, al<br>mov byte[ebp-4], bl<br>je 0x40db83<br>mov cl, byte[0x4c64b5]<br>mov dl, byte[0x4c64b7]<br>mov al, cl<br>not cl<br>and al, dl<br>and cl, dl<br>mov byte[ebp-2], dl<br>mov byte[ebp-0xa], cl<br>jmp 0x40dbae<br>test byte[0x4c90f2], 0xc0<br>je 0x40db65<br>call dword[sym.imp.KERNEL32.dll_GetTickCount]<br>sub eax, dword[0x4c90e8]<br>cmp eax, 0x32<br>jae 0x40db65<br>cmp dword[ebp+0x10], 2<br>je 0x40db65<br>cmp byte[0x4c53cf], 0<br>jne 0x40db65<br>cmp byte[0x4c92ce], 0<br>je 0x40db65<br>call dword[sym.imp.KERNEL32.dll_GetCurrentThreadId]<br>cmp eax, dword[0x4c85cc]<br>jne 0x40db65<br>mov eax, dword[ebp+8]<br>test bl, bl<br>mov ebx, 0x4a3834<br>je 0x40db33<br>call fcn.004095d0<br>test eax, eax<br>setne al<br>test al, al<br>je 0x40db65<br>lea esp, [esp]<br>mov ebx, dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>push 0x5b<br>call ebx<br>mov ecx, 0x8000<br>test cx, ax<br>jne 0x40db12<br>push 0x5c<br>call ebx<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40db65<br>push 1<br>push 0x8000012f<br>mov dword[0x4c28b4], edi<br>call fcn.00401340<br>add esp, 8<br>mov dword[0x4c28b4], 1<br>jmp 0x40daf0<br>call fcn.004095d0<br>test eax, eax<br>je 0x40db65<br>lea esp, [esp]<br>add eax, 2<br>mov ebx, 0x4a383c<br>call fcn.004095d0<br>test eax, eax<br>je 0x40daf0<br>cmp word[eax], 0x7b<br>je 0x40daf0<br>mov ebx, 0x4a3834<br>call fcn.004095d0<br>test eax, eax<br>jne 0x40db40<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>test eax, eax<br>je 0x40da20<br>push 0<br>push eax<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>mov edi, eax<br>jmp 0x40da20<br>call dword[sym.imp.KERNEL32.dll_GetTickCount]<br>sub eax, dword[0x4c90e8]<br>cmp eax, dword[0x4c28ac]<br>jae 0x40dba3<br>mov al, byte[0x4c90f2]<br>and al, bl<br>mov byte[ebp-2], al<br>jmp 0x40dbaa<br>mov byte[ebp-2], 0<br>mov al, byte[ebp-2]<br>mov byte[ebp-0xa], 0<br>mov cl, byte[0x4c7ec1]<br>not al<br>and al, bl<br>and cl, al<br>mov al, byte[0x4c53cf]<br>mov byte[0x4c7ec1], cl<br>test al, al<br>je 0x40dbd5<br>not cl<br>and cl, bl<br>mov byte[ebp-3], cl<br>mov byte[ebp-8], bl<br>jmp 0x40dbdc<br>mov byte[ebp-3], 0<br>mov byte[ebp-8], cl<br>cmp byte[esi+0xef], 0<br>je 0x40dbfd<br>test al, al<br>jne 0x40dbfd<br>push 2<br>mov bl, 0x14<br>call fcn.00411130<br>mov bl, byte[ebp-4]<br>add esp, 4<br>mov dword[ebp-0x40], eax<br>jmp 0x40dc04<br>mov dword[ebp-0x40], 0<br>mov edi, dword[ebp+0x10]<br>mov dword[0x4c7f18], edi<br>test edi, edi<br>je 0x40dc76<br>cmp edi, 1<br>jne 0x40dc27<br>mov eax, 0x36b0<br>mov dword[0x4c53e4], 0x1f4<br>jmp 0x40dc36<br>mov eax, 0x2ee0<br>mov dword[0x4c53e4], 0x5dc<br>call fcn.00494320<br>mov eax, esp<br>mov dword[0x4c53ec], eax<br>mov eax, 0x80000000<br>mov byte[0x4c53d7], bl<br>mov dword[0x4c53d8], eax<br>mov dword[0x4c53dc], eax<br>mov byte[0x4c53d6], 0<br>mov dword[0x4c53e8], 0<br>mov byte[0x4c53d5], 0<br>mov byte[0x4c53d4], 1<br>mov al, byte[0x4c6ec4]<br>mov byte[ebp-0x25], al<br>mov eax, dword[0x4c29c8]<br>cmp eax, 8<br>je 0x40dc8d<br>cmp eax, 0xa<br>jne 0x40dcce<br>test edi, edi<br>jne 0x40dcce<br>cmp dword[ebp+0x14], edi<br>jne 0x40dcce<br>test byte[0x4c9b80], 1<br>mov byte[ebp-4], 1<br>jne 0x40dcd4<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov edi, dword[0x4c7f18]<br>mov dword[0x4c9b7c], eax<br>jmp 0x40dcd9<br>mov byte[ebp-4], 0<br>jmp 0x40dcee<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x40dce7<br>push 1<br>call eax<br>mov edi, dword[0x4c7f18]<br>mov byte[0x4c6ec4], 1<br>mov edx, dword[ebp+8]<br>xor ecx, ecx<br>mov word[ebp-0x2a], cx<br>mov byte[ebp-1], 0<br>cmp word[edx], cx<br>je 0x40e6e4<br>mov esi, edx<br>cmp dword[0x4c7f18], 0<br>mov byte[ebp-9], 0<br>jne 0x40dd6f<br>mov edi, dword[sym.imp.KERNEL32.dll_GetTickCount]<br>call edi<br>sub eax, dword[0x4c9124]<br>mov ecx, dword[0x4c28ec]<br>cmp eax, dword[ecx+0xd4]<br>jbe 0x40dd6f<br>push 0<br>push 0<br>push 0<br>push 0<br>lea edx, [ebp-0x90]<br>push edx<br>call dword[sym.imp.USER32.dll_PeekMessageW]<br>test eax, eax<br>je 0x40dd68<br>push 1<br>push 0xffffffffffffffff<br>mov dword[0x4c28b4], 0<br>call fcn.00401340<br>add esp, 8<br>mov dword[0x4c28b4], 1<br>call edi<br>mov dword[0x4c9124], eax<br>cmp byte[ebp+0xc], 0<br>jne 0x40e599<br>movzx eax, word[esi]<br>push eax<br>push str.^+!_{}<br>call fcn.0048db21<br>add esp, 8<br>test eax, eax<br>je 0x40e599<br>movzx eax, word[esi]<br>add eax, 0xffffffdf<br>cmp eax, 0x5c<br>ja case.0x40dda8.34<br>movzx ecx, byte[eax+0x40ea98]<br>jmp dword[ecx*4+0x40ea7c]<br>test byte[ebp-8], 3<br>jne case.0x40dda8.34<br>or byte[ebp-1], 1<br>jmp case.0x40dda8.34<br>test byte[ebp-8], 0x30<br>jne case.0x40dda8.34<br>or byte[ebp-1], 0x10<br>jmp case.0x40dda8.34<br>test byte[ebp-8], 0xc<br>jne case.0x40dda8.34<br>or byte[ebp-1], 4<br>jmp case.0x40dda8.34<br>test byte[ebp-8], 0xc0<br>jne case.0x40dda8.34<br>or byte[ebp-1], 0x40<br>jmp case.0x40dda8.34<br>lea ebx, [esi+2]<br>push 0x7d<br>push ebx<br>call fcn.0048db21<br>mov edi, eax<br>add esp, 8<br>mov dword[ebp-0x18], edi<br>test edi, edi<br>je case.0x40dda8.34<br>mov eax, ebx<br>call fcn.00409620<br>mov esi, eax<br>mov ebx, edi<br>sub ebx, esi<br>sar ebx, 1<br>mov dword[ebp+8], esi<br>mov dword[ebp-0x30], ebx<br>jne 0x40dea9<br>movzx ecx, word[edi+2]<br>lea eax, [edi+2]<br>cmp ecx, 0x7d<br>jne 0x40de45<br>mov dword[ebp-0x18], eax<br>mov dword[ebp-0x30], 1<br>jmp 0x40dea3<br>cmp ecx, 0x20<br>je 0x40de53<br>cmp ecx, 9<br>jne 0x40e58c<br>call fcn.00409620<br>push 4<br>mov edi, eax<br>push str.Down<br>push edi<br>call fcn.0048d597<br>add esp, 0xc<br>test eax, eax<br>je 0x40de86<br>push 2<br>push 0x4a0d58<br>push edi<br>call fcn.0048d597<br>add esp, 0xc<br>test eax, eax<br>jne 0x40e58c<br>push 0x7d<br>push edi<br>call fcn.0048db21<br>add esp, 8<br>mov dword[ebp-0x18], eax<br>test eax, eax<br>je case.0x40dda8.34<br>sub eax, esi<br>sar eax, 1<br>mov dword[ebp-0x30], eax<br>mov ebx, dword[ebp-0x30]<br>mov edi, dword[ebp-0x18]<br>push 5<br>push str.Click<br>push esi<br>call fcn.0048d597<br>add esp, 0xc<br>test eax, eax<br>jne 0x40df51<br>xor edx, edx<br>lea eax, [ebp-0x48]<br>push eax<br>mov word[edi], dx<br>lea ecx, [ebp-0x24]<br>push ecx<br>lea edx, [ebp-0x10]<br>push edx<br>lea eax, [ebp-0x1d]<br>push eax<br>lea ecx, [ebp-0x50]<br>push ecx<br>lea edx, [ebp-0x4c]<br>push edx<br>lea eax, [esi+0xa]<br>call fcn.00409620<br>call fcn.0040fa80<br>mov ecx, dword[ebp-0x24]<br>add esp, 0x18<br>mov eax, 0x7d<br>mov word[edi], ax<br>cmp ecx, 1<br>jge 0x40df2c<br>mov edx, dword[ebp-0x38]<br>movzx eax, byte[edx+0xeb]<br>mov ecx, dword[ebp-0x48]<br>push ecx<br>push eax<br>lea ecx, [ebp-0x50]<br>push ecx<br>lea ecx, [ebp-0x64]<br>lea eax, [ebp-0x4c]<br>call fcn.004106d0<br>mov edx, dword[ebp-0x18]<br>add esp, 0xc<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>mov edx, dword[ebp-0x48]<br>mov eax, dword[ebp-0x50]<br>push edx<br>mov edx, dword[ebp-0x4c]<br>push eax<br>mov eax, dword[ebp+0x14]<br>push edx<br>mov edx, dword[ebp-0x10]<br>push eax<br>mov eax, dword[ebp-8]<br>push 0<br>push edx<br>mov edx, dword[ebp-0x1d]<br>push eax<br>push 0<br>push edx<br>jmp 0x40e581<br>push 3<br>push 0x4a3854<br>push esi<br>call fcn.0048d597<br>add esp, 0xc<br>test eax, eax<br>jne 0x40df76<br>mov edx, dword[ebp-0x18]<br>mov byte[ebp+0xc], 1<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>mov ecx, dword[ebp-0x18]<br>xor eax, eax<br>mov word[ecx], ax<br>mov dword[ebp-0x44], ebx<br>mov ebx, 0x4a352c<br>mov eax, esi<br>mov dword[ebp-0x10], 2<br>mov dword[ebp-0x24], 1<br>call fcn.004095d0<br>mov edi, eax<br>test edi, edi<br>je 0x40e025<br>movzx edx, word[edi]<br>xor eax, eax<br>mov word[edi], ax<br>mov eax, edi<br>sub eax, dword[ebp+8]<br>mov dword[ebp-0x60], edx<br>sar eax, 1<br>mov dword[ebp-0x44], eax<br>lea eax, [edi+2]<br>call fcn.00409620<br>mov ecx, dword[ebp-0x18]<br>mov esi, eax<br>sub ecx, esi<br>sar ecx, 1<br>je 0x40e022<br>push 4<br>push str.Down<br>push esi<br>call fcn.0048d597<br>add esp, 0xc<br>test eax, eax<br>jne 0x40dfff<br>push 4<br>push str.Temp<br>add esi, 8<br>push esi<br>mov dword[ebp-0x10], eax<br>call fcn.0048d597<br>add esp, 0xc<br>test eax, eax<br>setne byte[ebp-0x19]<br>jmp 0x40e022<br>push 0x4a0d58<br>push esi<br>call fcn.0048cd49<br>add esp, 8<br>test eax, eax<br>jne 0x40e01a<br>mov dword[ebp-0x10], 1<br>jmp 0x40e022<br>call fcn.0040d260<br>mov dword[ebp-0x24], eax<br>mov esi, dword[ebp+8]<br>movzx eax, word[esi]<br>test ax, ax<br>je 0x40e06e<br>cmp word[esi+2], 0<br>jne 0x40e047<br>mov ecx, dword[0x4c53f4]<br>lea esi, [ebp-1]<br>call fcn.00412360<br>mov esi, dword[ebp+8]<br>jmp 0x40e070<br>mov ebx, dword[ebp+8]<br>xor esi, esi<br>lea esp, [esp]<br>mov edx, dword[esi*8+0x4c36f8]<br>push ebx<br>push edx<br>call fcn.0048cd49<br>add esp, 8<br>test eax, eax<br>je 0x40e085<br>inc esi<br>cmp esi, 0x6d<br>jl 0x40e050<br>mov esi, dword[ebp+8]<br>xor al, al<br>mov bl, al<br>mov byte[ebp-0x1d], bl<br>test al, al<br>je 0x40e091<br>mov dword[ebp-0x3c], 0<br>jmp 0x40e116<br>mov al, byte[esi*8+0x4c36fc]<br>mov esi, dword[ebp+8]<br>jmp 0x40e070<br>mov eax, esi<br>call fcn.00412200<br>movzx eax, ax<br>mov dword[ebp-0x3c], eax<br>test ax, ax<br>jne 0x40e116<br>mov ax, word[esi]<br>call fcn.004095a0<br>cmp ax, 0x56<br>jne 0x40e116<br>mov ax, word[esi+2]<br>call fcn.004095a0<br>cmp ax, 0x4b<br>jne 0x40e116<br>mov eax, dword[ebp+8]<br>add eax, 4<br>mov ebx, 0x4a3868<br>call fcn.004095d0<br>mov esi, eax<br>test esi, esi<br>je 0x40e0fb<br>mov ax, word[esi+2]<br>call fcn.004095a0<br>cmp ax, 0x43<br>jne 0x40e0fb<br>push 0x10<br>push 0<br>add esi, 4<br>push esi<br>call fcn.0048e37b<br>movzx eax, ax<br>add esp, 0xc<br>mov dword[ebp-0x3c], eax<br>mov eax, dword[ebp+8]<br>push 0x10<br>add eax, 4<br>push 0<br>push eax<br>call fcn.0048e37b<br>mov esi, dword[ebp+8]<br>mov bl, al<br>add esp, 0xc<br>mov byte[ebp-0x1d], bl<br>test edi, edi<br>je 0x40e121<br>mov cx, word[ebp-0x60]<br>mov word[edi], cx<br>cmp dword[ebp-0x24], 1<br>mov eax, dword[ebp-0x18]<br>mov edx, 0x7d<br>mov word[eax], dx<br>jl 0x40e58c<br>test bl, bl<br>jne 0x40e4ee<br>cmp word[ebp-0x3c], 0<br>jne 0x40e4ee<br>mov eax, 1<br>cmp dword[ebp-0x44], eax<br>jne 0x40e1a0<br>cmp dword[ebp-0x10], eax<br>je 0x40e58c<br>cmp dword[ebp+0x14], 0<br>je 0x40e184<br>movzx ecx, word[esi]<br>mov edx, dword[ebp+0x14]<br>push 0<br>push ecx<br>push 0x102<br>push edx<br>call dword[sym.imp.USER32.dll_PostMessageW]<br>mov edx, dword[ebp-0x18]<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>movzx eax, word[esi]<br>push eax<br>mov eax, dword[ebp-0x24]<br>call fcn.0040eea0<br>mov edx, dword[ebp-0x18]<br>add esp, 4<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>cmp dword[ebp+0x14], 0<br>mov esi, dword[ebp-0x30]<br>mov edi, dword[ebp+8]<br>lea ecx, [ebp-8]<br>push ecx<br>lea edx, [ebp-0x10]<br>sete bl<br>push edx<br>call fcn.004123e0<br>add esp, 8<br>mov byte[ebp-0x1d], al<br>test al, al<br>je 0x40e3a3<br>mov edi, dword[ebp+0x14]<br>test edi, edi<br>jne 0x40e1de<br>cmp dword[ebp-0x10], edi<br>jne 0x40e1d9<br>mov byte[ebp-9], al<br>jmp 0x40e1de<br>call fcn.0040d430<br>cmp dword[0x4c7f18], 0<br>je 0x40e1f2<br>mov bl, byte[0x4c53d7]<br>jmp 0x40e2e4<br>cmp dword[0x4c65e8], 0<br>je 0x40e206<br>mov bl, byte[0x4c64b5]<br>jmp 0x40e2e4<br>mov esi, dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>push 0xa0<br>xor bl, bl<br>call esi<br>mov ecx, 0x8000<br>test cx, ax<br>je 0x40e221<br>mov bl, 0x10<br>push 0xa1<br>call esi<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40e235<br>or bl, 0x20<br>push 0xa2<br>call esi<br>mov ecx, 0x8000<br>test cx, ax<br>je 0x40e249<br>or bl, 1<br>push 0xa3<br>call esi<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40e25d<br>or bl, 2<br>push 0xa4<br>call esi<br>mov ecx, 0x8000<br>test cx, ax<br>je 0x40e271<br>or bl, 4<br>push 0xa5<br>call esi<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40e285<br>or bl, 8<br>push 0x5b<br>call esi<br>mov ecx, 0x8000<br>test cx, ax<br>je 0x40e296<br>or bl, 0x40<br>push 0x5c<br>call esi<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40e2a7<br>or bl, 0x80<br>cmp dword[0x4c65e8], 0<br>je 0x40e2e4<br>mov al, bl<br>not al<br>and al, byte[0x4c64b5]<br>je 0x40e2e4<br>mov cl, byte[0x4c64b7]<br>not al<br>and byte[0x4c64b5], al<br>and byte[0x4c64b6], al<br>and cl, al<br>mov al, cl<br>mov byte[0x4c64b7], cl<br>mov ecx, 0x4c64d8<br>call fcn.00411a40<br>mov eax, dword[ebp-8]<br>push 0<br>push 0<br>push edi<br>push ebx<br>push eax<br>mov esi, 0xffc3d44d<br>call fcn.00411240<br>mov eax, dword[ebp-0x24]<br>add esp, 0x14<br>test eax, eax<br>jle 0x40e58c<br>mov ebx, dword[ebp-0x1d]<br>mov edi, eax<br>jmp 0x40e310<br>mov ecx, dword[ebp+0x14]<br>mov edx, dword[ebp-0x10]<br>push 0xffc3d44d<br>push 1<br>push ecx<br>push 0<br>push ebx<br>push edx<br>call fcn.0040f3b0<br>add esp, 0x18<br>cmp dword[0x4c7f18], 0<br>jne 0x40e38f<br>mov esi, dword[sym.imp.KERNEL32.dll_GetTickCount]<br>call esi<br>sub eax, dword[0x4c9124]<br>mov ecx, dword[0x4c28ec]<br>cmp eax, dword[ecx+0xd4]<br>jbe 0x40e38f<br>push 0<br>push 0<br>push 0<br>push 0<br>lea edx, [ebp-0x90]<br>push edx<br>call dword[sym.imp.USER32.dll_PeekMessageW]<br>test eax, eax<br>je 0x40e388<br>push 1<br>push 0xffffffffffffffff<br>mov dword[0x4c28b4], 0<br>call fcn.00401340<br>add esp, 8<br>mov dword[0x4c28b4], 1<br>call esi<br>mov dword[0x4c9124], eax<br>dec edi<br>jne 0x40e310<br>mov edx, dword[ebp-0x18]<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>mov ebx, dword[ebp-0x30]<br>mov edi, dword[ebp+8]<br>cmp ebx, 4<br>jbe 0x40e41e<br>push 4<br>push str.ASC_<br>push edi<br>call fcn.0048d597<br>add esp, 0xc<br>test eax, eax<br>jne 0x40e41e<br>mov esi, dword[ebp+0x14]<br>test esi, esi<br>jne 0x40e421<br>lea eax, [edi+6]<br>call fcn.00409620<br>mov edi, eax<br>call fcn.0040efb0<br>cmp dword[0x4c7f18], 2<br>jne 0x40e3ff<br>mov eax, dword[0x4c28ec]<br>mov eax, dword[eax+0x60]<br>push eax<br>call fcn.00410e40<br>mov edx, dword[ebp-0x18]<br>add esp, 4<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>mov ecx, dword[0x4c28ec]<br>mov eax, dword[ecx+0x5c]<br>push eax<br>call fcn.00410e40<br>mov edx, dword[ebp-0x18]<br>add esp, 4<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>mov esi, dword[ebp+0x14]<br>cmp ebx, 2<br>jbe 0x40e58c<br>push 2<br>push 0x4a387c<br>push edi<br>call fcn.0048d597<br>add esp, 0xc<br>test eax, eax<br>jne 0x40e58c<br>push 0x10<br>push eax<br>add edi, 4<br>push edi<br>call fcn.0048e37b<br>add esp, 0xc<br>movzx ecx, ax<br>test esi, esi<br>je 0x40e469<br>push 0<br>push ecx<br>push 0x102<br>push esi<br>call dword[sym.imp.USER32.dll_PostMessageW]<br>jmp 0x40e4a7<br>cmp dword[0x4c7f18], 2<br>je 0x40e487<br>movzx edx, byte[ebp-8]<br>movzx eax, byte[ebp-1]<br>or eax, edx<br>push ecx<br>call fcn.0040d4b0<br>add esp, 4<br>jmp 0x40e4a7<br>push 0xa<br>lea edx, [ebp-0x72]<br>push edx<br>mov eax, 0x30<br>push ecx<br>mov word[ebp-0x74], ax<br>call fcn.0048cac5<br>add esp, 0xc<br>lea edi, [ebp-0x74]<br>call fcn.0040efb0<br>cmp dword[0x4c7f18], 2<br>jne 0x40e4cf<br>mov ecx, dword[0x4c28ec]<br>mov eax, dword[ecx+0x60]<br>push eax<br>call fcn.00410e40<br>mov edx, dword[ebp-0x18]<br>add esp, 4<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>mov edx, dword[0x4c28ec]<br>mov eax, dword[edx+0x5c]<br>push eax<br>call fcn.00410e40<br>mov edx, dword[ebp-0x18]<br>add esp, 4<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>mov esi, dword[ebp-0x3c]<br>xor ecx, ecx<br>mov edx, esi<br>mov al, bl<br>call fcn.00411b10<br>mov byte[ebp-0x14], al<br>test al, al<br>je 0x40e55d<br>cmp dword[ebp+0x14], 0<br>jne 0x40e55d<br>mov ecx, dword[ebp-0x10]<br>test ecx, ecx<br>jne 0x40e523<br>mov byte[ebp-9], bl<br>cmp byte[ebp-0x19], cl<br>je 0x40e51e<br>or byte[0x4c7ec1], al<br>or byte[ebp-8], al<br>jmp 0x40e55d<br>cmp ecx, 1<br>jne 0x40e55d<br>mov al, bl<br>call fcn.0040d430<br>mov al, byte[ebp-0x14]<br>mov cl, byte[0x4c7ec1]<br>not al<br>and byte[ebp-3], al<br>and cl, al<br>mov byte[0x4c7ec1], cl<br>cmp bl, 0xa5<br>jne 0x40e557<br>cmp dword[0x4c53f0], 3<br>jne 0x40e557<br>and byte[ebp-3], 0xfe<br>or cl, byte[ebp-3]<br>mov byte[ebp-8], cl<br>mov eax, dword[ebp+0x14]<br>mov ecx, dword[ebp-0x14]<br>mov edx, dword[ebp-0x10]<br>push 0<br>push 0x80000000<br>push 0x80000000<br>push eax<br>mov eax, dword[ebp-8]<br>push ecx<br>mov ecx, dword[ebp-0x1d]<br>push edx<br>push eax<br>push esi<br>push ecx<br>mov ecx, dword[ebp-0x24]<br>mov al, byte[ebp-1]<br>call fcn.0040eb00<br>add esp, 0x24<br>mov edx, dword[ebp-0x18]<br>mov dword[ebp+8], edx<br>mov esi, edx<br>jmp 0x40e6c2<br>mov ax, word[esi]<br>mov word[ebp-0x2c], ax<br>test ax, ax<br>je 0x40e651<br>cmp word[ebp-0x2a], 0<br>jne 0x40e5c9<br>mov ecx, dword[0x4c53f4]<br>mov eax, dword[ebp-0x2c]<br>lea esi, [ebp-1]<br>call fcn.00412360<br>mov esi, dword[ebp+8]<br>jmp 0x40e653<br>movzx esi, ax<br>test esi, 0xffffff80<br>jne 0x40e5e6<br>push 2<br>push esi<br>call fcn.0048df9e<br>add esp, 8<br>test eax, eax<br>je 0x40e5e6<br>and esi, 0xffffffdf<br>cmp si, 0x56<br>jne 0x40e625<br>movzx esi, word[ebp-0x2a]<br>test esi, 0xffffff80<br>jne 0x40e60a<br>push 2<br>push esi<br>call fcn.0048df9e<br>add esp, 8<br>test eax, eax<br>je 0x40e60a<br>and esi, 0xffffffdf<br>cmp si, 0x4b<br>jne 0x40e625<br>push 0x10<br>lea eax, [ebp-0x28]<br>push 0<br>push eax<br>call fcn.0048e37b<br>mov esi, dword[ebp+8]<br>add esp, 0xc<br>jmp 0x40e653<br>xor esi, esi<br>jmp 0x40e630<br>mov edx, dword[esi*8+0x4c36f8]<br>lea ecx, [ebp-0x2c]<br>push ecx<br>push edx<br>call fcn.0048cd49<br>add esp, 8<br>test eax, eax<br>je 0x40e68d<br>inc esi<br>cmp esi, 0x6d<br>jl 0x40e630<br>mov esi, dword[ebp+8]<br>xor al, al<br>mov byte[ebp-0x34], al<br>mov byte[ebp-0x1d], al<br>test al, al<br>mov eax, dword[ebp+0x14]<br>je 0x40e699<br>mov ecx, dword[ebp-8]<br>mov edx, dword[ebp-0x34]<br>push 0<br>push 0x80000000<br>push 0x80000000<br>push eax<br>mov al, byte[ebp-1]<br>push 0<br>push 2<br>push ecx<br>push 0<br>push edx<br>mov ecx, 1<br>call fcn.0040eb00<br>add esp, 0x24<br>jmp 0x40e6c2<br>mov al, byte[esi*8+0x4c36fc]<br>mov esi, dword[ebp+8]<br>jmp 0x40e653<br>test eax, eax<br>je 0x40e6b1<br>movzx ecx, word[esi]<br>push 0<br>push ecx<br>push 0x102<br>push eax<br>call dword[sym.imp.USER32.dll_PostMessageW]<br>jmp 0x40e6c2<br>movzx edx, word[esi]<br>push edx<br>mov eax, 1<br>call fcn.0040eea0<br>add esp, 4<br>mov byte[ebp-1], 0<br>mov al, byte[ebp-9]<br>add esi, 2<br>cmp word[esi], 0<br>mov dword[ebp+8], esi<br>mov byte[0x4c7ec0], al<br>jne 0x40dd06<br>mov edi, dword[0x4c7f18]<br>test edi, edi<br>je 0x40e7a4<br>cmp byte[0x4c53d5], 0<br>mov dword[ebp-0x14], 0xffffffff<br>jne 0x40e75b<br>cmp dword[0x4c53e8], 0<br>jbe 0x40e75b<br>cmp byte[0x4c53cf], 0<br>je 0x40e712<br>xor eax, eax<br>jmp 0x40e71e<br>movzx eax, byte[ebp-0xa]<br>movzx ecx, byte[ebp-2]<br>not eax<br>and eax, ecx<br>or al, byte[ebp-8]<br>movzx edx, byte[0x4c53d7]<br>mov ebx, 1<br>push ebx<br>push ebx<br>mov byte[ebp+8], al<br>mov edi, dword[ebp+8]<br>push 0<br>push edx<br>push edi<br>mov esi, 0xffc3d44d<br>call fcn.00411240<br>add esp, 0x14<br>lea eax, [ebp-0x14]<br>push edi<br>push eax<br>call fcn.00410cf0<br>mov edi, dword[0x4c7f18]<br>add esp, 8<br>jmp 0x40e760<br>mov ebx, 1<br>sub edi, ebx<br>neg edi<br>sbb edi, edi<br>and edi, 0x3e8<br>add edi, 0x1f4<br>cmp dword[0x4c53e4], edi<br>jbe 0x40e789<br>mov ecx, dword[0x4c53ec]<br>push ecx<br>call fcn.0048e3af<br>add esp, 4<br>mov edx, dword[ebp-0x14]<br>push edx<br>mov dword[0x4c7f18], 0<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40e91f<br>cmp dword[0x4c65e8], 0<br>je 0x40e7b5<br>mov cl, byte[0x4c64b7]<br>jmp 0x40e7d9<br>cmp dword[0x4c28ac], 0<br>jl 0x40e7d6<br>call dword[sym.imp.KERNEL32.dll_GetTickCount]<br>sub eax, dword[0x4c90e8]<br>cmp eax, dword[0x4c28ac]<br>jb 0x40e7d6<br>xor cl, cl<br>jmp 0x40e7d9<br>mov cl, byte[ebp-2]<br>cmp byte[0x4c53cf], 0<br>je 0x40e7fb<br>mov dl, byte[ebp-2]<br>mov al, cl<br>xor al, dl<br>mov bl, al<br>and bl, dl<br>not bl<br>and bl, byte[ebp-8]<br>and al, cl<br>or bl, al<br>mov byte[ebp+8], bl<br>jmp 0x40e808<br>mov al, byte[ebp-0xa]<br>not al<br>and al, cl<br>or al, byte[ebp-8]<br>mov byte[ebp+8], al<br>cmp dword[0x4c65e8], 0<br>je 0x40e81e<br>mov al, byte[0x4c64b5]<br>mov byte[ebp-0x14], al<br>jmp 0x40e8ff<br>mov esi, dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>push 0xa0<br>xor bl, bl<br>call esi<br>mov ecx, 0x8000<br>test cx, ax<br>je 0x40e839<br>mov bl, 0x10<br>push 0xa1<br>call esi<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40e84d<br>or bl, 0x20<br>push 0xa2<br>call esi<br>mov ecx, 0x8000<br>test cx, ax<br>je 0x40e861<br>or bl, 1<br>push 0xa3<br>call esi<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40e875<br>or bl, 2<br>push 0xa4<br>call esi<br>mov ecx, 0x8000<br>test cx, ax<br>je 0x40e889<br>or bl, 4<br>push 0xa5<br>call esi<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40e89d<br>or bl, 8<br>push 0x5b<br>call esi<br>mov ecx, 0x8000<br>test cx, ax<br>je 0x40e8ae<br>or bl, 0x40<br>push 0x5c<br>call esi<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40e8bf<br>or bl, 0x80<br>cmp dword[0x4c65e8], 0<br>je 0x40e8fc<br>mov al, bl<br>not al<br>and al, byte[0x4c64b5]<br>je 0x40e8fc<br>mov cl, byte[0x4c64b7]<br>not al<br>and byte[0x4c64b5], al<br>and byte[0x4c64b6], al<br>and cl, al<br>mov al, cl<br>mov byte[0x4c64b7], cl<br>mov ecx, 0x4c64d8<br>call fcn.00411a40<br>mov byte[ebp-0x14], bl<br>mov eax, dword[ebp+0x14]<br>mov ecx, dword[ebp-0x14]<br>mov edx, dword[ebp+8]<br>mov ebx, 1<br>push ebx<br>push ebx<br>push eax<br>push ecx<br>push edx<br>mov esi, 0xffc3d44d<br>call fcn.00411240<br>add esp, 0x14<br>cmp dword[0x4c65e8], 0<br>je 0x40e940<br>mov al, byte[0x4c64b6]<br>mov cl, al<br>xor cl, byte[0x4c64b5]<br>and cl, al<br>not cl<br>and al, cl<br>mov byte[0x4c64b6], al<br>cmp dword[ebp-0x40], ebx<br>jne 0x40e9c0<br>mov esi, dword[sym.imp.USER32.dll_GetKeyState]<br>push 0x14<br>call esi<br>test al, 1<br>jne 0x40e9c0<br>push 0x14<br>call esi<br>mov edx, 0x8000<br>test dx, ax<br>je 0x40e977<br>push 0xffc3d44d<br>push 0<br>push 0<br>push 0<br>push 0x14<br>push ebx<br>call fcn.0040f3b0<br>add esp, 0x18<br>push 0xffc3d44d<br>push 0<br>push 0<br>push 0<br>push 0x14<br>push 2<br>call fcn.0040f3b0<br>add esp, 0x18<br>push 0<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>push eax<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>cmp eax, dword[0x4c85cc]<br>jne 0x40e9c0<br>push ebx<br>push 0xffffffffffffffff<br>mov dword[0x4c28b4], 0<br>call fcn.00401340<br>add esp, 8<br>mov dword[0x4c28b4], ebx<br>cmp byte[ebp-0xb], 0<br>je 0x40e9d9<br>mov eax, dword[ebp-0x54]<br>mov ecx, dword[0x4c85cc]<br>push 0<br>push eax<br>push ecx<br>call dword[sym.imp.USER32.dll_AttachThreadInput]<br>cmp byte[ebp-4], 0<br>je 0x40ea26<br>cmp byte[ebp-0x25], 0<br>jne 0x40ea26<br>test byte[0x4c9b80], 1<br>jne 0x40ea12<br>or dword[0x4c9b80], ebx<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>jmp 0x40ea17<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x40ea1f<br>push 0<br>call eax<br>mov byte[0x4c6ec4], 0<br>cmp dword[ebp+0x10], ebx<br>jne 0x40ea5d<br>push 0<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>push eax<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>cmp eax, dword[0x4c85cc]<br>jne 0x40ea5d<br>push ebx<br>push 0xffffffffffffffff<br>mov dword[0x4c28b4], 0<br>call fcn.00401340<br>add esp, 8<br>mov dword[0x4c28b4], ebx<br>mov eax, dword[ebp-0x38]<br>mov edx, dword[ebp-0x5c]<br>mov ecx, dword[ebp-0x58]<br>mov dword[eax+0x5c], edx<br>mov dword[eax+0x64], ecx<br>lea esp, [ebp-0xa0]<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret <br><eoc> ', 'null'],
[271.3946228027344, -2.3295726776123047, '<b><a href="/report/fcn.004069e0@4fe6510221c33bf023f6abed461fc13f">fcn.004069e0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>sub esp, 0xc<br>push ebx<br>push ebp<br>push esi<br>mov ebx, ecx<br>mov ecx, dword[esp+0x1c]<br>push edi<br>mov esi, eax<br>mov edi, edx<br>mov dword[esp+0x14], 0x7fffffff<br>cmp ecx, dword[0x4c65ec]<br>je 0x406e03<br>mov eax, dword[edi+0x10]<br>cmp eax, 0xffc3d44f<br>je 0x406a64<br>cmp eax, 0xffc3d44e<br>je 0x406a64<br>cmp eax, 0xffc3d44d<br>je 0x406a64<br>mov ebp, dword[0x4c6eec]<br>movzx eax, bl<br>lea eax, [eax+eax*8]<br>shl eax, 5<br>mov eax, dword[eax+ebp]<br>xor ebp, ebp<br>xor dl, dl<br>cmp eax, ebp<br>je 0x406a68<br>cmp dword[eax], 7<br>je 0x406a68<br>mov edx, dword[esp+0x34]<br>mov eax, dword[esp+0x2c]<br>push ebp<br>push 0x7fffffff<br>push edx<br>push eax<br>push esi<br>push ebx<br>mov ebx, dword[esp+0x48]<br>mov eax, edi<br>call fcn.004068b0<br>add esp, 0x18<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0xc<br>ret <br>mov dl, 1<br>xor ebp, ebp<br>cmp byte[0x4c6efe], 0<br>je 0x406a75<br>test dl, dl<br>je 0x406a8b<br>cmp dword[0x4c8600], 1<br>jne 0x406ade<br>cmp byte[0x4c862e], 0<br>je 0x406a8b<br>test dl, dl<br>jne 0x406ade<br>lea ecx, [esp+0x18]<br>push ecx<br>mov ecx, dword[esp+0x34]<br>lea eax, [esp+0x18]<br>push eax<br>mov eax, dword[esp+0x34]<br>push ecx<br>push eax<br>push esi<br>push ebx<br>push edi<br>call fcn.00406ed0<br>add esp, 0x1c<br>test al, al<br>jne 0x406ade<br>mov ecx, dword[esp+0x18]<br>mov edx, dword[esp+0x14]<br>mov eax, dword[esp+0x34]<br>push ecx<br>mov ecx, dword[esp+0x30]<br>push edx<br>push eax<br>push ecx<br>mov ecx, dword[esp+0x30]<br>push esi<br>push ebx<br>mov ebx, dword[esp+0x48]<br>mov eax, edi<br>call fcn.004068b0<br>add esp, 0x18<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0xc<br>ret <br>mov edx, dword[esp+0x2c]<br>push ebp<br>push edx<br>push esi<br>push ebx<br>call fcn.004079c0<br>add esp, 0x10<br>cmp bl, 0x4c<br>jne 0x406c00<br>cmp byte[esp+0x2c], 0<br>jne 0x406d39<br>mov al, byte[0x4c64b5]<br>cmp al, 0x40<br>je 0x406b17<br>cmp al, 0x80<br>je 0x406b17<br>cmp al, 0xc0<br>jne 0x406d39<br>cmp byte[0x4c92ca], 0<br>je 0x406d39<br>push 0x100<br>push ebp<br>push 0x4c64d8<br>mov dword[0x4c53c8], ebp<br>mov byte[0x4c64b7], 0<br>mov byte[0x4c64b6], 0<br>mov byte[0x4c64b5], 0<br>call fcn.00495c20<br>add esp, 0xc<br>push ebp<br>push str.32771<br>mov byte[0x4c53ce], 0<br>mov byte[0x4c53cd], 0<br>mov byte[0x4c53cc], 0<br>mov byte[0x4c53c7], 0<br>call dword[sym.imp.USER32.dll_FindWindowW]<br>test eax, eax<br>setne al<br>mov byte[0x4c53c6], al<br>xor eax, eax<br>xor ecx, ecx<br>mov dword[0x4c53a4], eax<br>mov dword[0x4c53a8], eax<br>mov dword[0x4c53ac], eax<br>mov dword[0x4c53b0], eax<br>mov dword[0x4c53b4], eax<br>mov word[0x4c53b8], ax<br>mov word[0x4c5208], cx<br>mov dword[0x4c5204], ebp<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>xor edx, edx<br>mov dword[0x4c5200], eax<br>mov byte[0x4c53c3], 0<br>mov byte[0x4c53c2], 0<br>mov word[0x4c53c4], dx<br>mov byte[0x4c53c1], dl<br>mov byte[0x4c53c0], dl<br>mov dword[0x4c53bc], ebp<br>mov byte[0x4c53bb], dl<br>mov byte[0x4c53ba], dl<br>mov byte[0x4c52c7], dl<br>jmp 0x406d39<br>cmp bl, 0x2e<br>je 0x406c0e<br>cmp bl, 0x6e<br>jne 0x406d10<br>cmp byte[esp+0x2c], 0<br>jne 0x406d10<br>mov al, byte[0x4c64b7]<br>test al, 3<br>je 0x406d10<br>test al, 0xc<br>je 0x406d10<br>test al, 0x30<br>jne 0x406d10<br>push 0x100<br>push ebp<br>push 0x4c64d8<br>mov dword[0x4c53c8], ebp<br>mov byte[0x4c64b7], 0<br>mov byte[0x4c64b6], 0<br>mov byte[0x4c64b5], 0<br>call fcn.00495c20<br>add esp, 0xc<br>push ebp<br>push str.32771<br>mov byte[0x4c53ce], 0<br>mov byte[0x4c53cd], 0<br>mov byte[0x4c53cc], 0<br>mov byte[0x4c53c7], 0<br>call dword[sym.imp.USER32.dll_FindWindowW]<br>test eax, eax<br>setne al<br>mov byte[0x4c53c6], al<br>xor eax, eax<br>xor ecx, ecx<br>mov dword[0x4c53a4], eax<br>mov dword[0x4c53a8], eax<br>mov dword[0x4c53ac], eax<br>mov dword[0x4c53b0], eax<br>mov dword[0x4c53b4], eax<br>mov word[0x4c53b8], ax<br>mov word[0x4c5208], cx<br>mov dword[0x4c5204], ebp<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>xor edx, edx<br>mov dword[0x4c5200], eax<br>mov byte[0x4c53c3], 0<br>mov byte[0x4c53c2], 0<br>mov word[0x4c53c4], dx<br>mov byte[0x4c53c1], dl<br>mov byte[0x4c53c0], dl<br>mov dword[0x4c53bc], ebp<br>mov byte[0x4c53bb], dl<br>mov byte[0x4c53ba], dl<br>mov byte[0x4c52c7], dl<br>lea esp, [esp]<br>cmp bl, 9<br>jne 0x406d39<br>cmp byte[esp+0x2c], 0<br>jne 0x406d39<br>cmp byte[0x4c53c6], 0<br>jne 0x406d39<br>mov al, byte[0x4c64b5]<br>test al, 0xc<br>je 0x406d39<br>test al, 3<br>jne 0x406d39<br>mov byte[0x4c53c6], 1<br>mov ecx, dword[0x4c6eec]<br>movzx eax, bl<br>lea eax, [eax+eax*8]<br>shl eax, 5<br>cmp byte[eax+ecx+4], 0<br>je 0x406e05<br>cmp byte[0x4c53c6], 0<br>je 0x406d92<br>cmp byte[esp+0x2c], 0<br>je 0x406d74<br>cmp bl, 0xa4<br>je 0x406d79<br>cmp bl, 0xa5<br>je 0x406d79<br>cmp bl, 0x12<br>je 0x406d79<br>jmp 0x406d92<br>cmp bl, 0x1b<br>jne 0x406d92<br>mov edx, dword[esp+0x30]<br>movzx eax, word[edx+4]<br>cmp eax, 0x68<br>je 0x406d92<br>cmp eax, 0x73<br>je 0x406d92<br>mov byte[0x4c53c6], 0<br>cmp bl, 0x5b<br>je 0x406da1<br>mov byte[esp+0x13], 0<br>cmp bl, 0x5c<br>jne 0x406da6<br>mov byte[esp+0x13], 1<br>cmp byte[esp+0x38], 0<br>je 0x406e05<br>cmp byte[esp+0x2c], 0<br>je 0x406e05<br>cmp byte[esp+0x13], 0<br>jne 0x406dd3<br>cmp bl, 0x12<br>je 0x406dd3<br>cmp bl, 0xa4<br>je 0x406dd3<br>cmp bl, 0xa5<br>jne 0x406e05<br>call fcn.00411ed0<br>test al, al<br>jne 0x406e05<br>mov al, byte[0x4c64b5]<br>test al, 3<br>jne 0x406e05<br>cmp byte[esp+0x13], 0<br>je 0x406de7<br>test al, 0x3c<br>jne 0x406e05<br>movzx eax, byte[0x4c2385]<br>push 0xffc3d44d<br>push ebp<br>push ebp<br>push ebp<br>push eax<br>push 2<br>call fcn.0040f3b0<br>add esp, 0x18<br>jmp 0x406e05<br>xor ebp, ebp<br>cmp byte[0x4c28e2], 0<br>je 0x406e27<br>cmp bl, 1<br>je 0x406e18<br>cmp bl, 2<br>jne 0x406e27<br>xor ecx, ecx<br>mov word[0x4c5208], cx<br>mov dword[0x4c5204], ebp<br>mov edx, dword[esp+0x28]<br>mov eax, dword[esp+0x24]<br>mov ecx, dword[esp+0x20]<br>push edi<br>push edx<br>push eax<br>push ecx<br>call dword[sym.imp.USER32.dll_CallNextHookEx]<br>mov ebx, dword[esp+0x34]<br>mov esi, dword[sym.imp.USER32.dll_PostMessageW]<br>mov edi, eax<br>cmp ebx, 0x3fff<br>je 0x406e9c<br>mov ebp, dword[esp+0x30]<br>movzx edx, word[ebp+2]<br>mov eax, dword[0x4c64b8]<br>push edx<br>push ebx<br>push 0x400<br>push eax<br>call esi<br>cmp byte[esp+0x2c], 0<br>je 0x406e9c<br>mov ecx, dword[0x4c6ee8]<br>and ebx, 0x3fff<br>movzx eax, word[ecx+ebx*2]<br>mov edx, 0x3fff<br>cmp ax, dx<br>je 0x406e9c<br>movzx ecx, word[ebp+2]<br>push ecx<br>push eax<br>mov eax, dword[0x4c64b8]<br>push 0x400<br>push eax<br>call esi<br>mov eax, dword[esp+0x14]<br>cmp eax, 0x7fffffff<br>je 0x406ebb<br>mov ecx, dword[esp+0x18]<br>mov edx, dword[0x4c64b8]<br>push ecx<br>push eax<br>push 0x401<br>push edx<br>call esi<br>mov eax, edi<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0xc<br>ret <br><eoc> ', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
mov ebp, esp
and esp, 0xfffffff8
movzx eax, byte[ebp+0xc]
sub esp, 0x11c
push ebx
mov ebx, dword[ebp+0x10]
or ax, bx
push esi
push edi
je 0x40f9c7
cmp dword[ebp+0x1c], 0
jne 0x40f3dc
mov dword[ebp+0x1c], 0xffc3d44d
call dword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
cmp eax, dword[0x4c53a0]
mov eax, dword[0x4c7f18]
sete byte[esp+0x11]
test eax, eax
je 0x40f402
cmp byte[esp+0x11], 0
mov byte[esp+0x12], 1
je 0x40f407
mov byte[esp+0x12], 0
cmp eax, 1
je 0x40f413
cmp byte[esp+0x11], 0
je 0x40f417
mov byte[ebp+0x18], 0
cmp byte[ebp+0xc], 0
jne 0x40f429
mov ecx, ebx
call fcn.00412980
mov byte[ebp+0xc], al
jmp 0x40f442
test bx, bx
jne 0x40f442
mov ecx, dword[ebp+0xc]
push ecx
xor bl, bl
call fcn.00412700
movzx ebx, ax
add esp, 4
mov dword[ebp+0x10], ebx
mov edx, ebx
xor eax, eax
shr edx, 8
test dl, dl
setne al
cmp dword[0x4c7f18], 2
mov dword[esp+0x1c], eax
jne case.default.0x40f469
movzx eax, byte[ebp+0xc]
add eax, 0xffffff60
cmp eax, 5
ja case.default.0x40f469
jmp dword[eax*4+0x40f9d0]
mov byte[ebp+0xc], 0x11
jmp case.default.0x40f469
mov byte[ebp+0xc], 0x10
jmp case.default.0x40f469
mov byte[ebp+0xc], 0x12
cmp dword[ebp+0x14], 0
mov al, byte[ebp+0xc]
je 0x40f5b5
xor ecx, ecx
mov edx, ebx
call fcn.00411b10
mov ebx, dword[ebp+8]
test al, al
je 0x40f54b
lea ecx, [esp+0x28]
push ecx
call dword[sym.imp.USER32.dll_GetKeyboardState]
mov cl, 0x80
mov dl, 0x7f
test ebx, ebx
jne 0x40f4c2
movzx eax, byte[ebp+0xc]
or byte[esp+eax+0x28], cl
lea eax, [esp+eax+0x28]
jmp 0x40f4d3
cmp ebx, 1
jne 0x40f4d3
movzx eax, byte[ebp+0xc]
and byte[esp+eax+0x28], dl
lea eax, [esp+eax+0x28]
movzx eax, byte[ebp+0xc]
add eax, 0xffffff60
cmp eax, 5
ja case.default.0x40f4e1
jmp dword[eax*4+0x40f9e8]
test byte[esp+0xca], cl
jne 0x40f500
test byte[esp+0xcb], cl
jne 0x40f500
and byte[esp+0x39], dl
jmp case.default.0x40f4e1
or byte[esp+0x39], cl
jmp case.default.0x40f4e1
test byte[esp+0xc8], cl
jne 0x40f51e
test byte[esp+0xc9], cl
jne 0x40f51e
and byte[esp+0x38], dl
jmp case.default.0x40f4e1
or byte[esp+0x38], cl
jmp case.default.0x40f4e1
test byte[esp+0xcc], cl
jne 0x40f53c
test byte[esp+0xcd], cl
jne 0x40f53c
and byte[esp+0x3a], dl
jmp case.default.0x40f4e1
or byte[esp+0x3a], cl
lea edx, [esp+0x28]
push edx
call dword[sym.imp.USER32.dll_SetKeyboardState]
movzx esi, word[ebp+0x10]
mov edi, dword[sym.imp.USER32.dll_PostMessageW]
shl esi, 0x10
cmp ebx, 1
je 0x40f573
movzx ecx, byte[ebp+0xc]
mov edx, dword[ebp+0x14]
mov eax, esi
or eax, 1
push eax
push ecx
push 0x100
push edx
call edi
cmp byte[ebp+0x18], 0
je 0x40f591
cmp ebx, 2
jne 0x40f591
mov eax, dword[0x4c28ec]
mov ecx, dword[eax+0x64]
push ecx
call fcn.00410e40
add esp, 4
jmp 0x40f599
test ebx, ebx
je 0x40f98e
movzx edx, byte[ebp+0xc]
mov eax, dword[ebp+0x14]
or esi, 0xc0000001
push esi
push edx
push 0x101
push eax
call edi
jmp 0x40f98e
cmp byte[0x4c6ec4], 0
mov ecx, dword[ebp+8]
mov dword[0x4c53f8], ecx
mov byte[0x4c6eff], al
je 0x40f612
cmp al, 0x12
je 0x40f5d8
cmp al, 0xa4
je 0x40f5d8
cmp al, 0xa5
jne 0x40f612
cmp byte[esp+0x11], 0
jne 0x40f612
test byte[0x4c9b80], 1
mov byte[esp+0x16], 1
jne 0x40f643
or dword[0x4c9b80], 1
push str.BlockInput
push str.user32
call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]
push eax
call dword[sym.imp.KERNEL32.dll_GetProcAddress]
mov dword[0x4c9b7c], eax
jmp 0x40f648
cmp byte[esp+0x11], 0
mov byte[esp+0x16], 0
lea esi, [esp+0x24]
jne 0x40f627
mov esi, 0x4c53f0
mov dword[esp+0x18], esi
cmp al, 0xa5
jne 0x40f65c
cmp byte[esp+0x12], 0
jne 0x40f65c
cmp dword[0x4c65e8], 0
je 0x40f65c
mov al, 1
jmp 0x40f65e
mov eax, dword[0x4c9b7c]
test eax, eax
je 0x40f650
push 0
call eax
mov al, byte[ebp+0xc]
mov byte[0x4c6ec4], 0
jmp 0x40f622
xor al, al
mov byte[esp+0x14], al
mov byte[esp+0x13], al
test al, al
je 0x40f6d6
cmp byte[esp+0x11], 0
jne 0x40f679
mov edi, dword[0x4c53f4]
jmp 0x40f6a6
call dword[sym.imp.USER32.dll_GetForegroundWindow]
test eax, eax
je 0x40f68e
push 0
push eax
call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]
jmp 0x40f690
xor eax, eax
push eax
call dword[sym.imp.USER32.dll_GetKeyboardLayout]
mov edi, eax
push edi
xor eax, eax
call fcn.00411f10
add esp, 4
mov dword[esi], eax
cmp dword[esi], 0
je 0x40f6b2
mov byte[esp+0x13], 0
jmp 0x40f6da
push 0xa2
mov byte[esp+0x19], 0xa2
call dword[sym.imp.USER32.dll_GetAsyncKeyState]
mov edx, dword[ebp+0x1c]
mov dword[0x4c65dc], edx
shr eax, 0xf
and al, 1
mov byte[esp+0x17], al
jmp 0x40f6da
mov edi, dword[esp+0x24]
cmp byte[esp+0x12], 0
je 0x40f6f3
mov al, byte[ebp+0xc]
xor ecx, ecx
mov edx, ebx
call fcn.00411b10
mov byte[esp+0x20], al
jmp 0x40f6f8
mov byte[esp+0x20], 0
cmp byte[esp+0x11], 0
jne 0x40f71e
mov eax, dword[0x4c7f18]
cmp eax, 2
je 0x40f71e
cmp dword[0x4c65e8], 0
je 0x40f717
cmp eax, 1
jne 0x40f71e
mov byte[esp+0x11], 1
jmp 0x40f723
mov byte[esp+0x11], 0
cmp dword[ebp+8], 1
mov esi, dword[sym.imp.USER32.dll_keybd_event]
mov ebx, dword[esp+0x20]
je 0x40f812
cmp byte[esp+0x12], 0
je 0x40f75d
mov eax, dword[ebp+0x1c]
mov ecx, dword[esp+0x1c]
mov edx, dword[ebp+0x10]
push eax
mov eax, dword[ebp+0xc]
push ecx
push edx
push eax
push ebx
call fcn.00410920
add esp, 0x14
jmp 0x40f7f9
cmp byte[esp+0x14], 0
je 0x40f776
mov ecx, dword[esp+0x18]
cmp dword[ecx], 3
jne 0x40f776
mov edx, dword[ebp+0x1c]
mov dword[0x4c65e0], edx
mov eax, dword[ebp+0x1c]
mov ecx, dword[esp+0x1c]
mov edx, dword[ebp+0x10]
push eax
mov eax, dword[ebp+0xc]
push ecx
push edx
push eax
call esi
cmp byte[esp+0x13], 0
mov dword[0x4c65e0], 0
je 0x40f7f9
cmp dword[0x4c65dc], 0
mov byte[esp+0x13], 0
je 0x40f7c5
push edi
mov eax, 4
mov dword[0x4c65dc], 0
call fcn.00411f10
mov ecx, dword[esp+0x1c]
mov dword[ecx], eax
jmp 0x40f7f6
cmp byte[esp+0x17], 0
jne 0x40f7f9
movzx edx, byte[esp+0x15]
push edx
call dword[sym.imp.USER32.dll_GetAsyncKeyState]
mov ecx, 0x8000
and ax, cx
movzx eax, ax
neg eax
sbb eax, eax
add eax, 4
push edi
call fcn.00411f10
mov edx, dword[esp+0x1c]
mov dword[edx], eax
add esp, 4
cmp byte[esp+0x11], 0
je 0x40f812
mov eax, dword[ebp+0x10]
mov ecx, dword[ebp+0xc]
push eax
push ecx
xor dl, dl
call fcn.00411010
add esp, 8
cmp byte[ebp+0x18], 0
je 0x40f851
mov eax, 2
cmp dword[ebp+8], eax
jne 0x40f851
cmp dword[0x4c7f18], eax
jne 0x40f83e
mov edx, dword[0x4c28ec]
mov eax, dword[edx+0x68]
push eax
call fcn.00410e40
add esp, 4
jmp 0x40f85b
mov eax, dword[0x4c28ec]
mov eax, dword[eax+0x64]
push eax
call fcn.00410e40
add esp, 4
jmp 0x40f85b
cmp dword[ebp+8], 0
je 0x40f945
or dword[esp+0x1c], 2
cmp byte[esp+0x12], 0
je 0x40f889
mov ecx, dword[ebp+0x1c]
mov edx, dword[esp+0x1c]
mov eax, dword[ebp+0x10]
push ecx
mov ecx, dword[ebp+0xc]
push edx
push eax
push ecx
push ebx
call fcn.00410920
mov ebx, dword[ebp+0x10]
add esp, 0x14
jmp 0x40f915
cmp byte[esp+0x14], 0
je 0x40f8a1
mov edx, dword[esp+0x18]
cmp dword[edx], 3
jne 0x40f8a1
mov eax, dword[ebp+0x1c]
mov dword[0x4c65e4], eax
mov ecx, dword[ebp+0x1c]
mov edx, dword[esp+0x1c]
mov ebx, dword[ebp+0x10]
mov eax, dword[ebp+0xc]
push ecx
push edx
push ebx
push eax
call esi
xor eax, eax
mov dword[0x4c65e4], eax
cmp byte[esp+0x13], al
je 0x40f915
cmp dword[0x4c65dc], eax
je 0x40f8e1
mov dword[0x4c65dc], eax
push edi
mov eax, 4
call fcn.00411f10
mov ecx, dword[esp+0x1c]
mov dword[ecx], eax
jmp 0x40f912
cmp byte[esp+0x17], al
je 0x40f915
movzx edx, byte[esp+0x15]
push edx
call dword[sym.imp.USER32.dll_GetAsyncKeyState]
mov ecx, 0x8000
test cx, ax
mov eax, 0
setne al
push edi
add eax, 3
call fcn.00411f10
mov edx, dword[esp+0x1c]
mov dword[edx], eax
add esp, 4
mov eax, dword[esp+0x18]
cmp dword[eax], 0
je 0x40f92f
mov ecx, 0x138
cmp bx, cx
jne 0x40f92f
and byte[0x4c53d7], 0xfe
cmp byte[esp+0x11], 0
je 0x40f945
mov edx, dword[ebp+0xc]
push ebx
push edx
mov dl, 1
call fcn.00411010
add esp, 8
cmp byte[esp+0x16], 0
je 0x40f98e
test byte[0x4c9b80], 1
jne 0x40f97a
or dword[0x4c9b80], 1
push str.BlockInput
push str.user32
call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]
push eax
call dword[sym.imp.KERNEL32.dll_GetProcAddress]
mov dword[0x4c9b7c], eax
jmp 0x40f97f
mov eax, dword[0x4c9b7c]
test eax, eax
je 0x40f987
push 1
call eax
mov byte[0x4c6ec4], 1
cmp byte[ebp+0x18], 0
je 0x40f9c7
cmp dword[0x4c7f18], 2
jne 0x40f9b5
mov eax, dword[0x4c28ec]
mov eax, dword[eax+0x60]
push eax
call fcn.00410e40
add esp, 4
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret
mov ecx, dword[0x4c28ec]
mov eax, dword[ecx+0x5c]
push eax
call fcn.00410e40
add esp, 4
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f