---
layout: post
title:  "fcn.006833e0 @ c92f0480e2fbc88393d2c65c08a235e0"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.006833e0
- **Origin (md5):** c92f0480e2fbc88393d2c65c08a235e0
- **VirusTotal:** [virustotal.com/gui/file/c92f0480e2fbc88393d2c65c08a235e0][virustotal_ref]

# Code Tags
<span class="tag" id="SOCKET">SOCKET</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.006833e0@c92f0480e2fbc88393d2c65c08a235e0">fcn.006833e0</a><br>@c92f0480e2fbc88393d2c65c08a235e0</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
push edi
push esi
push ebx
sub esp, 0x3c
mov ebx, dword[esp+0x54]
mov ebp, dword[esp+0x58]
mov eax, dword[esp+0x64]
mov esi, dword[esp+0x50]
lea edi, [ebx+0x20]
mov dword[ebx+0x20], 0
mov dword[ebx+4], 3
mov dword[ebx+0x44], ebp
mov dword[ebx+0x3c], eax
mov dword[edi+4], 0
mov dword[edi+8], 0
mov dword[edi+0xc], 0
mov dword[edi+0x10], 0
test byte[ebp+0x2e], 0x10
je off.b144
mov dword[esp+0xc], 0
mov dword[esp+8], 0
mov dword[esp+4], 0
mov dword[esp], 0
call dword[sym.imp.KERNEL32.dll_CreateEventA]
sub esp, 0x10
test eax, eax
mov dword[ebx+0x54], eax
je off.b1049
or eax, 1
mov dword[ebx+0x58], 0xffffffff
mov dword[ebx+0x30], eax
lea eax, [esp+0x2c]
mov dword[esp+0x18], 0
mov dword[esp+0x14], edi
mov dword[esp+0x10], 0
mov dword[esp+0xc], eax
mov eax, dword[esp+0x60]
mov dword[esp+8], eax
mov eax, dword[esp+0x5c]
mov dword[esp+4], eax
mov eax, dword[ebp+0x90]
mov dword[esp], eax
call dword[sym.imp.WS2_32.dll_WSASend]
sub esp, 0x1c
test eax, eax
jne off.b352
mov ecx, dword[ebp+0x2c]
test ecx, 0x40000
je off.b736
mov eax, dword[ebp+0x40]
mov dword[ebx+0x34], 0
add dword[ebp+0x3c], 1
add dword[ebp+0x88], 1
mov edx, eax
lea edi, [eax+1]
test edx, edx
mov eax, edi
mov dword[ebp+0x40], edi
jne off.b580
test cl, 1
jne off.b515
test cl, 0x40
je off.b558
nop
lea eax, [esi+0x10]
mov dword[ebx+8], eax
mov edx, dword[esi+0x14]
lea eax, [ebx+8]
mov dword[ebx+0xc], edx
mov dword[edx], eax
mov dword[esi+0x14], eax
mov eax, dword[esi+0x28]
mov dword[ebx+0x38], 0
test eax, eax
je off.b499
mov edx, dword[eax+0x38]
mov dword[ebx+0x38], edx
mov dword[eax+0x38], ebx
mov dword[esi+0x28], ebx
add esp, 0x3c
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret
call dword[sym.imp.KERNEL32.dll_GetLastError]
cmp eax, 0x3e5
je off.b736
mov eax, dword[ebp+0x40]
mov dword[ebx+0x34], 0
add dword[ebp+0x3c], 1
add dword[ebp+0x88], 1
mov edi, eax
lea ecx, [eax+1]
test edi, edi
mov eax, ecx
mov dword[ebp+0x40], ecx
jne off.b689
mov ecx, dword[ebp+0x2c]
test cl, 1
jne off.b624
test cl, 0x40
je off.b667
lea esi, [esi]
lea eax, [esi+0x10]
mov edi, dword[sym.imp.WS2_32.dll_WSAGetLastError]
mov dword[ebx+8], eax
mov edx, dword[esi+0x14]
lea eax, [ebx+8]
mov dword[ebx+0xc], edx
mov dword[edx], eax
mov dword[esi+0x14], eax
call edi
test eax, eax
jle off.b949
call edi
movzx eax, ax
or eax, 0x80070000
mov dword[ebx+0x20], eax
mov eax, dword[esi+0x28]
mov dword[ebx+0x38], 0
test eax, eax
jne off.b326
mov dword[ebx+0x38], ebx
mov dword[esi+0x28], ebx
add esp, 0x3c
pop ebx
xor eax, eax
pop esi
pop edi
pop ebp
ret
mov dword[esp+8], 0x37a
mov dword[esp+4], str.src_win_tcp.c_
mov dword[esp], str.((((handle)))-_flags_&_UV__HANDLE_CLOSING)_==_0_
call fcn.006b2490
mov ecx, dword[ebp+0x2c]
test cl, 0x40
jne off.b1072
mov eax, dword[ebp+0x40]
mov edi, ecx
or edi, 0x40
and ecx, 0x20
mov dword[ebp+0x2c], edi
je off.b578
mov edx, dword[ebp+4]
add dword[edx+4], 1
mov edi, eax
test edi, edi
jg off.b288
mov dword[esp+8], 0x37a
mov dword[esp+4], str.src_win_tcp.c_
mov dword[esp], str.((handle))-_activecnt___0_
call fcn.006b2490
jmp off.b288
mov dword[esp+8], 0x38f
mov dword[esp+4], str.src_win_tcp.c_
mov dword[esp], str.((((handle)))-_flags_&_UV__HANDLE_CLOSING)_==_0_
call fcn.006b2490
mov ecx, dword[ebp+0x2c]
test cl, 0x40
jne off.b1088
mov eax, dword[ebp+0x40]
mov edi, ecx
or edi, 0x40
and ecx, 0x20
mov dword[ebp+0x2c], edi
je off.b687
mov edx, dword[ebp+4]
add dword[edx+4], 1
mov ecx, eax
test ecx, ecx
jg off.b432
mov dword[esp+8], 0x38f
mov dword[esp+4], str.src_win_tcp.c_
mov dword[esp], str.((handle))-_activecnt___0_
call fcn.006b2490
jmp off.b432
mov eax, dword[esp+0x60]
mov dword[esp+4], eax
mov eax, dword[esp+0x5c]
mov dword[esp], eax
call fcn.0066cac0
mov dword[ebx+0x34], eax
mov eax, dword[ebp+0x40]
add dword[ebp+0x3c], 1
add dword[ebp+0x88], 1
mov edi, eax
lea ecx, [eax+1]
test edi, edi
mov eax, ecx
mov dword[ebp+0x40], ecx
jne off.b826
mov ecx, dword[ebp+0x2c]
test cl, 1
jne off.b960
test cl, 0x40
jne off.b837
mov edi, ecx
or edi, 0x40
and ecx, 0x20
mov dword[ebp+0x2c], edi
je off.b824
mov ecx, dword[ebp+4]
add dword[ecx+4], 1
mov ecx, eax
test ecx, ecx
jle off.b1008
mov ecx, dword[ebp+0x2c]
lea eax, [esi+0x10]
mov dword[ebx+8], eax
mov edi, dword[esi+0x14]
lea eax, [ebx+8]
mov dword[ebx+0xc], edi
mov dword[edi], eax
mov dword[esi+0x14], eax
mov eax, dword[ebx+0x34]
add dword[ebp+0x30], eax
and ecx, 0x100000
je off.b338
mov dword[esp+0x14], 0xc
mov dword[esp+0x10], 0xffffffff
mov dword[esp+0xc], ebx
mov dword[esp+8], 0x682530
mov eax, dword[ebx+0x54]
mov dword[esp+4], eax
lea eax, [ebx+0x58]
mov dword[esp], eax
call dword[sym.imp.KERNEL32.dll_RegisterWaitForSingleObject]
sub esp, 0x18
test eax, eax
jne off.b338
mov edi, dword[sym.imp.KERNEL32.dll_GetLastError]
call edi
test eax, eax
jg off.b468
call edi
jmp off.b478
mov dword[esp+8], 0x381
mov dword[esp+4], str.src_win_tcp.c_
mov dword[esp], str.((((handle)))-_flags_&_UV__HANDLE_CLOSING)_==_0_
call fcn.006b2490
mov ecx, dword[ebp+0x2c]
test cl, 0x40
je off.b1041
mov ecx, dword[ebp+0x40]
jmp off.b826
mov dword[esp+8], 0x381
mov dword[esp+4], str.src_win_tcp.c_
mov dword[esp], str.((handle))-_activecnt___0_
call fcn.006b2490
jmp off.b834
mov eax, dword[ebp+0x40]
jmp off.b804
call dword[sym.imp.KERNEL32.dll_GetLastError]
mov dword[esp+4], str.CreateEvent_
mov dword[esp], eax
call fcn.0066e2e0
nop
mov edi, dword[ebp+0x40]
jmp off.b580
mov ecx, dword[ebp+0x40]
jmp off.b689

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/c92f0480e2fbc88393d2c65c08a235e0