---
layout: post
title:  "fcn.00474f00 @ 4fe6510221c33bf023f6abed461fc13f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.00474f00
- **Origin (md5):** 4fe6510221c33bf023f6abed461fc13f
- **VirusTotal:** [virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f][virustotal_ref]

# Code Tags
<span class="tag" id="FILE">FILE</span>
<span class="tag" id="LINKING">LINKING</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.00474f00@4fe6510221c33bf023f6abed461fc13f">fcn.00474f00</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

sub esp, 0x48
push ebx
mov ebx, dword[esp+0x68]
push ebp
mov ebp, dword[esp+0x54]
push esi
mov esi, dword[esp+0x64]
push edi
mov edi, dword[esp+0x6c]
mov dword[esp+0x14], 0
mov dword[esi], 0xffffffff
test ebx, ebx
je off.b44
mov byte[ebx], 0
cmp word[ebp], 0
je off.b405
push 6
push str.hicon:
push ebp
mov byte[esp+0x1f], 0
mov byte[esp+0x1e], 0
call fcn.0048d597
add esp, 0xc
test eax, eax
je off.b113
test edi, edi
jne off.b226
push 8
push str.hbitmap:
push ebp
call fcn.0048d597
add esp, 0xc
test eax, eax
jne off.b226
cmp word[ebp+0xa], 0x3a
jne off.b131
mov dword[esi], 1
add ebp, 0xc
jmp off.b140
mov dword[esi], 0
add ebp, 0x10
cmp word[ebp], 0x2a
mov dword[esp+0x5c], ebp
sete al
mov byte[esp+0x13], 1
mov byte[esp+0x12], al
test al, al
je off.b179
add ebp, 2
mov dword[esp+0x5c], ebp
test ebx, ebx
je off.b179
mov byte[ebx], 1
mov eax, ebp
call fcn.0040d200
test al, al
je off.b205
push 0x10
push 0
push ebp
call fcn.0048e7e7
add esp, 0xc
jmp off.b214
push ebp
call fcn.0048dff1
add esp, 4
mov dword[esp+0x14], eax
test eax, eax
je off.b405
push 0x2e
push ebp
call fcn.0048e91d
mov ebx, eax
add esp, 8
test ebx, ebx
je off.b246
add ebx, 2
mov eax, dword[esp+0x14]
test eax, eax
jne off.b419
cmp edi, 1
ja off.b361
test ebx, ebx
je off.b419
push 0x4a9bb8
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b361
push 0x4a9bc0
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b361
push 0x4bcfe4
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b361
push 0x4bcfec
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b361
push 0x4bcff4
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
jne off.b415
mov eax, dword[esp+0x64]
mov ecx, dword[esp+0x60]
push eax
push ecx
push edi
push ebp
mov byte[esp+0x21], 1
mov dword[esi], 1
call fcn.00475640
add esp, 0x10
mov dword[esp+0x14], eax
cmp eax, 2
jae off.b534
xor eax, eax
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x48
ret
mov eax, dword[esp+0x14]
mov byte[esp+0x11], 0
test edi, edi
jle off.b436
mov dword[esi], 1
jmp off.b534
test ebx, ebx
je off.b534
push 0x4a9bb0
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
jne off.b466
mov dword[esi], 1
jmp off.b530
push 0x4bcffc
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b524
push 0x4bd004
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b524
push 0x4bd00c
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
jne off.b530
mov dword[esi], eax
jmp off.b530
mov dword[esi], 2
mov eax, dword[esp+0x14]
mov edx, dword[esp+0x60]
mov ecx, dword[esp+0x64]
cmp edx, 0xffffffff
je off.b552
cmp ecx, 0xffffffff
jne off.b577
xor esi, esi
cmp edx, esi
je off.b562
cmp ecx, esi
jne off.b577
mov dword[esp+0x64], esi
mov dword[esp+0x60], esi
mov byte[esp+0x10], 0
jmp off.b599
cmp edx, 0xffffffff
je off.b594
cmp ecx, 0xffffffff
je off.b594
mov byte[esp+0x10], 0
jmp off.b599
mov byte[esp+0x10], 1
mov esi, dword[sym.imp.KERNEL32.dll_LoadLibraryW]
xor edi, edi
cmp byte[esp+0x70], 0
je off.b636
push str.gdiplus
call esi
mov edi, eax
mov eax, dword[esp+0x14]
test edi, edi
jne off.b636
mov byte[esp+0x70], 0
test eax, eax
jne off.b798
mov edx, dword[esp+0x68]
mov edx, dword[edx]
cmp edx, 0xffffffff
jle off.b798
cmp byte[esp+0x70], al
jne off.b798
cmp byte[esp+0x10], al
je off.b679
xor ecx, ecx
jmp off.b687
mov eax, dword[esp+0x60]
mov ecx, dword[esp+0x64]
push 0x2010
push ecx
push eax
push edx
push ebp
push 0
call dword[sym.imp.USER32.dll_LoadImageW]
mov dword[esp+0x14], eax
test eax, eax
je off.b727
cmp byte[esp+0x10], 0
jne off.b798
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x48
ret
push ebp
call dword[sym.imp.KERNEL32.dll_GetFileAttributesW]
cmp eax, 0xffffffff
je off.b405
cmp dword[esp+0x6c], 0
jle off.b794
mov eax, dword[esp+0x64]
mov ecx, dword[esp+0x60]
mov edx, dword[esp+0x6c]
push eax
push ecx
push edx
push ebp
call fcn.00475640
add esp, 0x10
mov dword[esp+0x14], eax
cmp eax, 2
jb off.b405
mov byte[esp+0x11], 1
jmp off.b798
mov eax, dword[esp+0x14]
mov dword[esp+0x18], 0
test eax, eax
jne off.b1091
cmp byte[esp+0x70], 0
mov eax, dword[esp+0x68]
mov dword[eax], 0
jne off.b889
test ebx, ebx
je off.b889
push 0x4bd024
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b902
push str.jpeg
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b902
push 0x4bd038
push ebx
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b902
test edi, edi
jne off.b910
push str.gdiplus
call esi
mov edi, eax
test edi, edi
je off.b1288
mov esi, dword[sym.imp.KERNEL32.dll_GetProcAddress]
push str.GdiplusStartup
push edi
call esi
push str.GdiplusShutdown
push edi
mov ebp, eax
call esi
push str.GdipCreateBitmapFromFile
push edi
mov dword[esp+0x30], eax
call esi
push str.GdipCreateHBITMAPFromBitmap
push edi
mov ebx, eax
call esi
push str.GdipDisposeImage
push edi
mov dword[esp+0x28], eax
call esi
mov esi, eax
xor eax, eax
mov dword[esp+0x2c], 1
mov dword[esp+0x30], eax
mov dword[esp+0x34], eax
mov dword[esp+0x38], eax
cmp ebp, eax
je off.b1076
push eax
lea ecx, [esp+0x30]
push ecx
lea edx, [esp+0x2c]
push edx
call ebp
test eax, eax
jne off.b1076
mov ecx, dword[esp+0x5c]
lea eax, [esp+0x1c]
push eax
push ecx
call ebx
test eax, eax
jne off.b1067
mov eax, dword[esp+0x1c]
push 0xff000000
lea edx, [esp+0x18]
push edx
push eax
call dword[esp+0x2c]
test eax, eax
je off.b1060
mov dword[esp+0x14], 0
mov ecx, dword[esp+0x1c]
push ecx
call esi
mov edx, dword[esp+0x24]
push edx
call dword[esp+0x2c]
push edi
call dword[sym.imp.KERNEL32.dll_FreeLibrary]
mov eax, dword[esp+0x14]
mov ebp, dword[esp+0x5c]
cmp byte[esp+0x10], 0
je off.b1640
mov esi, dword[esp+0x68]
cmp dword[esi], 0
je off.b1135
lea ecx, [esp+0x2c]
push ecx
push eax
call dword[sym.imp.USER32.dll_GetIconInfo]
test eax, eax
je off.b1613
mov eax, dword[esp+0x38]
lea edx, [esp+0x40]
push edx
push 0x18
push eax
call dword[sym.imp.GDI32.dll_GetObjectW]
mov edi, dword[esp+0x64]
cmp edi, 0xffffffff
jne off.b1572
cmp dword[esp+0x44], 0
je off.b1194
fild dword[esp+0x48]
fidiv dword[esp+0x44]
fimul dword[esp+0x60]
fadd qword[0x4bd488]
call fcn.0049b670
mov edi, eax
mov ebx, dword[esp+0x60]
cmp dword[esi], 0
je off.b1634
mov eax, dword[esp+0x3c]
mov esi, dword[sym.imp.GDI32.dll_DeleteObject]
push eax
call esi
mov ecx, dword[esp+0x38]
push ecx
call esi
cmp byte[esp+0x11], 0
jne off.b1634
cmp byte[esp+0x13], 0
jne off.b1634
mov edx, dword[esp+0x14]
push edx
call dword[sym.imp.USER32.dll_DestroyIcon]
mov eax, dword[esp+0x68]
mov ecx, dword[eax]
push 0x10
push edi
push ebx
push ecx
push ebp
push 0
call dword[sym.imp.USER32.dll_LoadImageW]
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x48
ret
push 0
push 0
push 3
push 0
push 0
push 0x80000000
push ebp
call dword[sym.imp.KERNEL32.dll_CreateFileW]
mov edi, eax
cmp edi, 0xffffffff
je off.b405
push 0
push edi
call dword[sym.imp.KERNEL32.dll_GetFileSize]
push eax
push 2
mov dword[esp+0x64], eax
call dword[sym.imp.KERNEL32.dll_GlobalAlloc]
mov esi, eax
test esi, esi
jne off.b1366
push edi
call dword[sym.imp.KERNEL32.dll_CloseHandle]
xor eax, eax
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x48
ret
push esi
call dword[sym.imp.KERNEL32.dll_GlobalLock]
test eax, eax
jne off.b1401
push edi
call dword[sym.imp.KERNEL32.dll_CloseHandle]
push esi
call dword[sym.imp.KERNEL32.dll_GlobalFree]
xor eax, eax
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x48
ret
mov edx, dword[esp+0x5c]
push 0
lea ecx, [esp+0x60]
push ecx
push edx
push eax
push edi
call dword[sym.imp.KERNEL32.dll_ReadFile]
push esi
call dword[sym.imp.KERNEL32.dll_GlobalUnlock]
push edi
call dword[sym.imp.KERNEL32.dll_CloseHandle]
lea eax, [esp+0x1c]
push eax
push 0
push esi
call dword[sym.imp.ole32.dll_CreateStreamOnHGlobal]
test eax, eax
js off.b1384
mov eax, dword[esp+0x1c]
test eax, eax
je off.b1384
lea ecx, [esp+0x18]
push ecx
push 0x49e7c8
push 0
push 0
push eax
call dword[sym.imp.OLEAUT32.dll_OleCreatePictureIndirect]
test eax, eax
jns off.b1494
mov dword[esp+0x18], 0
mov eax, dword[esp+0x1c]
mov edx, dword[eax]
push eax
mov eax, dword[edx+8]
call eax
push esi
call dword[sym.imp.KERNEL32.dll_GlobalFree]
mov eax, dword[esp+0x18]
test eax, eax
je off.b405
mov ecx, dword[eax]
lea edx, [esp+0x14]
push edx
push eax
mov eax, dword[ecx+0xc]
call eax
mov eax, dword[esp+0x14]
test eax, eax
jne off.b1091
mov eax, dword[esp+0x18]
mov ecx, dword[eax]
mov edx, dword[ecx+8]
push eax
call edx
xor eax, eax
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x48
ret
cmp dword[esp+0x48], 0
je off.b1194
fild dword[esp+0x44]
fidiv dword[esp+0x48]
fimul dword[esp+0x64]
fadd qword[0x4bd488]
call fcn.0049b670
mov ebx, eax
jmp off.b1198
mov edx, dword[esp+0x14]
push edx
call dword[sym.imp.USER32.dll_DestroyIcon]
xor eax, eax
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x48
ret
mov eax, dword[esp+0x14]
jmp off.b1648
mov edi, dword[esp+0x64]
mov ebx, dword[esp+0x60]
cmp dword[esp+0x18], 0
je off.b1702
test ebx, ebx
jne off.b1668
test edi, edi
jne off.b1668
lea ecx, [ebx+4]
jmp off.b1670
xor ecx, ecx
push ecx
push edi
push ebx
push 0
push eax
call dword[sym.imp.USER32.dll_CopyImage]
mov esi, eax
mov eax, dword[esp+0x18]
mov ecx, dword[eax]
mov edx, dword[ecx+8]
push eax
call edx
mov ebp, dword[esp+0x74]
jmp off.b1779
test ebx, ebx
jne off.b1733
test edi, edi
jne off.b1733
cmp byte[esp+0x12], 0
je off.b1795
mov ebp, dword[esp+0x74]
test ebp, ebp
je off.b1737
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x48
ret
mov ebp, dword[esp+0x74]
cmp byte[esp+0x12], 0
je off.b1755
mov ecx, ebp
neg ecx
sbb ecx, ecx
and ecx, 4
jmp off.b1760
mov ecx, 0xc
push ecx
mov ecx, dword[esp+0x6c]
mov edx, dword[ecx]
push edi
push ebx
push edx
push eax
call dword[sym.imp.USER32.dll_CopyImage]
mov esi, eax
cmp dword[esp+0x14], esi
je off.b1793
test ebp, ebp
je off.b1793
mov byte[ebp], 0
mov eax, esi
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x48
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f