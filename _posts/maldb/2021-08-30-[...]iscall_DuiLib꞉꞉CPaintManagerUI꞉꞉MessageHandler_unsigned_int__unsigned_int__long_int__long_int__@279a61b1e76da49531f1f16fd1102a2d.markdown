---
layout: post
title:  "[...]iscall_DuiLib꞉꞉CPaintManagerUI꞉꞉MessageHandler_unsigned_int__unsigned_int__long_int__long_int__ @ 279a61b1e76da49531f1f16fd1102a2d"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** [...]iscall\_DuiLib꞉꞉CPaintManagerUI꞉꞉MessageHandler\_unsigned\_int\_\_unsigned\_int\_\_long\_int\_\_long\_int\_\_
- **Origin (md5):** 279a61b1e76da49531f1f16fd1102a2d
- **VirusTotal:** [virustotal.com/gui/file/279a61b1e76da49531f1f16fd1102a2d][virustotal_ref]

# Code Tags
<span class="tag" id="SOCKET">SOCKET</span>
<span class="tag" id="SCREEN">SCREEN</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [-134.81285095214844, -160.5274658203125, '<b><a href="/report/sym.Install.exe_public:_bool___thiscall_DuiLib::CPaintManagerUI::MessageHandler_unsigned_int__unsigned_int__long_int__long_int__@279a61b1e76da49531f1f16fd1102a2d">sym.Install.exe_public:_bool___thiscall_DuiLib::CPaintManagerUI::MessageHandler_unsigned_int__unsigned_int__long_int__long_int__</a><br>@279a61b1e76da49531f1f16fd1102a2d</b><br>', 'point { fill-color: #e0440e; }'],
[134.81297302246094, 160.5272216796875, '<b><a href="/report/sym.tpop2.exe_public:_bool___thiscall_DuiLib::CPaintManagerUI::MessageHandler_unsigned_int__unsigned_int__long_int__long_int__@289859175c221b107317af7727d26c17">sym.tpop2.exe_public:_bool___thiscall_DuiLib::CPaintManagerUI::MessageHandler_unsigned_int__unsigned_int__long_int__long_int__</a><br>@289859175c221b107317af7727d26c17</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
sub esp, 0x104
lea ebp, [esp-4]
mov eax, dword[0x53ebd0]
xor eax, ebp
mov dword[ebp+0x104], eax
push 0x38
mov eax, 0x4f3c37
call fcn.00498de5
mov eax, dword[ebp+0x118]
mov esi, dword[ebp+0x114]
mov ebx, ecx
cmp dword[ebx], 0
mov dword[ebp-0x14], eax
mov eax, dword[ebp+0x11c]
mov dword[ebp-0x30], eax
je off.b4874
lea ecx, [ebx+0x100]
mov dword[ebp-0x2c], ecx
jmp off.b205
mov ecx, dword[ebp-0x2c]
push 0
call sym
mov eax, dword[edi+0x108]
test eax, eax
je off.b129
lea ecx, [eax+0x34]
call sym
test al, al
je off.b129
mov ecx, dword[edi+0x108]
push edi
add ecx, 0x34
call sym
and dword[ebp-0x10], 0
lea ecx, [ebx+0xb8]
call method
test eax, eax
jle off.b188
push dword[ebp-0x10]
lea ecx, [ebx+0xb8]
call sym
mov edx, dword[eax]
push edi
mov ecx, eax
call dword[edx]
inc dword[ebp-0x10]
lea ecx, [ebx+0xb8]
call method
cmp dword[ebp-0x10], eax
jl off.b148
mov ecx, edi
call fcn.004633c0
push edi
call fcn.0049066b
pop ecx
mov ecx, dword[ebp-0x2c]
push 0
call sym
mov edi, eax
test edi, edi
jne off.b82
and dword[ebp-0x10], eax
lea ecx, [ebx+0xdc]
call method
mov edi, dword[ebp+0x110]
test eax, eax
jle off.b308
push dword[ebp-0x10]
lea ecx, [ebx+0xdc]
mov byte[ebp-0x25], 0
call sym
mov edx, dword[eax]
lea ecx, [ebp-0x25]
push ecx
push dword[ebp-0x14]
mov ecx, eax
push esi
push edi
call dword[edx]
cmp byte[ebp-0x25], 0
jne off.b442
inc dword[ebp-0x10]
lea ecx, [ebx+0xdc]
call method
cmp dword[ebp-0x10], eax
jl off.b246
mov eax, 0x113
cmp edi, eax
ja off.b2697
je off.b2541
cmp edi, 0x4e
ja off.b2060
je off.b2029
sub edi, 5
je off.b1940
sub edi, 0xa
je off.b827
dec edi
je off.b662
sub edi, 4
je off.b648
sub edi, 0xc
je off.b454
sub edi, 4
jne off.b4737
mov eax, dword[ebx+0x6c]
mov ecx, dword[ebp-0x14]
test eax, eax
jle off.b403
mov dword[ecx+0x18], eax
mov eax, dword[ebx+0x70]
test eax, eax
jle off.b413
mov dword[ecx+0x1c], eax
mov eax, dword[ebx+0x74]
test eax, eax
jle off.b423
mov dword[ecx+0x20], eax
mov eax, dword[ebx+0x78]
test eax, eax
jle off.b4737
mov dword[ecx+0x24], eax
jmp off.b4737
mov ecx, dword[ebp-0x30]
mov dword[ecx], eax
mov al, 1
jmp off.b4876
cmp word[ebp-0x14], 1
jne off.b4737
cmp byte[ebx+0xb6], 0
jne off.b447
and dword[ebp-0x34], 0
xor eax, eax
lea edi, [ebp-0x30]
stosd dword
lea eax, [ebp-0x34]
push eax
call dword[sym.imp.USER32.dll_GetCursorPos]
lea eax, [ebp-0x34]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_ScreenToClient]
push dword[ebp-0x30]
mov ecx, ebx
push dword[ebp-0x34]
call sym
mov dword[ebp-0x10], eax
test eax, eax
je off.b4737
mov ecx, eax
mov eax, dword[ecx]
call dword[eax+0x14]
test al, 2
je off.b4737
xor eax, eax
push 7
pop ecx
lea edi, [ebp+0xa8]
rep stosd
mov eax, dword[ebp-0x14]
mov dword[ebp+0xc0], eax
mov eax, dword[ebp-0x34]
mov dword[ebp+0xb0], eax
mov eax, dword[ebp-0x30]
mov dword[ebp+0xa4], 0x17
mov dword[ebp+0xbc], esi
mov dword[ebp+0xb4], eax
call fcn.00463375
mov word[ebp+0xba], ax
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebp-0x10]
lea edx, [ebp+0xa4]
mov dword[ebp+0xac], eax
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
jmp off.b447
mov eax, dword[ebp-0x30]
mov dword[eax], 1
jmp off.b447
and dword[ebp+0xe4], 0
push 7
xor eax, eax
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebx+0x64]
mov dword[ebp+0xf0], eax
mov eax, dword[ebx+0x68]
mov dword[ebp+0xf4], eax
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebx+0x58]
mov dword[ebp+0xec], eax
test ecx, ecx
je off.b750
lea edx, [ebp+0xe4]
mov dword[ebp+0xe4], 0xa
mov dword[ebp+0xe8], ecx
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
mov ecx, dword[ebx+0x5c]
test ecx, ecx
je off.b788
lea edx, [ebp+0xe4]
mov dword[ebp+0xe4], 0xe
mov dword[ebp+0xe8], ecx
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
push 0
mov ecx, ebx
call sym
push 4
push dword[ebx]
call dword[sym.imp.USER32.dll_GetWindow]
test eax, eax
je off.b4737
push eax
call dword[sym.imp.USER32.dll_SetFocus]
jmp off.b4737
xor eax, eax
xor esi, esi
mov dword[ebp-0x44], esi
lea edi, [ebp-0x40]
stosd dword
stosd dword
stosd dword
push esi
lea eax, [ebp-0x44]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_GetUpdateRect]
test eax, eax
je off.b447
cmp dword[ebx+0x50], esi
jne off.b925
push 0x3c
lea eax, [ebp+0x88]
push esi
push eax
mov dword[ebp+0x84], esi
call fcn.00490b70
add esp, 0xc
lea eax, [ebp+0x84]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_BeginPaint]
lea eax, [ebp+0x84]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_EndPaint]
jmp off.b447
cmp byte[ebx+0xb1], 0
je off.b1181
and dword[ebp-0x24], esi
xor eax, eax
lea edi, [ebp-0x20]
stosd dword
stosd dword
stosd dword
lea eax, [ebp-0x24]
push eax
push dword[ebx]
mov byte[ebx+0xb1], 0
call dword[sym.imp.USER32.dll_GetClientRect]
lea eax, [ebp-0x24]
push eax
call dword[sym.imp.USER32.dll_IsRectEmpty]
test eax, eax
jne off.b1181
mov ecx, dword[ebx+0x50]
call sym
mov ecx, dword[ebx+0x50]
test al, al
mov eax, dword[ecx]
je off.b1122
sub esp, 0x10
mov edi, esp
lea esi, [ebp-0x24]
movsd dword
movsd dword
movsd dword
movsd dword
call dword[eax+0x34]
mov eax, dword[ebx+0xc]
mov esi, dword[sym.imp.GDI32.dll_DeleteDC]
test eax, eax
je off.b1034
push eax
call esi
mov eax, dword[ebx+0x10]
xor edi, edi
cmp eax, edi
je off.b1046
push eax
call esi
mov eax, dword[ebx+0x14]
mov esi, dword[sym.imp.GDI32.dll_DeleteObject]
cmp eax, edi
je off.b1062
push eax
call esi
mov eax, dword[ebx+0x18]
cmp eax, edi
je off.b1072
push eax
call esi
mov dword[ebx+0xc], edi
mov dword[ebx+0x10], edi
mov dword[ebx+0x14], edi
mov dword[ebx+0x18], edi
jmp off.b1147
mov ecx, dword[ebp-0x10]
mov eax, dword[ecx]
mov dword[ebp-0x2c], eax
call dword[eax+0x30]
mov ecx, dword[ebp-0x10]
sub esp, 0x10
mov esi, eax
mov eax, dword[ebp-0x2c]
mov edi, esp
movsd dword
movsd dword
movsd dword
movsd dword
call dword[eax+0x34]
mov ecx, dword[ebx+0x50]
mov eax, dword[ecx]
push reloc.WS2_32.dll_accept
push 0
push sym.Install.exe_private:_static_class_DuiLib::CControlUI____stdcall_DuiLib::CPaintManagerUI::__FindControlFromUpdate_class_DuiLib::CControlUI___void__
call dword[eax+0xfc]
mov dword[ebp-0x10], eax
test eax, eax
jne off.b1086
lea eax, [ebx+0xb0]
cmp byte[eax], 0
je off.b1181
mov byte[eax], 0
xor eax, eax
push eax
push eax
push eax
push str.windowinit
push dword[ebx+0x50]
mov ecx, ebx
call sym
cmp byte[ebx+0xb2], 0
je off.b1199
push 1
mov ecx, ebx
call sym
cmp byte[ebx+0xb3], 0
je off.b1276
cmp dword[ebx+0x14], 0
jne off.b1276
and dword[ebp-0x24], 0
xor eax, eax
lea edi, [ebp-0x20]
stosd dword
stosd dword
stosd dword
lea eax, [ebp-0x24]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_GetClientRect]
push dword[ebx+8]
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
mov dword[ebx+0xc], eax
mov eax, dword[ebp-0x18]
sub eax, dword[ebp-0x20]
push eax
mov eax, dword[ebp-0x1c]
sub eax, dword[ebp-0x24]
push eax
push dword[ebx+8]
call dword[sym.imp.GDI32.dll_CreateCompatibleBitmap]
mov dword[ebx+0x14], eax
and dword[ebp+0xc4], 0
push 0x3c
lea eax, [ebp+0xc8]
push 0
push eax
call fcn.00490b70
add esp, 0xc
lea eax, [ebp+0xc4]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_BeginPaint]
cmp byte[ebx+0xb3], 0
je off.b1844
push dword[ebx+0x14]
mov esi, dword[sym.imp.GDI32.dll_SelectObject]
push dword[ebx+0xc]
call esi
push dword[ebx+0xc]
mov dword[ebp-0x30], eax
call dword[sym.imp.GDI32.dll_SaveDC]
cmp byte[ebx+0xb4], 0
mov dword[ebp-0x2c], eax
je off.b1593
mov eax, dword[ebx+0x18]
test eax, eax
jne off.b1520
and dword[ebp-0x24], eax
lea edi, [ebp-0x20]
stosd dword
stosd dword
stosd dword
lea eax, [ebp-0x24]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_GetClientRect]
push dword[ebx+8]
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
mov dword[ebx+0x10], eax
mov eax, dword[ebp-0x18]
sub eax, dword[ebp-0x20]
push eax
mov eax, dword[ebp-0x1c]
sub eax, dword[ebp-0x24]
push eax
push dword[ebx+8]
call dword[sym.imp.GDI32.dll_CreateCompatibleBitmap]
push eax
push dword[ebx+0x10]
mov dword[ebx+0x18], eax
call esi
mov eax, dword[ebp+0xd8]
sub eax, dword[ebp+0xd0]
push 0xcc0020
push dword[ebp+0xd0]
push dword[ebp+0xcc]
push dword[ebp+0xc4]
push eax
mov eax, dword[ebp+0xd4]
sub eax, dword[ebp+0xcc]
push eax
push dword[ebp+0xd0]
push dword[ebp+0xcc]
push dword[ebx+0x10]
call dword[sym.imp.GDI32.dll_BitBlt]
jmp off.b1526
push eax
push dword[ebx+0x10]
call esi
mov eax, dword[ebp+0xd8]
sub eax, dword[ebp+0xd0]
push 0xcc0020
push dword[ebp+0xd0]
push dword[ebp+0xcc]
push dword[ebx+0x10]
push eax
mov eax, dword[ebp+0xd4]
sub eax, dword[ebp+0xcc]
push eax
push dword[ebp+0xd0]
push dword[ebp+0xcc]
push dword[ebx+0xc]
call dword[sym.imp.GDI32.dll_BitBlt]
mov ecx, dword[ebx+0x50]
mov eax, dword[ecx]
lea edx, [ebp+0xcc]
push edx
push dword[ebx+0xc]
call dword[eax+0x118]
and dword[ebp-0x10], 0
lea edi, [ebx+0xe8]
mov ecx, edi
call method
test eax, eax
jle off.b1680
push dword[ebp-0x10]
mov ecx, edi
call sym
mov edx, dword[eax]
lea ecx, [ebp+0xcc]
push ecx
push dword[ebx+0xc]
mov ecx, eax
call dword[edx+0x130]
inc dword[ebp-0x10]
mov ecx, edi
call method
cmp dword[ebp-0x10], eax
jl off.b1635
push dword[ebp-0x2c]
push dword[ebx+0xc]
call dword[sym.imp.GDI32.dll_RestoreDC]
mov eax, dword[ebp+0xd8]
sub eax, dword[ebp+0xd0]
push 0xcc0020
push dword[ebp+0xd0]
push dword[ebp+0xcc]
push dword[ebx+0xc]
push eax
mov eax, dword[ebp+0xd4]
sub eax, dword[ebp+0xcc]
push eax
push dword[ebp+0xd0]
push dword[ebp+0xcc]
push dword[ebp+0xc4]
call dword[sym.imp.GDI32.dll_BitBlt]
push dword[ebp-0x30]
push dword[ebx+0xc]
call esi
cmp byte[ebx+0x4c], 0
je off.b1895
push dword[0x543470]
push dword[ebp+0xc4]
call esi
push 5
mov edi, eax
call dword[sym.imp.GDI32.dll_GetStockObject]
push eax
push dword[ebp+0xc4]
call esi
push dword[ebp-0x38]
push dword[ebp-0x3c]
push dword[ebp-0x40]
push dword[ebp-0x44]
push dword[ebp+0xc4]
call dword[sym.imp.GDI32.dll_Rectangle]
push edi
push dword[ebp+0xc4]
call esi
jmp off.b1895
push dword[ebp+0xc4]
call dword[sym.imp.GDI32.dll_SaveDC]
mov ecx, dword[ebx+0x50]
lea edx, [ebp+0xcc]
push edx
push dword[ebp+0xc4]
mov esi, eax
mov eax, dword[ecx]
call dword[eax+0x118]
push esi
push dword[ebp+0xc4]
call dword[sym.imp.GDI32.dll_RestoreDC]
lea eax, [ebp+0xc4]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_EndPaint]
cmp byte[ebx+0xb1], 0
je off.b447
push 0
push 0
push dword[ebx]
call dword[sym.imp.USER32.dll_InvalidateRect]
jmp off.b447
mov edx, dword[ebx+0x54]
test edx, edx
je off.b2006
push 7
pop ecx
xor eax, eax
lea edi, [ebp+0xe8]
rep stosd
mov dword[ebp+0xe4], 0x16
mov dword[ebp+0xe8], edx
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebx+0x54]
lea edx, [ebp+0xe4]
mov dword[ebp+0xec], eax
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
mov ebx, dword[ebx+0x50]
test ebx, ebx
je off.b447
mov ecx, ebx
call sym
jmp off.b447
mov eax, dword[ebp-0x14]
test eax, eax
je off.b447
push eax
push esi
push 0x204e
push dword[eax]
call dword[sym.imp.USER32.dll_SendMessageW]
jmp off.b442
sub edi, 0x7b
je off.b2423
sub edi, 0x85
je off.b2312
dec edi
je off.b2203
dec edi
je off.b2119
sub edi, 0xf
jne off.b4737
cmp dword[ebp-0x14], edi
je off.b4737
push dword[ebp-0x14]
push esi
push 0x2111
push dword[ebp-0x14]
jmp off.b2049
cmp dword[ebx+0x54], 0
je off.b4737
xor eax, eax
push 7
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebx+0x64]
mov dword[ebp+0xf0], eax
mov eax, dword[ebx+0x68]
mov dword[ebp+0xe4], 5
mov word[ebp+0xf8], si
mov dword[ebp+0xf4], eax
call fcn.00463375
mov word[ebp+0xfa], ax
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebx+0x54]
jmp off.b2671
cmp dword[ebx+0x60], 0
je off.b4737
xor eax, eax
push 7
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebx+0x64]
mov dword[ebp+0xf0], eax
mov eax, dword[ebx+0x68]
mov dword[ebp+0xe4], 4
mov word[ebp+0xf8], si
mov dword[ebp+0xf4], eax
call fcn.00463375
mov word[ebp+0xfa], ax
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebx+0x60]
lea edx, [ebp+0xe4]
mov dword[ebp+0xec], eax
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
and dword[ebx+0x60], 0
jmp off.b4737
cmp dword[ebx+0x54], 0
je off.b4737
xor eax, eax
push 7
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebx+0x64]
mov dword[ebp+0xf0], eax
mov eax, dword[ebx+0x68]
mov dword[ebp+0xe4], 3
mov word[ebp+0xf8], si
mov dword[ebp+0xf4], eax
call fcn.00463375
mov word[ebp+0xfa], ax
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebx+0x54]
lea edx, [ebp+0xe4]
mov dword[ebp+0xec], eax
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
mov eax, dword[ebx+0x54]
mov dword[ebx+0x60], eax
jmp off.b4737
mov eax, dword[ebp-0x14]
movsx ecx, ax
shr eax, 0x10
cwde
mov dword[ebp-0x18], eax
lea eax, [ebp-0x1c]
push eax
push dword[ebx]
mov dword[ebp-0x1c], ecx
call dword[sym.imp.USER32.dll_ScreenToClient]
cmp dword[ebx+0x5c], 0
mov eax, dword[ebp-0x1c]
mov dword[ebx+0x64], eax
mov eax, dword[ebp-0x18]
mov dword[ebx+0x68], eax
je off.b4737
mov ecx, ebx
call sym
push 7
xor eax, eax
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov ecx, dword[ebp-0x1c]
mov eax, dword[ebx+0x5c]
mov dword[ebp+0xf0], ecx
mov ecx, dword[ebp-0x18]
mov dword[ebp+0xe4], 0x11
mov dword[ebp+0xe8], eax
mov dword[ebp+0xf4], ecx
mov dword[ebp+0x100], eax
jmp off.b3043
and dword[ebp-0x10], 0
lea edi, [ebx+0xc4]
mov ecx, edi
call method
test eax, eax
jle off.b4737
push dword[ebp-0x10]
mov ecx, edi
call sym
mov ecx, dword[eax+8]
mov dword[ebp-0x30], eax
cmp ecx, dword[ebx]
jne off.b2600
movzx ecx, si
cmp dword[eax+0xc], ecx
jne off.b2600
cmp byte[eax+0x10], 0
je off.b2620
inc dword[ebp-0x10]
mov ecx, edi
call method
cmp dword[ebp-0x10], eax
jl off.b2566
jmp off.b4737
mov esi, dword[ebp-0x30]
push 7
xor eax, eax
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[esi]
mov dword[ebp+0xe8], eax
mov eax, dword[esi+4]
mov dword[ebp+0xe4], 0x18
mov dword[ebp+0xfc], eax
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[esi]
mov dword[ebp+0xec], eax
mov eax, dword[ecx]
lea edx, [ebp+0xe4]
push edx
call dword[eax+0x108]
jmp off.b4737
mov eax, 0x204
cmp edi, eax
ja off.b3804
je off.b3675
mov eax, edi
sub eax, 0x133
je off.b3649
sub eax, 5
je off.b3649
sub eax, 0xc8
je off.b3278
dec eax
je off.b3089
dec eax
je off.b2936
dec eax
jne off.b4737
push dword[ebx]
call dword[sym.imp.USER32.dll_SetFocus]
mov eax, dword[ebp-0x14]
movsx ecx, ax
shr eax, 0x10
cwde
push eax
mov dword[ebp-0x1c], ecx
mov dword[ebx+0x64], ecx
push ecx
mov ecx, ebx
mov dword[ebp-0x18], eax
mov dword[ebx+0x68], eax
call sym
mov dword[ebp-0x10], eax
test eax, eax
je off.b4737
mov edx, dword[eax]
mov ecx, eax
call dword[edx+0x1c]
cmp eax, ebx
jne off.b4737
mov ecx, ebx
call sym
push 7
pop ecx
xor eax, eax
lea edi, [ebp+0xe8]
rep stosd
mov dword[ebp+0xe4], 0x10
mov eax, dword[ebp-0x1c]
mov edi, dword[ebp-0x10]
mov dword[ebp+0xf0], eax
mov eax, dword[ebp-0x18]
mov dword[ebp+0xe8], edi
mov dword[ebp+0xf4], eax
mov word[ebp+0xfa], si
call dword[sym.imp.KERNEL32.dll_GetTickCount]
lea ecx, [ebp+0xe4]
mov dword[ebp+0xec], eax
mov eax, dword[edi]
push ecx
mov ecx, edi
call dword[eax+0x108]
mov dword[ebx+0x5c], edi
jmp off.b4737
mov ecx, dword[ebp-0x14]
movsx eax, word[ebp-0x14]
shr ecx, 0x10
cmp dword[ebx+0x5c], 0
movsx ecx, cx
mov dword[ebp-0x1c], eax
mov dword[ebp-0x18], ecx
mov dword[ebx+0x64], eax
mov dword[ebx+0x68], ecx
je off.b4737
mov ecx, ebx
call sym
xor eax, eax
push 7
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebx+0x5c]
mov dword[ebp+0xe8], eax
mov eax, dword[ebp-0x14]
mov dword[ebp+0x100], eax
mov eax, dword[ebp-0x1c]
mov dword[ebp+0xf0], eax
mov eax, dword[ebp-0x18]
mov dword[ebp+0xe4], 0xe
mov dword[ebp+0xfc], esi
mov dword[ebp+0xf4], eax
mov word[ebp+0xfa], si
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebx+0x5c]
lea edx, [ebp+0xe4]
mov dword[ebp+0xec], eax
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
and dword[ebx+0x5c], 0
jmp off.b4737
push dword[ebx]
call dword[sym.imp.USER32.dll_SetFocus]
mov ecx, dword[ebp-0x14]
movsx eax, word[ebp-0x14]
shr ecx, 0x10
movsx ecx, cx
push ecx
mov dword[ebp-0x18], ecx
mov dword[ebx+0x68], ecx
push eax
mov ecx, ebx
mov dword[ebp-0x1c], eax
mov dword[ebx+0x64], eax
call sym
mov dword[ebp-0x10], eax
test eax, eax
je off.b4737
mov edx, dword[eax]
mov ecx, eax
call dword[edx+0x1c]
cmp eax, ebx
jne off.b4737
mov ecx, dword[ebp-0x10]
mov dword[ebx+0x5c], ecx
mov eax, dword[ecx]
call dword[eax+0xf0]
mov ecx, ebx
call sym
xor eax, eax
push 7
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebp-0x14]
mov edi, dword[ebp-0x10]
mov dword[ebp+0x100], eax
mov eax, dword[ebp-0x1c]
mov dword[ebp+0xf0], eax
mov eax, dword[ebp-0x18]
mov dword[ebp+0xe4], 0xd
mov dword[ebp+0xe8], edi
mov dword[ebp+0xfc], esi
mov dword[ebp+0xf4], eax
mov word[ebp+0xfa], si
call dword[sym.imp.KERNEL32.dll_GetTickCount]
lea ecx, [ebp+0xe4]
mov dword[ebp+0xec], eax
mov eax, dword[edi]
push ecx
mov ecx, edi
jmp off.b2686
cmp byte[ebx+0xb5], 0
jne off.b3364
xor eax, eax
lea edi, [ebp-0x40]
stosd dword
stosd dword
stosd dword
mov eax, dword[ebx]
push 3
mov dword[ebp-0x3c], eax
mov eax, dword[ebx+0x1c]
pop ecx
mov dword[ebp-0x44], 0x10
mov dword[ebp-0x40], ecx
test eax, eax
jne off.b3329
mov dword[ebp-0x38], 0x190
jmp off.b3347
push 0
push ecx
push 0x415
push eax
call dword[sym.imp.USER32.dll_SendMessageW]
mov dword[ebp-0x38], eax
lea eax, [ebp-0x44]
push eax
call dword[sym.imp.COMCTL32.dll__TrackMouseEvent]
mov byte[ebx+0xb5], 1
mov eax, dword[ebp-0x14]
movsx esi, ax
shr eax, 0x10
cwde
push eax
push esi
mov ecx, ebx
mov dword[ebp-0x18], eax
mov dword[ebx+0x64], esi
mov dword[ebx+0x68], eax
call sym
mov dword[ebp-0x10], eax
test eax, eax
je off.b3414
mov edx, dword[eax]
mov ecx, eax
call dword[edx+0x1c]
cmp eax, ebx
jne off.b4737
and dword[ebp+0xe4], 0
push 7
xor eax, eax
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebp-0x18]
mov dword[ebp+0xf0], esi
mov dword[ebp+0xf4], eax
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebx+0x58]
mov dword[ebp+0xec], eax
cmp dword[ebp-0x10], ecx
je off.b3533
test ecx, ecx
je off.b3533
lea edx, [ebp+0xe4]
mov dword[ebp+0xe4], 0xa
mov dword[ebp+0xe8], ecx
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
mov eax, dword[ebx+0x1c]
and dword[ebx+0x58], 0
test eax, eax
je off.b3533
lea ecx, [ebx+0x20]
push ecx
push 0
push 0x411
push eax
call dword[sym.imp.USER32.dll_SendMessageW]
mov esi, dword[ebp-0x10]
cmp esi, dword[ebx+0x58]
je off.b3581
test esi, esi
je off.b3581
lea ecx, [ebp+0xe4]
mov dword[ebp+0xe4], 0xb
mov dword[ebp+0xe8], esi
mov eax, dword[esi]
push ecx
mov ecx, esi
call dword[eax+0x108]
mov dword[ebx+0x58], esi
mov ecx, dword[ebx+0x5c]
test ecx, ecx
je off.b3609
mov dword[ebp+0xe4], 9
mov dword[ebp+0xe8], ecx
jmp off.b2677
test esi, esi
je off.b4737
lea ecx, [ebp+0xe4]
mov dword[ebp+0xe4], 9
mov dword[ebp+0xe8], esi
mov eax, dword[esi]
push ecx
mov ecx, esi
jmp off.b2686
cmp dword[ebp-0x14], 0
je off.b4737
push dword[ebp-0x14]
add edi, 0x2000
push esi
push edi
jmp off.b2114
push dword[ebx]
call dword[sym.imp.USER32.dll_SetFocus]
mov ecx, dword[ebp-0x14]
movsx eax, word[ebp-0x14]
shr ecx, 0x10
movsx ecx, cx
push ecx
mov dword[ebp-0x18], ecx
mov dword[ebx+0x68], ecx
push eax
mov ecx, ebx
mov dword[ebp-0x1c], eax
mov dword[ebx+0x64], eax
call sym
mov dword[ebp-0x10], eax
test eax, eax
je off.b4737
mov edx, dword[eax]
mov ecx, eax
call dword[edx+0x1c]
cmp eax, ebx
jne off.b4737
mov ecx, dword[ebp-0x10]
mov eax, dword[ecx]
call dword[eax+0xf0]
mov ecx, ebx
call sym
push 7
xor eax, eax
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebp-0x14]
mov dword[ebp+0xe4], 0xf
mov dword[ebp+0xfc], esi
mov dword[ebp+0x100], eax
jmp off.b2865
sub edi, 0x20a
je off.b4532
sub edi, 0x97
je off.b4162
dec edi
dec edi
je off.b4103
sub edi, 0x75
je off.b3914
sub edi, 0x7ce9
jne off.b4737
lea esi, [ebx+0xf4]
mov ecx, esi
call method
test eax, eax
jle off.b3902
push edi
mov ecx, esi
call sym
test eax, eax
je off.b3890
mov edx, dword[eax]
push 1
mov ecx, eax
call dword[edx]
mov ecx, esi
inc edi
call method
cmp edi, eax
jl off.b3870
mov ecx, esi
call sym
jmp off.b4737
lea eax, [ebp+0xf4]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_GetClientRect]
push esi
call dword[sym.imp.GDI32.dll_SaveDC]
mov ecx, dword[ebx+0x50]
lea edx, [ebp+0xf4]
push edx
mov dword[ebp-0x18], eax
mov eax, dword[ecx]
push esi
call dword[eax+0x118]
test byte[ebp-0x14], 0x10
je off.b4088
push 5
push dword[ebx]
call dword[sym.imp.USER32.dll_GetWindow]
mov dword[ebp-0x10], eax
test eax, eax
je off.b4088
mov eax, dword[ebp-0x14]
or eax, 2
mov dword[ebp-0x30], eax
and dword[ebp-0x44], 0
xor eax, eax
lea edi, [ebp-0x40]
stosd dword
stosd dword
stosd dword
lea eax, [ebp-0x44]
push eax
push dword[ebp-0x10]
call dword[sym.imp.USER32.dll_GetWindowRect]
push 2
lea eax, [ebp-0x44]
push eax
push dword[ebx]
push 0
call dword[sym.imp.USER32.dll_MapWindowPoints]
mov eax, dword[ebp-0x40]
push 0
neg eax
push eax
mov eax, dword[ebp-0x44]
neg eax
push eax
push esi
call dword[sym.imp.GDI32.dll_SetWindowOrgEx]
push dword[ebp-0x30]
push esi
push 0x317
push dword[ebp-0x10]
call dword[sym.imp.USER32.dll_SendMessageW]
push 2
push dword[ebp-0x10]
call dword[sym.imp.USER32.dll_GetWindow]
mov dword[ebp-0x10], eax
test eax, eax
jne off.b3990
push dword[ebp-0x18]
push esi
call dword[sym.imp.GDI32.dll_RestoreDC]
jmp off.b4737
mov eax, dword[ebx+0x1c]
mov esi, dword[sym.imp.USER32.dll_SendMessageW]
test eax, eax
je off.b4130
lea ecx, [ebx+0x20]
push ecx
push 0
push 0x411
push eax
call esi
lea edi, [ebx+0xb5]
cmp byte[edi], 0
je off.b4154
push 0xffffffffffffffff
push 0
push 0x200
push dword[ebx]
call esi
mov byte[edi], 0
jmp off.b4737
mov eax, dword[ebp-0x14]
movsx esi, ax
shr eax, 0x10
cwde
push eax
push esi
mov ecx, ebx
mov byte[ebx+0xb5], 0
mov dword[ebp-0x18], eax
call sym
mov dword[ebp-0x10], eax
test eax, eax
je off.b4737
mov edx, dword[ebx+0x58]
test edx, edx
je off.b4283
push 7
xor eax, eax
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebp-0x18]
mov dword[ebp+0xf0], esi
mov dword[ebp+0xf4], eax
mov dword[ebp+0xe4], 0xc
mov dword[ebp+0xe8], edx
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebx+0x58]
lea edx, [ebp+0xe4]
mov dword[ebp+0xec], eax
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
mov ecx, dword[ebp-0x10]
mov eax, dword[ecx]
lea edx, [ebp]
push edx
call dword[eax+0x98]
and dword[ebp-4], 0
lea ecx, [ebp]
call sym
test al, al
je off.b4331
or dword[ebp-4], 0xffffffff
lea ecx, [ebp]
call sym
jmp off.b447
push 0x2c
pop edi
push edi
lea esi, [ebx+0x20]
push 0
push esi
call fcn.00490b70
mov eax, dword[ebx]
mov dword[esi], edi
mov dword[ebx+0x24], 1
mov dword[ebx+0x28], eax
mov dword[ebx+0x2c], eax
mov eax, dword[sym.Install.exe_struct_HINSTANCE____DuiLib::CPaintManagerUI::m_hInstance]
add esp, 0xc
lea ecx, [ebp]
mov dword[ebx+0x40], eax
call sym
mov ecx, dword[ebp-0x10]
mov dword[ebx+0x44], eax
mov eax, dword[ecx]
call dword[eax+0x30]
cmp dword[ebx+0x1c], 0
lea edi, [ebx+0x30]
mov esi, eax
movsd dword
movsd dword
movsd dword
movsd dword
mov esi, dword[sym.imp.USER32.dll_SendMessageW]
jne off.b4471
xor edi, edi
push edi
push dword[sym.Install.exe_struct_HINSTANCE____DuiLib::CPaintManagerUI::m_hInstance]
mov eax, 0x80000000
push edi
push dword[ebx]
push eax
push eax
push eax
push eax
push reloc.WS2_32.dll_closesocket
push edi
push str.tooltips_class32
push edi
call dword[sym.imp.USER32.dll_CreateWindowExW]
lea ecx, [ebx+0x20]
push ecx
push edi
push 0x432
push eax
mov dword[ebx+0x1c], eax
call esi
jmp off.b4473
xor edi, edi
mov ecx, dword[ebp-0x10]
mov eax, dword[ecx]
call dword[eax+0xa4]
push eax
push edi
push 0x418
push dword[ebx+0x1c]
call esi
lea eax, [ebx+0x20]
push eax
push edi
push 0x436
push dword[ebx+0x1c]
call esi
lea eax, [ebx+0x20]
push eax
push 1
push 0x411
push dword[ebx+0x1c]
call esi
jmp off.b4314
movsx eax, word[ebp-0x14]
mov dword[ebp-0x1c], eax
mov eax, dword[ebp-0x14]
shr eax, 0x10
cwde
mov dword[ebp-0x18], eax
lea eax, [ebp-0x1c]
push eax
push dword[ebx]
call dword[sym.imp.USER32.dll_ScreenToClient]
mov ecx, dword[ebp-0x18]
mov eax, dword[ebp-0x1c]
push ecx
mov dword[ebx+0x68], ecx
push eax
mov ecx, ebx
mov dword[ebx+0x64], eax
call sym
mov dword[ebp-0x10], eax
test eax, eax
je off.b4737
mov edx, dword[eax]
mov ecx, eax
call dword[edx+0x1c]
cmp eax, ebx
jne off.b4737
xor eax, eax
push 7
pop ecx
lea edi, [ebp+0xe8]
rep stosd
mov eax, dword[ebp-0x10]
mov dword[ebp+0xe8], eax
xor eax, eax
shr esi, 0x10
test si, si
setl al
mov dword[ebp+0xe4], 0x12
mov dword[ebp+0xfc], eax
mov eax, dword[ebp-0x14]
mov dword[ebp+0x100], eax
call fcn.00463375
mov word[ebp+0xfa], ax
call dword[sym.imp.KERNEL32.dll_GetTickCount]
mov ecx, dword[ebp-0x10]
lea edx, [ebp+0xe4]
mov dword[ebp+0xec], eax
mov eax, dword[ecx]
push edx
call dword[eax+0x108]
movzx eax, word[ebx+0x68]
movzx ecx, word[ebx+0x64]
shl eax, 0x10
or eax, ecx
push eax
push 0
push 0x200
push dword[ebx]
call dword[sym.imp.USER32.dll_SendMessageW]
mov ecx, dword[ebp-0x2c]
push 0
call sym
mov edi, eax
test edi, edi
je off.b4874
add ebx, 0xb8
mov ecx, dword[ebp-0x2c]
push 0
call sym
lea esi, [edi+0x108]
mov eax, dword[esi]
test eax, eax
je off.b4804
lea ecx, [eax+0x34]
call sym
test al, al
je off.b4804
mov ecx, dword[esi]
push edi
add ecx, 0x34
call sym
mov ecx, ebx
xor esi, esi
call method
test eax, eax
jle off.b4844
push esi
mov ecx, ebx
call sym
mov edx, dword[eax]
push edi
mov ecx, eax
call dword[edx]
mov ecx, ebx
inc esi
call method
cmp esi, eax
jl off.b4817
mov ecx, edi
call fcn.004633c0
push edi
call fcn.0049066b
pop ecx
mov ecx, dword[ebp-0x2c]
push 0
call sym
mov edi, eax
test edi, edi
jne off.b4759
xor al, al
mov ecx, dword[ebp-0xc]
mov dword
pop ecx
pop edi
pop esi
pop ebx
mov ecx, dword[ebp+0x104]
xor ecx, ebp
call fcn.00490ace
add ebp, 0x108
leave
ret 0x10

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/279a61b1e76da49531f1f16fd1102a2d