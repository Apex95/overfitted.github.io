---
layout: post
title:  "fcn.00434fe0 @ 3e981d1767f44f5fe2446a49ffe52f4e"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.00434fe0
- **Origin (md5):** 3e981d1767f44f5fe2446a49ffe52f4e
- **VirusTotal:** [virustotal.com/gui/file/3e981d1767f44f5fe2446a49ffe52f4e][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.00434fe0@3e981d1767f44f5fe2446a49ffe52f4e">fcn.00434fe0</a><br>@3e981d1767f44f5fe2446a49ffe52f4e</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push 0xffffffffffffffff
push 0x4c07c8
mov eax, dword
push eax
mov dword
sub esp, 0x78
push ebx
push ebp
push esi
mov ebp, ecx
mov ecx, dword[esp+0x94]
push edi
lea eax, [esp+0x14]
push 0
push eax
push ecx
lea ecx, [ebp+0x104]
mov dword[esp+0x28], ebp
call fcn.0042efa0
test eax, eax
jne off.b82
push eax
push 0x4e9fb0
mov ecx, ebp
call fcn.00433320
jmp case.default.0x43508c
mov eax, dword[esp+0x14]
mov esi, dword[esp+0x9c]
lea edx, [esp+0x20]
push edx
push 0
push esi
lea ecx, [eax+0x14]
call fcn.0042e9d0
mov ebx, eax
push esi
mov dword[esp+0x2c], ebx
call fcn.0042f150
add esp, 4
test eax, eax
je 0x4351dc
lea esi, [ebx+0x18]
push esi
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
lea esi, [esi+eax+8]
mov eax, dword[esp+0xa8]
add esp, 8
cmp eax, 3
ja case.default.0x43508c
jmp dword[eax*4+0x435c80]
mov edi, dword[esp+0xa8]
test edi, edi
jne 0x4350a3
mov edi, 0x4f9c84
add esi, 4
push edi
push esi
call fcn.004a3244
add esp, 8
test eax, eax
je case.default.0x43508c
push edi
call fcn.0049b580
add esp, 4
push eax
push edi
push esi
call fcn.0049b580
mov ecx, dword[esp+0x2c]
mov edx, dword[esp+0x20]
add esp, 4
sub esi, ebx
push eax
push esi
push ecx
lea ecx, [edx+0x14]
call fcn.0042eae0
mov eax, dword[esp+0x14]
mov ecx, ebp
push eax
call fcn.00434ee0
jmp case.default.0x43508c
mov ebx, dword[esp+0xa8]
mov eax, dword[esi]
xor ecx, ecx
mov edx, eax
test ebx, ebx
setne cl
shr edx, 2
and edx, 1
cmp ecx, edx
je case.default.0x43508c
cmp ecx, 1
jne 0x43512c
or al, 4
mov ecx, ebp
mov dword[esi], eax
mov eax, dword[esp+0x14]
push eax
call fcn.00434ee0
jmp case.default.0x43508c
and al, 0xfb
mov ecx, ebp
mov dword[esi], eax
mov eax, dword[esp+0x14]
push eax
call fcn.00434ee0
jmp case.default.0x43508c
mov ebx, dword[esp+0xa8]
mov eax, dword[esi]
xor ecx, ecx
mov edx, eax
test ebx, ebx
setne cl
shr edx, 1
and edx, 1
cmp ecx, edx
je case.default.0x43508c
cmp ecx, 1
jne 0x43517a
or al, 2
mov ecx, ebp
mov dword[esi], eax
mov eax, dword[esp+0x14]
push eax
call fcn.00434ee0
jmp case.default.0x43508c
and al, 0xfd
mov ecx, ebp
mov dword[esi], eax
mov eax, dword[esp+0x14]
push eax
call fcn.00434ee0
jmp case.default.0x43508c
mov eax, dword[esi]
mov ebx, dword[esp+0xa8]
xor ecx, ecx
mov edx, eax
test ebx, ebx
not edx
setne cl
and edx, 1
cmp ecx, edx
je case.default.0x43508c
test ecx, ecx
jne 0x4351c7
or al, 1
mov ecx, ebp
mov dword[esi], eax
mov eax, dword[esp+0x14]
push eax
call fcn.00434ee0
jmp case.default.0x43508c
and al, 0xfe
mov ecx, ebp
mov dword[esi], eax
mov eax, dword[esp+0x14]
push eax
call fcn.00434ee0
jmp case.default.0x43508c
mov ecx, dword[ebx]
push 0
push ecx
mov ecx, dword[esp+0x24]
call fcn.00433460
mov ecx, dword[esp+0xa0]
lea esi, [ebx+0x18]
mov dword[esp+0x24], eax
mov eax, dword[eax+0x28]
lea edx, [ecx+ecx*4]
mov edi, esi
push edi
lea ebp, [eax+edx*4]
call fcn.0049b580
add edi, eax
push edi
call fcn.0049b580
add edi, eax
add esp, 8
mov edi, dword[edi]
test edi, edi
mov dword[esp+0x10], edi
je 0x435236
mov ecx, dword[edi+0x1c]
push ecx
call dword[sym.imp.USER32.dll_IsWindow]
test eax, eax
mov dword[esp+0x18], 1
jne 0x43523e
mov dword[esp+0x18], 0
lea ecx, [esp+0x38]
call fcn.0041edb0
mov eax, dword[esp+0xa0]
mov dword[esp+0x90], 0
cmp eax, 8
jge 0x435849
cmp eax, 7
ja case.default.0x43526d
mov edx, eax
jmp dword[edx*4+0x435c90]
mov ebp, dword[esp+0xa8]
cmp ebp, 0x7f73
jg 0x435292
cmp ebp, 0xffff808d
jge 0x435297
mov ebp, 0xffff808d
jmp 0x435297
mov ebp, 0x7f73
push esi
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
mov ecx, dword[esp+0xa8]
lea esi, [esi+eax+4]
mov eax, 1
add esp, 8
cmp ecx, eax
jne 0x4352bf
add esi, 4
mov ecx, dword[esp+0x18]
mov dword[esi], ebp
cmp ecx, eax
jne case.default.0x43526d
mov edi, dword[esp+0x10]
lea eax, [esp+0x28]
push eax
mov ecx, dword[edi+0x1c]
push ecx
call dword[sym.imp.USER32.dll_GetWindowRect]
mov edx, dword[edi+0x1c]
push edx
call dword[sym.imp.USER32.dll_GetParent]
push eax
call fcn.004b5521
mov esi, eax
test esi, esi
je 0x435310
mov ecx, edi
call fcn.004b7e97
test eax, 0x80000000
jne 0x435310
lea eax, [esp+0x28]
mov ecx, esi
push eax
call fcn.004ba4ec
mov eax, dword[esp+0x34]
mov ecx, dword[esp+0x30]
mov edi, dword[esp+0x2c]
mov ebx, dword[esp+0x28]
mov edx, eax
mov esi, ecx
sub edx, edi
sub esi, ebx
cmp dword[esp+0xa0], 0
jne 0x435341
mov ebx, ebp
lea ecx, [esi+ebp]
mov dword[esp+0x28], ebx
mov dword[esp+0x30], ecx
jmp 0x43534e
mov edi, ebp
lea eax, [edx+ebp]
mov dword[esp+0x2c], edi
mov dword[esp+0x34], eax
sub eax, edi
push 1
sub ecx, ebx
push eax
push ecx
mov ecx, dword[esp+0x1c]
push edi
push ebx
call fcn.004b7f6f
jmp case.default.0x43526d
mov ebx, dword[esp+0xa8]
cmp ebx, 0x7f73
jg 0x43537d
test ebx, ebx
jge 0x435382
xor ebx, ebx
jmp 0x435382
mov ebx, 0x7f73
push esi
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
mov ecx, dword[esp+0xa8]
add esp, 8
cmp ecx, 3
lea eax, [esi+eax+0xc]
jne 0x4353a6
add eax, 4
mov dword[eax], ebx
mov eax, dword[esp+0x18]
cmp eax, 1
jne case.default.0x43526d
mov esi, dword[esp+0x10]
lea ecx, [esp+0x28]
push ecx
mov edx, dword[esi+0x1c]
push edx
call dword[sym.imp.USER32.dll_GetWindowRect]
mov eax, dword[esp+0xa0]
push 0x16
cmp eax, 2
jne 0x4353f4
mov eax, dword[esp+0x38]
mov ecx, dword[esp+0x30]
sub eax, ecx
mov ecx, esi
push eax
push ebx
push 0
push 0
push 0
call fcn.004b7fb0
jmp case.default.0x43526d
mov ecx, dword[esp+0x34]
push ebx
sub ecx, dword[esp+0x30]
push ecx
push 0
push 0
push 0
mov ecx, esi
call fcn.004b7fb0
jmp case.default.0x43526d
mov edi, dword[esp+0xa8]
test edi, edi
jne 0x435420
mov edi, 0x4f9c84
push esi
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
mov edx, dword[esi+eax+0x1c]
lea esi, [esi+eax+0x1c]
push edi
mov ecx, dword[esi+edx*4+4]
lea eax, [esi+edx*4+4]
lea esi, [ecx+eax+4]
call fcn.0049b580
add esp, 0xc
push eax
push edi
push esi
call fcn.0049b580
mov edx, dword[esp+0x2c]
add esp, 4
sub esi, ebx
push eax
mov eax, dword[esp+0x20]
push esi
push edx
lea ecx, [eax+0x14]
call fcn.0042eae0
jmp case.default.0x43526d
mov edx, dword[esp+0xa8]
xor ecx, ecx
test edx, edx
setne cl
mov ebp, ecx
push esi
cmp ebp, 1
jne 0x4354bd
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
mov edx, dword[esi+eax+0x1c]
lea esi, [esi+eax+0x1c]
mov ecx, dword[esi+edx*4+4]
lea eax, [esi+edx*4+4]
lea esi, [ecx+eax+4]
push esi
call fcn.0049b580
mov ecx, dword[eax+esi+4]
lea eax, [eax+esi+4]
add esp, 0xc
or ecx, 1
jmp 0x4354f2
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
mov edx, dword[esi+eax+0x1c]
lea esi, [esi+eax+0x1c]
mov ecx, dword[esi+edx*4+4]
lea eax, [esi+edx*4+4]
lea esi, [eax+ecx+4]
push esi
call fcn.0049b580
mov ecx, dword[eax+esi+4]
lea eax, [eax+esi+4]
add esp, 0xc
and ecx, 0xfffffffe
mov dword[eax], ecx
mov eax, dword[esp+0x18]
cmp eax, 1
jne case.default.0x43526d
test ebp, ebp
jne 0x435514
mov ecx, dword[esp+0x10]
push ebp
call fcn.004b7fff
jmp case.default.0x43526d
mov esi, dword[esp+0x9c]
test esi, esi
je 0x43569a
mov edx, dword[esp+0x14]
push 0
lea ecx, [edx+0x14]
call fcn.0042e9a0
cmp esi, eax
je 0x43569a
mov eax, dword[ebx]
mov ecx, dword[esp+0x1c]
push 0
push eax
call fcn.00433460
test eax, eax
je case.default.0x43526d
mov ecx, dword[eax+0x14]
test ch, 0x80
jne case.default.0x43526d
mov ebp, 1
mov dword[esp+0x1c], 0
mov ecx, dword[esp+0x1c]
push 0
mov eax, ecx
inc ecx
mov dword[esp+0x20], ecx
mov ecx, dword[esp+0x18]
push eax
add ecx, 0x14
call fcn.0042e950
test eax, eax
je 0x435681
cmp dword[eax], 0x10015
jne 0x435568
lea ebx, [eax+0x18]
mov esi, ebx
push esi
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
mov edx, dword[esp+0xa4]
add esi, eax
push edx
lea edi, [esi+0x1c]
mov esi, dword[esi+0x1c]
add edi, 4
push esi
push edi
call fcn.0041f840
add esp, 0x14
cmp eax, 0xffffffff
je 0x435568
push ebx
call fcn.0049b580
add ebx, eax
push ebx
call fcn.0049b580
add ebx, eax
add esp, 8
mov ebx, dword[ebx]
test ebx, ebx
je 0x435681
mov eax, dword[ebx+0x1c]
push eax
call dword[sym.imp.USER32.dll_IsWindow]
test eax, eax
je 0x435681
mov ecx, ebx
call fcn.00422970
test eax, eax
jge 0x435605
xor eax, eax
jmp 0x43560c
mov ecx, ebx
call fcn.00422970
mov ebx, dword[esp+0x9c]
mov ecx, edi
xor ebp, ebp
xor edi, edi
test eax, eax
jle 0x435647
mov edx, dword[ecx]
test edx, edx
je 0x435639
cmp edx, ebx
je 0x435634
mov edx, dword[ecx+4]
add ecx, 4
dec esi
test edx, edx
jne 0x435623
jmp 0x435639
mov edi, 1
add ecx, 4
dec esi
dec eax
test edi, edi
je 0x435619
jmp 0x435568
test edi, edi
jne 0x435568
test esi, esi
jle 0x435568
mov eax, dword[ecx]
test eax, eax
je 0x435568
cmp eax, dword[esp+0x9c]
je 0x435677
dec esi
add ecx, 4
test esi, esi
jg 0x435657
jmp 0x435568
mov ebp, 1
jmp 0x435568
cmp ebp, 1
jne case.default.0x43526d
mov ecx, dword[esp+0x10]
push 5
call fcn.004b7fff
jmp case.default.0x43526d
mov ecx, dword[esp+0x98]
push 1
push ecx
mov ecx, dword[esp+0x24]
call fcn.004314a0
jmp case.default.0x43526d
mov ecx, dword[esp+0xa8]
xor ebx, ebx
test ecx, ecx
setne bl
cmp ebx, 1
push esi
jne 0x4356fd
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
mov edx, dword[esi+eax+0x1c]
lea esi, [esi+eax+0x1c]
mov ecx, dword[esi+edx*4+4]
lea eax, [esi+edx*4+4]
lea esi, [eax+ecx+4]
push esi
call fcn.0049b580
mov ecx, dword[eax+esi+4]
lea eax, [eax+esi+4]
add esp, 0xc
or ecx, 2
jmp 0x435732
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
mov edx, dword[esi+eax+0x1c]
lea esi, [esi+eax+0x1c]
mov ecx, dword[esi+edx*4+4]
lea eax, [esi+edx*4+4]
lea esi, [ecx+eax+4]
push esi
call fcn.0049b580
mov ecx, dword[eax+esi+4]
lea eax, [eax+esi+4]
add esp, 0xc
and ecx, 0xfffffffd
mov dword[eax], ecx
mov eax, dword[esp+0x18]
cmp eax, 1
jne case.default.0x43526d
mov ecx, dword[esp+0x10]
xor edx, edx
test ebx, ebx
sete dl
push edx
call fcn.004b8041
jmp case.default.0x43526d
mov ebx, dword[esp+0xa8]
test ebx, ebx
jne 0x435766
xor edi, edi
jmp 0x4357a7
add ebx, 8
test ebx, ebx
jne 0x435771
xor edi, edi
jmp 0x4357a7
mov edi, dword[ebx-4]
cmp edi, 4
jb 0x4357a7
push edi
push ebx
lea ecx, [esp+0x40]
mov dword[esp+0x50], 0
call fcn.0041f520
mov ebx, dword[esp+0x48]
mov ebp, dword[esp+0x40]
neg ebx
sbb ebx, ebx
and ebx, ebp
mov eax, dword[ebx]
push eax
call fcn.0043c600
add esp, 4
mov dword[ebx], eax
mov ebp, esi
push ebp
call fcn.0049b580
add ebp, eax
push ebp
call fcn.0049b580
add ebp, eax
add esp, 8
mov eax, dword[ebp+0x14]
test eax, eax
je 0x4357ca
push eax
call dword[sym.imp.USER32.dll_DestroyCursor]
test edi, edi
jne 0x4357d2
xor eax, eax
jmp 0x4357dc
push edi
push ebx
call fcn.0043cb00
add esp, 8
push esi
mov dword[ebp+0x14], eax
call fcn.0049b580
add esi, eax
push esi
call fcn.0049b580
mov ecx, dword[esi+eax+0x1c]
lea eax, [esi+eax+0x1c]
add esp, 8
lea eax, [eax+ecx*4+4]
push edi
push ebx
mov ecx, dword[eax]
mov dword[eax], edi
mov edi, dword[esp+0x30]
mov edx, dword[esp+0x28]
sub eax, edi
push ecx
add eax, 4
push eax
mov eax, dword[esp+0x24]
push edx
lea ecx, [eax+0x14]
call fcn.0042eae0
cmp dword[esp+0x18], 1
jne case.default.0x43526d
lea ecx, [esp+0x28]
push ecx
call dword[sym.imp.USER32.dll_GetCursorPos]
mov edx, dword[esp+0x2c]
mov eax, dword[esp+0x28]
push edx
push eax
call dword[sym.imp.USER32.dll_SetCursorPos]
jmp case.default.0x43526d
mov eax, dword[esp+0x18]
test eax, eax
jne 0x435865
mov ebx, dword[esp+0x1c]
push 0
push 0x4e9f9c
mov ecx, ebx
call fcn.00433320
jmp 0x435869
mov ebx, dword[esp+0x1c]
mov ax, word[ebp+0xc]
xor ecx, ecx
mov dword[esp+0x28], ecx
mov dword[esp+0x2c], ecx
movsx ecx, ax
add ecx, 0xfffffc18
cmp ecx, 0x18
ja case.default.0x435891
xor edx, edx
mov dl, byte[ecx+0x435cd0]
jmp dword[edx*4+0x435cb0]
mov eax, dword[esp+0xa8]
mov dword[esp+0x28], eax
jmp case.default.0x435891
mov eax, dword[esp+0xa8]
xor ecx, ecx
test eax, eax
setl cl
dec ecx
and ecx, eax
mov dword[esp+0x28], ecx
jmp case.default.0x435891
mov eax, dword[esp+0xa8]
xor ecx, ecx
test eax, eax
setne cl
mov dword[esp+0x28], ecx
jmp case.default.0x435891
mov edx, dword[esp+0xa8]
mov eax, dword[esp+0xac]
mov dword[esp+0x28], edx
mov dword[esp+0x2c], eax
jmp case.default.0x435891
mov ecx, dword[esp+0xa8]
mov dword[esp+0x28], ecx
jmp case.default.0x435891
mov eax, dword[esp+0xa8]
test eax, eax
jne 0x43589f
mov dword[esp+0x28], 0x4f9c84
jmp case.default.0x435891
mov edx, dword[esp+0xa8]
xor esi, esi
cmp edx, esi
jne 0x435936
mov dword[esp+0x28], esi
mov dword[esp+0x2c], esi
jmp case.default.0x435891
mov ecx, dword[edx+4]
cmp ax, 0x3f3
mov dword[esp+0x2c], ecx
jne 0x43597e
cmp ecx, 4
jb 0x43597e
add edx, 8
push ecx
push edx
lea ecx, [esp+0x40]
mov dword[esp+0x50], esi
call fcn.0041f520
mov esi, dword[esp+0x48]
mov eax, dword[esp+0x40]
neg esi
sbb esi, esi
and esi, eax
mov edx, dword[esi]
push edx
call fcn.0043c600
mov dword[esi], eax
add esp, 4
mov dword[esp+0x28], esi
jmp case.default.0x435891
add edx, 8
mov dword[esp+0x28], edx
jmp case.default.0x435891
mov ebx, dword[esp+0xa4]
mov ebp, 0x3c
cmp ebx, 0xffffffff
je 0x435ae0
mov eax, dword[esp+0x24]
push 6
call dword[eax+0x2c]
mov edx, dword[esp+0xa0]
lea ecx, [esp+0x28]
add edx, 0xfffffff8
push ecx
push edx
push edi
call eax
test eax, eax
je 0x4359d6
cmp dword[esp+0x2c], ebp
jne 0x4359d6
mov esi, dword[esp+0x28]
mov ecx, 0xf
lea edi, [esp+0x4c]
rep movsd
jmp 0x4359eb
lea eax, [esp+0x4c]
push eax
push ebp
push 0x11
call dword[sym.imp.GDI32.dll_GetStockObject]
push eax
call dword[sym.imp.GDI32.dll_GetObjectA]
cmp ebx, 6
ja case.default.0x4359f4
jmp dword[ebx*4+0x435cec]
mov eax, dword[esp+0xa8]
mov ecx, 0xe10
cdq
idiv ecx
test edx, edx
jge 0x435a10
add edx, ecx
mov dword[esp+0x54], edx
mov dword[esp+0x58], edx
jmp case.default.0x4359f4
mov edx, dword[esp+0xa8]
neg edx
sbb edx, edx
and edx, 0x2bc
mov dword[esp+0x5c], edx
jmp case.default.0x4359f4
mov eax, dword[esp+0xa8]
test eax, eax
setne al
mov byte[esp+0x60], al
jmp case.default.0x4359f4
mov eax, dword[esp+0xa8]
test eax, eax
setne cl
mov byte[esp+0x62], cl
jmp case.default.0x4359f4
mov eax, dword[esp+0xa8]
test eax, eax
setne dl
mov byte[esp+0x61], dl
jmp case.default.0x4359f4
mov eax, dword[esp+0xa8]
xor ecx, ecx
test eax, eax
setl cl
dec ecx
lea edx, [esp+0x4c]
and ecx, eax
push ecx
push edx
call fcn.0043ce40
add esp, 8
jmp case.default.0x4359f4
mov edx, dword[esp+0xa8]
test edx, edx
jne 0x435aaa
mov edx, 0x4f9c84
mov edi, edx
or ecx, 0xffffffff
xor eax, eax
repne scasb
not ecx
dec ecx
test ecx, ecx
jle 0x435abf
cmp ecx, 0x20
jl 0x435ac4
mov edx, 0x4e9fd0
mov edi, edx
or ecx, 0xffffffff
xor eax, eax
lea ebx, [esp+0x68]
repne scasb
not ecx
sub edi, ecx
mov esi, edi
mov eax, ecx
mov edi, ebx
jmp 0x435b9d
mov esi, dword[esp+0xa8]
test esi, esi
je 0x435bb9
mov ecx, 0xf
xor eax, eax
lea edi, [esp+0x4c]
add esi, 4
rep stosd
mov eax, dword[esi-4]
mov ecx, dword[esi]
neg ecx
sbb ecx, ecx
add esi, 4
mov dword[esp+0x54], eax
mov dword[esp+0x58], eax
mov eax, dword[esi]
mov edi, dword[esi+4]
and ecx, 0x2bc
test eax, eax
setne dl
add esi, 4
mov dword[esp+0x5c], ecx
test edi, edi
mov ecx, dword[esi+4]
mov byte[esp+0x60], dl
setne al
add esi, 4
mov byte[esp+0x62], al
test ecx, ecx
mov eax, dword[esi+4]
setne cl
add esi, 4
xor edx, edx
test eax, eax
setl dl
dec edx
mov byte[esp+0x61], cl
and eax, edx
push eax
lea eax, [esp+0x50]
push eax
call fcn.0043ce40
add esi, 4
add esp, 8
mov esi, dword[esi]
test esi, esi
je 0x435b83
push esi
call fcn.0049b580
add esp, 4
cmp eax, 0x20
jge 0x435b83
lea edx, [esp+0x68]
mov edi, esi
jmp 0x435b8c
lea edx, [esp+0x68]
mov edi, 0x4e9fd0
or ecx, 0xffffffff
xor eax, eax
repne scasb
not ecx
sub edi, ecx
mov esi, edi
mov eax, ecx
mov edi, edx
shr ecx, 2
rep movsd
mov ecx, eax
and ecx, 3
rep movsb
mov edi, dword[esp+0x10]
lea ecx, [esp+0x4c]
mov dword[esp+0x28], ecx
mov dword[esp+0x2c], ebp
mov ebx, dword[esp+0x1c]
mov edx, dword[esp+0x24]
push 4
call dword[edx+0x2c]
mov edx, dword[esp+0xa0]
mov esi, dword[edi+0x1c]
lea ecx, [esp+0x28]
push 0
add edx, 0xfffffff8
push ecx
push edx
push edi
call eax
cmp eax, 1
jne case.default.0x43526d
push esi
call dword[sym.imp.USER32.dll_IsWindow]
test eax, eax
je case.default.0x43526d
mov ecx, dword[esp+0x14]
push 0
push esi
call fcn.0042f830
test eax, eax
mov dword[esp+0x20], eax
jle case.default.0x43526d
mov ecx, ebx
call fcn.00432a10
mov eax, dword[ebx+0x1d4]
mov ecx, dword[esp+0x14]
mov edx, dword[esp+0x98]
inc eax
mov dword[ebx+0x1d4], eax
mov eax, dword[esp+0x20]
push eax
push ecx
push edx
mov ecx, ebx
call fcn.00432a70
mov ecx, ebx
call fcn.00432a10
mov eax, dword[ebx+0x1d4]
test eax, eax
jle case.default.0x43526d
dec eax
mov dword[ebx+0x1d4], eax
lea ecx, [esp+0x38]
mov dword[esp+0x90], 0xffffffff
mov dword[esp+0x38], 0x4cdbe8
call fcn.0041efb0
mov ecx, dword[esp+0x88]
pop edi
pop esi
pop ebp
pop ebx
mov dword
add esp, 0x84
ret 0x18

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/3e981d1767f44f5fe2446a49ffe52f4e