---
layout: post
title:  "fcn.005ba960 @ a5905e3c253c25bbaf727a1a18fe8ed1"
date:   2021-08-30 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.005ba960
- **Origin (md5):** a5905e3c253c25bbaf727a1a18fe8ed1
- **VirusTotal:** [virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1][virustotal_ref]

# Code Tags
<span class="tag" id="THREAD">THREAD</span>


# Similar Functions

1. [fcn.0069ed20][similar_1_ref] (sim.: 0.9743753287012512)
2. [fcn.00617220][similar_2_ref] (sim.: 0.9709296263310268)
3. [fcn.00680030][similar_3_ref] (sim.: 0.9663193103026981)
4. [fcn.00579b00][similar_4_ref] (sim.: 0.9654758103993232)
5. [fcn.00656050][similar_5_ref] (sim.: 0.9638060829077554)


# Disassembled Code

{% highlight nasm %}
push r15
push r14
push r13
push r12
push rbp
push rdi
push rsi
push rbx
sub rsp,0x178
cmp dword[rcx+0x168],1
mov rbx,rcx
je 0x5ba993
add rsp,0x178
pop rbx
pop rsi
pop rdi
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
cmp dword[rcx+0xd8],2
je 0x5bbcae
mov rcx,qword[rcx+0x160]
mov rdx,qword[rbx+0x118]
mov r8d,dword[rbx+0x120]
mov rax,qword[rcx]
sub r8d,edx
call qword[rax+0x48]
mov dword[rsp+0x7c],eax
cmp eax,0xffffffff
je 0x5ba97f
test eax,eax
je 0x5bc44c
mov esi,eax
lea rax,[rsp+0xb0]
lea rdi,[rsp+0xd0]
mov qword[rsp+0xb8],0
mov byte[rsp+0xc0],0
mov qword[rsp+0x38],rax
lea rax,[rsp+0xc0]
mov qword[rsp+0x40],rdi
lea rdi,[rsp+0xe0]
mov dword[rsp+0x78],0
mov qword[rsp+0xb0],rax
lea rax,[rsp+0x110]
mov qword[rsp+0x48],rdi
mov qword[rsp+0x50],rax
lea rax,[rsp+0x120]
mov qword[rsp+0x58],rax
nop
test esi,esi
jle 0x5bb37b
mov eax,dword[rbx+0xd8]
cmp eax,1
je 0x5bada0
jb 0x5bad3f
cmp eax,2
jne 0x5baa4e
lea rax,[rbx+0x3c]
mov qword[rsp+0x60],rax
mov rax,qword[sym.imp.KERNEL32.dll_CreateEventA]
mov qword[rsp+0x80],rax
mov rax,qword[sym.imp.KERNEL32.dll_CloseHandle]
mov qword[rsp+0x88],rax
mov rax,qword[rbx+0xe8]
cmp rax,0xffffffffffffffff
je 0x5babbb
nop word[rax+rax]
movsxd rbp,esi
movsxd r12,dword[rsp+0x78]
cmp rbp,rax
cmovg rbp,rax
add r12,qword[rbx+0x118]
call qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
mov rdi,qword[rsp+0x60]
mov r13d,eax
xor eax,eax
lock cmpxchg dword[rdi],eax
cmp r13d,eax
je 0x5bacb0
lea rdi,[rbx+0x40]
mov r14d,dword[rbx+0x40]
jmp 0x5baae3
mov r14d,eax
mov edx,r14d
mov r8d,r14d
mov rcx,rdi
or edx,0x80000000
call fcn.008eebc0
cmp r14d,eax
jne 0x5baae0
test r14d,r14d
js 0x5bb7c8
mov rax,qword[rsp+0x60]
xchg dword[rax],r13d
mov dword[rbx+0x38],1
lea rax,[rbx+8]
lea rdi,[rbx+0x20]
movsxd r13,ebp
lea r15,[0x009371c0]
mov rcx,rdi
mov rdx,rax
mov qword[rsp+0x70],rdi
mov qword[rsp+0x68],rax
call fcn.00a21530
mov r14,qword[rbx+0x28]
mov rdi,qword[rbx+0x20]
cmp rdi,r14
jne 0x5bab59
jmp 0x5bab7b
add rdi,8
cmp r14,rdi
je 0x5bab7b
mov rcx,qword[rdi]
mov rax,qword[rcx]
mov rax,qword[rax+0x28]
cmp rax,r15
je 0x5bab50
add rdi,8
xor edx,edx
mov r9,r13
mov r8,r12
call rax
cmp r14,rdi
jne 0x5bab59
mov eax,dword[rbx+0x38]
sub eax,1
test eax,eax
mov dword[rbx+0x38],eax
je 0x5bacc0
add dword[rsp+0x78],ebp
sub esi,ebp
movsxd rbp,ebp
sub qword[rbx+0xe8],rbp
je 0x5bb8bc
test esi,esi
jle 0x5baa40
mov rax,qword[rbx+0xe8]
cmp rax,0xffffffffffffffff
jne 0x5baaa0
movsxd rbp,dword[rsp+0x78]
add rbp,qword[rbx+0x118]
call qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
mov rdi,qword[rsp+0x60]
mov r13d,eax
xor eax,eax
lock cmpxchg dword[rdi],eax
cmp r13d,eax
je 0x5bba00
lea r12,[rbx+0x40]
mov edi,dword[rbx+0x40]
jmp 0x5babf2
mov edi,eax
mov edx,edi
mov r8d,edi
mov rcx,r12
or edx,0x80000000
call fcn.008eebc0
cmp edi,eax
jne 0x5babf0
test edi,edi
js 0x5bbb64
mov rax,qword[rsp+0x60]
xchg dword[rax],r13d
mov dword[rbx+0x38],1
lea rdx,[rbx+8]
lea rcx,[rbx+0x20]
movsxd r12,esi
lea r15,[0x009371c0]
call fcn.00a21530
mov r13,qword[rbx+0x28]
mov rdi,qword[rbx+0x20]
cmp rdi,r13
jne 0x5bac59
jmp 0x5bac7b
add rdi,8
cmp r13,rdi
je 0x5bac7b
mov rcx,qword[rdi]
mov rax,qword[rcx]
mov rax,qword[rax+0x28]
cmp rax,r15
je 0x5bac50
add rdi,8
xor edx,edx
mov r9,r12
mov r8,rbp
call rax
cmp r13,rdi
jne 0x5bac59
mov eax,dword[rbx+0x38]
sub eax,1
test eax,eax
mov dword[rbx+0x38],eax
je 0x5bba57
add esi,dword[rsp+0x78]
mov rax,qword[rbx+0xf0]
mov qword[rbx+0xf0],0
sub esi,eax
mov dword[rsp+0x78],esi
mov esi,eax
jmp 0x5baba2
add dword[rbx+0x38],1
jmp 0x5bab14
mov rdi,qword[rsp+0x60]
xchg dword[rdi],eax
mov eax,0x80000000
lea rdi,[rbx+0x40]
lock xadd dword[rdi],eax
test eax,0x40000000
jne 0x5bab8c
cmp eax,0x80000000
je 0x5bab8c
mov r12d,dword[rbx+0x40]
jmp 0x5bacf3
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rdi
or edx,0x40000000
call fcn.008eebc0
cmp r12d,eax
jne 0x5bacf0
and r12d,0x40000000
jne 0x5bab8c
lea r12,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r12],rax
test rax,rax
mov rdi,rax
mov rcx,rax
je 0x5bbcde
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5bab8c
cmp byte[rbx+0x64],0
mov rbp,qword[rbx+0x118]
jne 0x5bad60
cmp byte[rbp],0x24
mov edx,0x7c
mov eax,0xa
cmove eax,edx
mov byte[rbx+0x64],al
movsxd rax,dword[rsp+0x78]
lea rdi,[rsp+0xf0]
movsxd r12,esi
add rbp,rax
lea rax,[rdi+0x10]
mov qword[rsp+0xf0],rax
mov rax,rbp
add rax,r12
je 0x5bb0ff
test rbp,rbp
jne 0x5bb0ff
lea rcx,[0x00aa93e0]
call fcn.00a4f4e0
mov ecx,0x400
call fcn.00a5af50
mov r13,rax
mov rcx,qword[rsp+0x38]
lea rax,[rbx+0xf8]
mov rdx,rax
mov qword[rsp+0x68],rax
call fcn.00a2df10
movsxd rbp,dword[rsp+0x7c]
lea rax,[rsp+0x130]
movabs r12,0x7fffffffffffffff
mov qword[rsp+0x60],rax
movsxd rax,esi
mov rdx,rbp
mov rcx,qword[rbx+0xe0]
sub rdx,rax
mov qword[rsp+0x130],rax
add rdx,qword[rbx+0x118]
mov rax,qword[rsp+0x50]
mov r8,qword[rsp+0x60]
mov r9,r13
mov qword[rsp+0x110],0x400
mov qword[rsp+0x20],rax
call fcn.006b3f30
mov edi,eax
mov rax,r12
sub rax,qword[rsp+0xb8]
mov r8,qword[rsp+0x110]
sub esi,dword[rsp+0x130]
cmp r8,rax
ja 0x5bc4d3
mov rcx,qword[rsp+0x38]
mov rdx,r13
call fcn.00a2de80
test dil,dil
je 0x5bb87e
test esi,esi
jne 0x5bade2
nop word[rax+rax]
movsx edx,byte[rbx+0x64]
mov rcx,qword[rsp+0x38]
xor r8d,r8d
call fcn.00978c80
cmp rax,0xffffffffffffffff
mov rdi,rax
je 0x5bb61f
test rax,rax
je 0x5bafd7
mov rbp,qword[rsp+0xb8]
mov rax,qword[rsp+0x48]
mov r12,qword[rsp+0xb0]
cmp rdi,rbp
mov qword[rsp+0xd0],rax
cmovbe rbp,rdi
mov rax,r12
add rax,rbp
je 0x5baed4
test r12,r12
jne 0x5baed4
lea rcx,[0x00aa93e0]
call fcn.00a4f4e0
cmp rbp,0xf
mov qword[rsp+0x98],rbp
ja 0x5bb000
cmp rbp,1
je 0x5bb060
test rbp,rbp
mov rax,qword[rsp+0x48]
jne 0x5bba09
lea r12,[rbx+0x3c]
mov qword[rsp+0xd8],rbp
mov byte[rax+rbp],0
call qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
mov r14d,eax
xor eax,eax
lock cmpxchg dword[r12],eax
cmp r14d,eax
je 0x5bb050
lea rbp,[rbx+0x40]
mov r15d,dword[rbx+0x40]
jmp 0x5baf35
mov r15d,eax
mov edx,r15d
mov r8d,r15d
mov rcx,rbp
or edx,0x80000000
call fcn.008eebc0
cmp r15d,eax
jne 0x5baf32
test r15d,r15d
js 0x5bb63b
xchg dword[r12],r14d
mov dword[rbx+0x38],1
lea rdx,[rbx+8]
lea rcx,[rbx+0x20]
lea r15,[0x009371b0]
call fcn.00a21530
mov r14,qword[rbx+0x28]
mov rbp,qword[rbx+0x20]
cmp rbp,r14
je 0x5bafb2
mov rax,r15
mov r15,r14
mov r14,rax
nop dword[rax]
mov rcx,qword[rbp]
mov rax,qword[rcx]
mov rax,qword[rax+0x20]
cmp rax,r14
je 0x5bafa9
mov r8,qword[rsp+0x40]
xor edx,edx
call rax
add rbp,8
cmp r15,rbp
jne 0x5baf90
mov eax,dword[rbx+0x38]
sub eax,1
test eax,eax
mov dword[rbx+0x38],eax
je 0x5bb080
mov rcx,qword[rsp+0xd0]
cmp rcx,qword[rsp+0x48]
je 0x5bafd7
call fcn.00a5af30
mov rax,qword[rsp+0xb8]
lea r8,[rdi+1]
mov rcx,qword[rsp+0x38]
cmp r8,rax
cmova r8,rax
xor edx,edx
call fcn.00a2de00
jmp 0x5bae70
mov rcx,qword[rsp+0x40]
lea rdx,[rsp+0x98]
xor r8d,r8d
call fcn.00a2dfc0
mov rcx,rax
mov qword[rsp+0xd0],rax
mov rax,qword[rsp+0x98]
mov qword[rsp+0xe0],rax
mov r8,rbp
mov rdx,r12
call sub.msvcrt.dll_memcpy
mov rbp,qword[rsp+0x98]
mov rax,qword[rsp+0xd0]
jmp 0x5baefe
add dword[rbx+0x38],1
jmp 0x5baf62
movzx eax,byte[r12]
mov byte[rsp+0xe0],al
mov rax,qword[rsp+0x48]
jmp 0x5baefe
xchg dword[r12],eax
mov eax,0x80000000
lea rbp,[rbx+0x40]
lock xadd dword[rbp],eax
test eax,0x40000000
jne 0x5bafc3
cmp eax,0x80000000
je 0x5bafc3
mov r12d,dword[rbx+0x40]
jmp 0x5bb0b3
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rbp
or edx,0x40000000
call fcn.008eebc0
cmp r12d,eax
jne 0x5bb0b0
and r12d,0x40000000
jne 0x5bafc3
lea r12,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r12],rax
test rax,rax
mov rbp,rax
mov rcx,rax
je 0x5bbc6f
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5bafc3
cmp esi,0xf
mov qword[rsp+0xa0],r12
jg 0x5bba11
cmp esi,1
lea rax,[rdi+0x10]
jne 0x5bba3c
movzx eax,byte[rbp]
mov byte[rsp+0x100],al
mov rax,r12
mov rdx,qword[rsp+0xf0]
mov qword[rsp+0xf8],rax
xor r8d,r8d
mov rcx,rdi
mov byte[rdx+rax],0
lea rax,[rbx+0xf8]
xor edx,edx
mov qword[rsp+0x68],rax
mov rax,qword[rbx+0x100]
mov qword[rsp+0x20],rax
mov r9,qword[rbx+0xf8]
call fcn.00a2c0d0
lea rcx,[rsp+0x130]
lea rdx,[rsp+0x140]
mov qword[rsp+0x60],rcx
mov qword[rsp+0x130],rdx
lea rdx,[rax+0x10]
mov rcx,qword[rax]
cmp rcx,rdx
je 0x5bbb12
mov qword[rsp+0x130],rcx
mov rcx,qword[rax+0x10]
mov qword[rsp+0x140],rcx
mov rcx,qword[rax+8]
mov qword[rsp+0x138],rcx
mov rcx,qword[rsp+0x60]
mov qword[rax],rdx
mov byte[rax+0x10],0
mov rdx,qword[rsp+0x130]
mov qword[rax+8],0
add rcx,0x10
mov rax,qword[rsp+0xb0]
cmp rdx,rcx
je 0x5bbc53
mov rcx,qword[rsp+0x38]
add rcx,0x10
cmp rax,rcx
je 0x5bbada
movdqu xmm0,xmmword[rsp+0x138]
test rax,rax
mov rcx,qword[rsp+0xc0]
mov qword[rsp+0xb0],rdx
movups xmmword[rsp+0xb8],xmm0
je 0x5bbaf3
mov qword[rsp+0x130],rax
mov qword[rsp+0x140],rcx
mov qword[rsp+0x138],0
mov byte[rax],0
mov rax,qword[rsp+0x60]
mov rcx,qword[rsp+0x130]
add rax,0x10
cmp rcx,rax
je 0x5bb25f
call fcn.00a5af30
mov rcx,qword[rsp+0xf0]
add rdi,0x10
cmp rcx,rdi
je 0x5bb275
call fcn.00a5af30
movsx edx,byte[rbx+0x64]
mov rcx,qword[rsp+0x38]
xor r8d,r8d
call fcn.00978c80
cmp rax,0xffffffffffffffff
mov rdi,rax
je 0x5bb7c1
test rax,rax
je 0x5bb305
mov rbp,qword[rsp+0xb8]
mov rax,qword[rsp+0x58]
mov r12,qword[rsp+0xb0]
cmp rdi,rbp
mov qword[rsp+0x110],rax
cmovbe rbp,rdi
mov rax,r12
add rax,rbp
je 0x5bb432
test r12,r12
jne 0x5bb432
lea rcx,[0x00aa93e0]
call fcn.00a4f4e0
nop dword[rax]
mov eax,dword[rbx+0x38]
sub eax,1
test eax,eax
mov dword[rbx+0x38],eax
je 0x5bb5a0
mov rcx,qword[rsp+0x110]
cmp rcx,qword[rsp+0x58]
je 0x5bb305
call fcn.00a5af30
mov rax,qword[rsp+0xb8]
lea r8,[rdi+1]
mov rcx,qword[rsp+0x38]
cmp r8,rax
cmova r8,rax
xor edx,edx
call fcn.00a2de00
mov rax,qword[rsp+0xb8]
movsxd rdx,esi
cmp rdx,rax
mov edx,dword[rbx+0xd8]
cmova esi,eax
test edx,edx
je 0x5bb275
mov rax,qword[rsp+0xb0]
mov qword[rsp+0xb8],0
mov byte[rax],0
mov eax,dword[rsp+0x7c]
sub eax,esi
mov dword[rsp+0x78],eax
mov rdx,qword[rsp+0x38]
mov rcx,qword[rsp+0x68]
call fcn.00a2df10
test esi,esi
jg 0x5baa48
mov eax,dword[rbx+0xd8]
test eax,eax
jne 0x5bbc2f
mov rax,qword[0x00a7d820]
mov rdx,qword[rbx+0x100]
cmp byte[rax+0x19d2],0
je 0x5bbe63
movsxd rax,dword[rax+0xbd0]
cmp rax,rdx
jae 0x5bbc2f
mov ecx,0x28
call fcn.00a5b090
lea rdx,str.Maximum_command_length_exceeded
lea rcx,[0x00aa9454]
mov rsi,rax
call fcn.007502b0
lea rbx,[rsp+0x130]
mov rdx,rax
mov rcx,rbx
mov qword[rsp+0x60],rbx
call fcn.00a5fcd0
mov r15,qword[rsp+0x60]
mov rcx,rsi
mov rdx,r15
add r15,0x10
call fcn.00940160
mov rcx,qword[rsp+0x130]
lea rax,[0x00b70110]
mov qword[rsi],rax
cmp rcx,r15
je 0x5bb41c
call fcn.00a5af30
lea r8,[0x009340a0]
lea rdx,[0x00b49f30]
mov rcx,rsi
call fcn.00a5b6d0
cmp rbp,0xf
mov qword[rsp+0xa8],rbp
ja 0x5bb520
cmp rbp,1
je 0x5bb580
test rbp,rbp
mov rax,qword[rsp+0x58]
jne 0x5bbad2
lea r12,[rbx+0x3c]
mov qword[rsp+0x118],rbp
mov byte[rax+rbp],0
call qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
mov r13d,eax
xor eax,eax
lock cmpxchg dword[r12],eax
cmp r13d,eax
je 0x5bb570
lea rbp,[rbx+0x40]
mov r14d,dword[rbx+0x40]
jmp 0x5bb493
mov r14d,eax
mov edx,r14d
mov r8d,r14d
mov rcx,rbp
or edx,0x80000000
call fcn.008eebc0
cmp r14d,eax
jne 0x5bb490
test r14d,r14d
js 0x5bb706
xchg dword[r12],r13d
mov dword[rbx+0x38],1
lea rdx,[rbx+8]
lea rcx,[rbx+0x20]
lea r15,[0x009371b0]
call fcn.00a21530
mov r13,qword[rbx+0x28]
mov rbp,qword[rbx+0x20]
mov r14,qword[rsp+0x50]
cmp rbp,r13
jne 0x5bb4fd
jmp 0x5bb2e0
add rbp,8
cmp r13,rbp
je 0x5bb2e0
mov rcx,qword[rbp]
mov rax,qword[rcx]
mov rax,qword[rax+0x20]
cmp rax,r15
je 0x5bb4f0
mov r8,r14
xor edx,edx
call rax
jmp 0x5bb4f0
mov rcx,qword[rsp+0x50]
lea rdx,[rsp+0xa8]
xor r8d,r8d
call fcn.00a2dfc0
mov rcx,rax
mov qword[rsp+0x110],rax
mov rax,qword[rsp+0xa8]
mov qword[rsp+0x120],rax
mov r8,rbp
mov rdx,r12
call sub.msvcrt.dll_memcpy
mov rbp,qword[rsp+0xa8]
mov rax,qword[rsp+0x110]
jmp 0x5bb45c
add dword[rbx+0x38],1
jmp 0x5bb4c0
movzx eax,byte[r12]
mov byte[rsp+0x120],al
mov rax,qword[rsp+0x58]
jmp 0x5bb45c
xchg dword[r12],eax
mov eax,0x80000000
lea rbp,[rbx+0x40]
lock xadd dword[rbp],eax
test eax,0x40000000
jne 0x5bb2f1
cmp eax,0x80000000
je 0x5bb2f1
mov r12d,dword[rbx+0x40]
jmp 0x5bb5d3
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rbp
or edx,0x40000000
call fcn.008eebc0
cmp r12d,eax
jne 0x5bb5d0
and r12d,0x40000000
jne 0x5bb2f1
lea r12,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r12],rax
test rax,rax
mov rbp,rax
mov rcx,rax
je 0x5bbd25
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5bb2f1
mov rdx,qword[rsp+0x38]
mov rcx,qword[rsp+0x68]
call fcn.00a2df10
mov rcx,r13
call fcn.00a5af10
jmp 0x5baa40
mov edx,dword[rbx+0x40]
jmp 0x5bb642
mov edx,eax
lea eax,[rdx+1]
mov r15d,edx
or r15d,0x80000000
test edx,edx
cmovs r15d,eax
mov eax,edx
lock cmpxchg dword[rbp],r15d
cmp eax,edx
jne 0x5bb640
mov eax,r15d
shr eax,0x1f
test al,al
je 0x5baf57
shr edx,0x1f
test dl,dl
je 0x5baf57
lea r10,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r10],rax
test rax,rax
mov rcx,rax
je 0x5bbe6f
mov dword[rsp+0x70],esi
mov rsi,rbp
mov rbp,rbx
mov rbx,rcx
nop
xor r8d,r8d
mov edx,0xffffffff
mov rcx,rbx
call qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov edx,r15d
and edx,0x7fffffff
or edx,0x40000000
test edx,edx
js 0x5bb6e3
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rsi],ecx
cmp eax,edx
je 0x5bb6fa
mov edx,eax
test edx,edx
jns 0x5bb6c4
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rsi],ecx
cmp eax,edx
jne 0x5bb6dd
mov r15d,eax
jmp 0x5bb6a0
mov esi,dword[rsp+0x70]
mov rbx,rbp
jmp 0x5baf57
mov edx,dword[rbx+0x40]
jmp 0x5bb712
mov edx,eax
lea eax,[rdx+1]
mov r15d,edx
or r15d,0x80000000
test edx,edx
cmovs r15d,eax
mov eax,edx
lock cmpxchg dword[rbp],r15d
cmp eax,edx
jne 0x5bb710
mov eax,r15d
shr eax,0x1f
test al,al
je 0x5bb4b5
shr edx,0x1f
test dl,dl
je 0x5bb4b5
lea r10,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r10],rax
test rax,rax
mov r14,rax
je 0x5bbece
xor r8d,r8d
mov edx,0xffffffff
mov rcx,r14
call qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov edx,r15d
and edx,0x7fffffff
or edx,0x40000000
test edx,edx
js 0x5bb7a9
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rbp],ecx
cmp eax,edx
je 0x5bb4b5
mov edx,eax
test edx,edx
jns 0x5bb785
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rbp],ecx
cmp eax,edx
jne 0x5bb7a3
mov r15d,eax
jmp 0x5bb761
xor esi,esi
jmp 0x5bb364
mov edx,dword[rbx+0x40]
jmp 0x5bb7d2
mov edx,eax
lea eax,[rdx+1]
mov r15d,edx
or r15d,0x80000000
test edx,edx
cmovs r15d,eax
mov eax,edx
lock cmpxchg dword[rdi],r15d
cmp eax,edx
jne 0x5bb7d0
shr edx,0x1f
test dl,dl
je 0x5bab05
mov eax,r15d
shr eax,0x1f
test al,al
je 0x5bab05
lea r11,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r11],rax
test rax,rax
mov r14,rax
je 0x5bbf30
xor r8d,r8d
mov edx,0xffffffff
mov rcx,r14
call qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov edx,r15d
and edx,0x7fffffff
or edx,0x40000000
test edx,edx
js 0x5bb867
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rdi],ecx
cmp eax,edx
je 0x5bab05
mov edx,eax
test edx,edx
jns 0x5bb844
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rdi],ecx
cmp eax,edx
jne 0x5bb861
mov r15d,eax
jmp 0x5bb820
mov eax,dword[rsp+0x7c]
sub eax,esi
mov dword[rsp+0x78],eax
mov eax,dword[rbx+0xd8]
test eax,eax
je 0x5bae70
cmp eax,1
mov rbp,qword[rbx+0xf0]
je 0x5bbb2f
mov qword[rbx+0xf0],rbp
mov dword[rbx+0xd8],0
jmp 0x5bae70
mov dword[rbx+0xd8],0
call qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
mov rdi,qword[rsp+0x60]
mov ebp,eax
xor eax,eax
lock cmpxchg dword[rdi],eax
cmp ebp,eax
je 0x5bbb09
lea rdi,[rbx+0x40]
mov r12d,dword[rbx+0x40]
jmp 0x5bb8f3
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rdi
or edx,0x80000000
call fcn.008eebc0
cmp r12d,eax
jne 0x5bb8f0
test r12d,r12d
js 0x5bbda0
mov rax,qword[rsp+0x60]
xchg dword[rax],ebp
mov dword[rbx+0x38],1
mov rdx,qword[rsp+0x68]
mov rcx,qword[rsp+0x70]
lea r12,[0x009371e0]
call fcn.00a21530
mov rbp,qword[rbx+0x28]
mov rdi,qword[rbx+0x20]
cmp rdi,rbp
jne 0x5bb959
jmp 0x5bb975
add rdi,8
cmp rbp,rdi
je 0x5bb975
mov rcx,qword[rdi]
mov rax,qword[rcx]
mov rax,qword[rax+0x38]
cmp rax,r12
je 0x5bb950
add rdi,8
xor edx,edx
call rax
cmp rbp,rdi
jne 0x5bb959
mov eax,dword[rbx+0x38]
sub eax,1
test eax,eax
mov dword[rbx+0x38],eax
jne 0x5baa40
mov rdi,qword[rsp+0x60]
xchg dword[rdi],eax
mov eax,0x80000000
lea rdi,[rbx+0x40]
lock xadd dword[rdi],eax
test eax,0x40000000
jne 0x5baa40
cmp eax,0x80000000
je 0x5baa40
mov ebp,dword[rbx+0x40]
jmp 0x5bb9b7
mov ebp,eax
mov edx,ebp
mov r8d,ebp
mov rcx,rdi
or edx,0x40000000
call fcn.008eebc0
cmp ebp,eax
jne 0x5bb9b5
and ebp,0x40000000
jne 0x5baa40
lea rbp,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[rbp],rax
test rax,rax
mov rdi,rax
mov rcx,rax
je 0x5bc331
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5baa40
add dword[rbx+0x38],1
jmp 0x5bac20
mov rcx,rax
jmp 0x5bb030
lea rdx,[rsp+0xa0]
xor r8d,r8d
mov rcx,rdi
call fcn.00a2dfc0
mov rdx,qword[rsp+0xa0]
mov qword[rsp+0xf0],rax
mov qword[rsp+0x100],rdx
mov r8,r12
mov rdx,rbp
mov rcx,rax
call sub.msvcrt.dll_memcpy
mov rax,qword[rsp+0xa0]
jmp 0x5bb12b
mov rdi,qword[rsp+0x60]
xchg dword[rdi],eax
mov eax,0x80000000
lea rbp,[rbx+0x40]
lock xadd dword[rbp],eax
test eax,0x40000000
jne 0x5bac8c
cmp eax,0x80000000
je 0x5bac8c
mov edi,dword[rbx+0x40]
jmp 0x5bba89
mov edi,eax
mov edx,edi
mov r8d,edi
mov rcx,rbp
or edx,0x40000000
call fcn.008eebc0
cmp edi,eax
jne 0x5bba87
and edi,0x40000000
jne 0x5bac8c
lea rbp,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[rbp],rax
test rax,rax
mov rdi,rax
mov rcx,rax
je 0x5bc0b9
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5bac8c
mov rcx,rax
jmp 0x5bb550
movdqu xmm0,xmmword[rsp+0x138]
mov qword[rsp+0xb0],rdx
movups xmmword[rsp+0xb8],xmm0
mov rax,qword[rsp+0x60]
add rax,0x10
mov qword[rsp+0x130],rax
jmp 0x5bb235
add dword[rbx+0x38],1
jmp 0x5bb923
mov r9,qword[rax+0x10]
mov r10,qword[rax+0x18]
mov qword[rsp+0x140],r9
mov qword[rsp+0x148],r10
jmp 0x5bb1ac
mov rdi,qword[rbx+0xe0]
test rdi,rdi
je 0x5bb8a6
mov rcx,rdi
mov qword[rbx+0xe0],0
call fcn.006b3f20
mov edx,0x58
mov rcx,rdi
call fcn.00a5af40
jmp 0x5bb8a6
mov edx,dword[rbx+0x40]
jmp 0x5bbb6b
mov edx,eax
lea eax,[rdx+1]
mov r14d,edx
or r14d,0x80000000
test edx,edx
cmovs r14d,eax
mov eax,edx
lock cmpxchg dword[r12],r14d
cmp eax,edx
jne 0x5bbb69
mov eax,r14d
shr eax,0x1f
test al,al
je 0x5bac11
shr edx,0x1f
test dl,dl
je 0x5bac11
lea r15,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r15],rax
test rax,rax
mov rdi,rax
mov r9,rax
je 0x5bc2f4
mov r15,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov edi,0xffffffff
xor r8d,r8d
mov edx,edi
mov rcx,r9
mov qword[rsp+0x68],r9
call r15
mov edx,r14d
mov r9,qword[rsp+0x68]
and edx,0x7fffffff
or edx,0x40000000
test edx,edx
js 0x5bbc16
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[r12],ecx
cmp eax,edx
je 0x5bac11
mov edx,eax
test edx,edx
jns 0x5bbbf1
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[r12],ecx
cmp eax,edx
jne 0x5bbc10
mov r14d,eax
jmp 0x5bbbc9
mov rax,qword[rsp+0x38]
mov rcx,qword[rsp+0xb0]
add rax,0x10
cmp rcx,rax
je 0x5ba97f
call fcn.00a5af30
jmp 0x5ba97f
mov rdx,qword[rsp+0x60]
mov rcx,qword[rsp+0x38]
call fcn.00a2df10
mov rax,qword[rsp+0x130]
jmp 0x5bb235
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x5bc1e8
mov rax,rbp
lock cmpxchg qword[r12],rcx
test rax,rax
mov rbp,rax
je 0x5bb0f4
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rbp
jmp 0x5bb0f4
mov r8,qword[rcx+0x118]
mov r9,qword[rcx+0x120]
mov rdx,qword[rcx+0x160]
mov rcx,qword[0x00a7d830]
sub r9,r8
movsxd r9,r9d
call fcn.00680030
mov dword[rsp+0x7c],eax
jmp 0x5ba9c2
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
mov rax,qword[rsp+0x80]
call rax
test rax,rax
mov rcx,rax
je 0x5bc251
mov rax,rdi
lock cmpxchg qword[r12],rcx
test rax,rax
mov rdi,rax
je 0x5bad34
mov rax,qword[rsp+0x88]
call rax
mov rcx,rdi
jmp 0x5bad34
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x5bc17f
mov rax,rbp
lock cmpxchg qword[r12],rcx
test rax,rax
mov rbp,rax
je 0x5bb614
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rbp
jmp 0x5bb614
mov edx,dword[rbx+0x40]
jmp 0x5bbda7
mov edx,eax
lea eax,[rdx+1]
mov r12d,edx
or r12d,0x80000000
test edx,edx
cmovs r12d,eax
mov eax,edx
lock cmpxchg dword[rdi],r12d
cmp eax,edx
jne 0x5bbda5
mov eax,r12d
shr eax,0x1f
test al,al
je 0x5bb915
shr edx,0x1f
test dl,dl
je 0x5bb915
lea r15,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r15],rax
test rax,rax
mov r13,rax
mov r9,rax
je 0x5bbf88
mov r15,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov r13d,0xffffffff
mov r14,r9
mov edx,r13d
xor r8d,r8d
mov rcx,r14
call r15
mov edx,r12d
and edx,0x7fffffff
or edx,0x40000000
jmp 0x5bbe48
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov r12d,eax
je 0x5bb915
test edx,edx
jns 0x5bbe25
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov r12d,eax
jne 0x5bbe45
movsxd rax,dword[rax+0x1840]
jmp 0x5bb3ab
xor ecx,ecx
mov qword[rsp+0x70],r10
xor r9d,r9d
xor r8d,r8d
xor edx,edx
mov qword[rsp+0x80],rax
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
mov r10,qword[rsp+0x70]
mov r11,qword[rsp+0x80]
je 0x5bc4df
mov rax,r11
lock cmpxchg qword[r10],rcx
test rax,rax
je 0x5bb691
mov qword[rsp+0x70],rax
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r11,qword[rsp+0x70]
mov rcx,r11
jmp 0x5bb691
mov qword[rsp+0x70],r10
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
mov qword[rsp+0x80],rax
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r14,rax
mov r10,qword[rsp+0x70]
mov r11,qword[rsp+0x80]
je 0x5bc548
mov rax,r11
lock cmpxchg qword[r10],r14
test rax,rax
je 0x5bb761
mov rcx,r14
mov qword[rsp+0x70],rax
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r11,qword[rsp+0x70]
mov r14,r11
jmp 0x5bb761
mov qword[rsp+0x68],r11
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
mov qword[rsp+0x70],rax
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r14,rax
mov r11,qword[rsp+0x68]
mov r10,qword[rsp+0x70]
je 0x5bbfc9
mov rax,r10
lock cmpxchg qword[r11],r14
test rax,rax
je 0x5bb820
mov rcx,r14
mov qword[rsp+0x68],rax
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rdx,qword[rsp+0x68]
mov r14,rdx
jmp 0x5bb820
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r9,rax
je 0x5bc032
mov rax,r13
lock cmpxchg qword[r15],r9
test rax,rax
mov r13,rax
je 0x5bbdf8
mov rcx,r9
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r9,r13
jmp 0x5bbdf8
lea rbx,[rsp+0x130]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x140],0xb
mov qword[rsp+0x148],rsi
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
lea rbx,[rsp+0x130]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x140],0xb
mov qword[rsp+0x148],rsi
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
lea rax,[0x00b72450]
mov rcx,rbx
mov qword[rsp+0x130],rax
call fcn.00962490
call fcn.00a55e20
jmp 0x5bc09b
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x5bc116
mov rax,rdi
lock cmpxchg qword[rbp],rcx
test rax,rax
mov rdi,rax
je 0x5bbac7
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rdi
jmp 0x5bbac7
lea rbx,[rsp+0x130]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x140],0xb
mov qword[rsp+0x148],rsi
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
call fcn.006ea660
mov rsi,qword[rsp+0x60]
lea rdx,[0x00aa940a]
mov rbx,rax
mov rcx,rsi
call fcn.009de540
mov rax,rsi
mov rcx,rsi
mov dword[rsp+0x140],0xb
add rax,0x30
mov qword[rsp+0x148],rbx
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
call fcn.006ea660
mov rsi,qword[rsp+0x60]
lea rdx,[0x00aa940a]
mov rbx,rax
mov rcx,rsi
call fcn.009de540
mov rax,rsi
mov rcx,rsi
mov dword[rsp+0x140],0xb
add rax,0x30
mov qword[rsp+0x148],rbx
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
lea rbx,[rsp+0x130]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x140],0xb
mov qword[rsp+0x148],rsi
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
jmp 0x5bc09b
mov rcx,qword[rsp+0x60]
lea rax,[0x00b72450]
mov qword[rsp+0x130],rax
call fcn.00962490
call fcn.00a55e20
jmp 0x5bc2bf
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r9,rax
je 0x5bc370
mov rax,rdi
lock cmpxchg qword[r15],r9
test rax,rax
mov rdi,rax
je 0x5bbbbd
mov rcx,r9
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r9,rdi
jmp 0x5bbbbd
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x5bc3d9
mov rax,rdi
lock cmpxchg qword[rbp],rcx
test rax,rax
mov rdi,rax
je 0x5bb9f5
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rdi
jmp 0x5bb9f5
lea rbx,[rsp+0x130]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x140],0xb
mov qword[rsp+0x148],rsi
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
lea rbx,[rsp+0x130]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x140],0xb
mov qword[rsp+0x148],rsi
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
jmp 0x5bc09b
mov ecx,0x28
call fcn.00a5b090
lea rdx,[0x00aa94a9]
lea rcx,[0x00aa9454]
mov rbx,rax
call fcn.007502b0
lea rsi,[rsp+0x130]
mov rdx,rax
mov rcx,rsi
call fcn.00a5fcd0
mov rdx,rsi
mov rcx,rbx
add rsi,0x10
call fcn.00940160
mov rcx,qword[rsp+0x130]
lea rax,[0x00b70110]
mov qword[rbx],rax
cmp rcx,rsi
je 0x5bc4aa
call fcn.00a5af30
lea r8,[0x009340a0]
lea rdx,[0x00b49f30]
mov rcx,rbx
call fcn.00a5b6d0
mov rsi,rax
mov rcx,rbx
call fcn.00a5b440
mov rcx,rsi
call fcn.008da260
lea rcx,[0x00aa94bb]
call fcn.00a4f830
call fcn.006ea660
mov rsi,qword[rsp+0x60]
lea rdx,[0x00aa940a]
mov rbx,rax
mov rcx,rsi
call fcn.009de540
mov rax,rsi
mov rcx,rsi
mov dword[rsp+0x140],0xb
add rax,0x30
mov qword[rsp+0x148],rbx
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
call fcn.006ea660
mov rsi,qword[rsp+0x60]
lea rdx,[0x00aa940a]
mov rbx,rax
mov rcx,rsi
call fcn.009de540
mov rax,rsi
mov rcx,rsi
mov dword[rsp+0x140],0xb
add rax,0x30
mov qword[rsp+0x148],rbx
mov qword[rsp+0x158],0
mov qword[rsp+0x150],rax
lea rax,[0x00b72480]
mov byte[rsp+0x160],0
mov qword[rsp+0x130],rax
call fcn.00947760
jmp 0x5bc2bf
{% endhighlight %}


[similar_1_ref]: /report/fcn.0069ed20@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_2_ref]: /report/fcn.00617220@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_3_ref]: /report/fcn.00680030@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_4_ref]: /report/fcn.00579b00@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_5_ref]: /report/fcn.00656050@a5905e3c253c25bbaf727a1a18fe8ed1
[virustotal_ref]: https://www.virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1