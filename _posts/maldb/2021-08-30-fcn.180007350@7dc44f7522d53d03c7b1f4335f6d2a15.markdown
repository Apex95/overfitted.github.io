---
layout: post
title:  "fcn.180007350 @ 7dc44f7522d53d03c7b1f4335f6d2a15"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.180007350
- **Origin (md5):** 7dc44f7522d53d03c7b1f4335f6d2a15
- **VirusTotal:** [virustotal.com/gui/file/7dc44f7522d53d03c7b1f4335f6d2a15][virustotal_ref]

# Code Tags
<span class="tag" id="FILE">FILE</span>


# Behaviour Tags
<span class="bhv-tag" id="na">N/A</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.180007350@7dc44f7522d53d03c7b1f4335f6d2a15">fcn.180007350</a><br>@7dc44f7522d53d03c7b1f4335f6d2a15</b><br>mov qword[rsp+0x20], rbx<br>push rbp<br>push rsi<br>push rdi<br>push r12<br>push r13<br>push r14<br>push r15<br>lea rbp, [rsp-0x1a40]<br>mov eax, 0x1b40<br>call fcn.180006e80<br>sub rsp, rax<br>mov rax, qword[0x1800141b0]<br>xor rax, rsp<br>mov qword[rbp+0x1a30], rax<br>xor r12d, r12d<br>mov r15d, r8d<br>mov r14, rdx<br>movsxd rdi, ecx<br>mov dword[rsp+0x40], r12d<br>mov ebx, r12d<br>mov esi, r12d<br>test r8d, r8d<br>jne 0x1800073a9<br>xor eax, eax<br>jmp 0x180007b17<br>test rdx, rdx<br>jne 0x1800073ce<br>call fcn.180004488<br>mov dword[rax], r12d<br>call fcn.1800044f8<br>mov dword[rax], 0x16<br>call fcn.180004148<br>or eax, 0xffffffff<br>jmp 0x180007b17<br>mov rax, rdi<br>mov rcx, rdi<br>lea rdx, [0x180014660]<br>sar rcx, 5<br>and eax, 0x1f<br>mov qword[rsp+0x48], rcx<br>mov rcx, qword[rdx+rcx*8]<br>imul r13, rax, 0x58<br>mov r12b, byte[r13+rcx+0x38]<br>mov qword[rsp+0x58], r13<br>add r12b, r12b<br>sar r12b, 1<br>lea eax, [r12-1]<br>cmp al, 1<br>ja 0x18000741c<br>mov eax, r15d<br>not eax<br>test al, 1<br>jne 0x18000741c<br>call fcn.180004488<br>xor ecx, ecx<br>mov dword[rax], ecx<br>jmp 0x1800073b6<br>test byte[r13+rcx+8], 0x20<br>je 0x180007431<br>xor edx, edx<br>mov ecx, edi<br>lea r8d, [rdx+2]<br>call fcn.180007f78<br>mov ecx, edi<br>call fcn.180006b60<br>mov rdi, qword[rsp+0x48]<br>test eax, eax<br>je 0x180007785<br>lea rax, [0x180014660]<br>mov rax, qword[rax+rdi*8]<br>test byte[r13+rax+8], 0x80<br>je 0x180007785<br>call fcn.180001618<br>lea rdx, [rsp+0x64]<br>mov rcx, qword[rax+0xc0]<br>xor eax, eax<br>cmp qword[rcx+0x138], rax<br>mov edi, eax<br>mov rax, qword[rsp+0x48]<br>lea rcx, [0x180014660]<br>sete dil<br>mov rcx, qword[rcx+rax*8]<br>mov rcx, qword[r13+rcx]<br>call qword[sym.imp.KERNEL32.dll_GetConsoleMode]<br>xor ecx, ecx<br>test eax, eax<br>je 0x180007780<br>xor eax, eax<br>test edi, edi<br>je 0x1800074b0<br>test r12b, r12b<br>je 0x180007779<br>call qword[sym.imp.KERNEL32.dll_GetConsoleCP]<br>mov rdi, r14<br>mov dword[rsp+0x68], eax<br>xor eax, eax<br>movzx ecx, ax<br>mov word[rsp+0x44], ax<br>mov dword[rsp+0x60], eax<br>test r15d, r15d<br>je 0x180007ada<br>mov r13d, eax<br>test r12b, r12b<br>jne 0x180007683<br>mov cl, byte[rdi]<br>mov r13, qword[rsp+0x58]<br>lea rdx, [0x180014660]<br>cmp cl, 0xa<br>sete al<br>xor r8d, r8d<br>mov dword[rsp+0x64], eax<br>mov rax, qword[rsp+0x48]<br>mov rdx, qword[rdx+rax*8]<br>cmp dword[r13+rdx+0x50], r8d<br>je 0x18000752a<br>mov al, byte[r13+rdx+0x4c]<br>mov byte[rsp+0x6d], cl<br>mov byte[rsp+0x6c], al<br>mov dword[r13+rdx+0x50], r8d<br>mov r8d, 2<br>lea rdx, [rsp+0x6c]<br>jmp 0x180007573<br>movsx ecx, cl<br>call fcn.180007f30<br>test eax, eax<br>je 0x18000756a<br>mov rax, r15<br>sub rax, rdi<br>add rax, r14<br>cmp rax, 1<br>jle 0x1800076fc<br>lea rcx, [rsp+0x44]<br>mov r8d, 2<br>mov rdx, rdi<br>call fcn.180008160<br>cmp eax, 0xffffffff<br>je 0x18000773e<br>inc rdi<br>jmp 0x180007586<br>mov r8d, 1<br>mov rdx, rdi<br>lea rcx, [rsp+0x44]<br>call fcn.180008160<br>cmp eax, 0xffffffff<br>je 0x18000773e<br>mov ecx, dword[rsp+0x68]<br>xor eax, eax<br>lea r8, [rsp+0x44]<br>mov qword[rsp+0x38], rax<br>mov qword[rsp+0x30], rax<br>lea rax, [rsp+0x6c]<br>mov r9d, 1<br>xor edx, edx<br>mov dword[rsp+0x28], 5<br>mov qword[rsp+0x20], rax<br>inc rdi<br>call qword[sym.imp.KERNEL32.dll_WideCharToMultiByte]<br>mov r13d, eax<br>test eax, eax<br>je 0x180007739<br>mov rax, qword[rsp+0x48]<br>lea rcx, [0x180014660]<br>lea r9, [rsp+0x60]<br>mov rcx, qword[rcx+rax*8]<br>xor eax, eax<br>lea rdx, [rsp+0x6c]<br>mov qword[rsp+0x20], rax<br>mov rax, qword[rsp+0x58]<br>mov r8d, r13d<br>mov rcx, qword[rax+rcx]<br>call qword[sym.imp.KERNEL32.dll_WriteFile]<br>test eax, eax<br>je 0x180007731<br>mov eax, dword[rsp+0x40]<br>mov ebx, edi<br>sub ebx, r14d<br>add ebx, eax<br>cmp dword[rsp+0x60], r13d<br>jl 0x180007abf<br>xor r13d, r13d<br>cmp dword[rsp+0x64], r13d<br>je 0x18000767c<br>mov rax, qword[rsp+0x48]<br>lea r8d, [r13+1]<br>mov byte[rsp+0x6c], 0xd<br>lea rcx, [0x180014660]<br>mov qword[rsp+0x20], r13<br>mov r13, qword[rsp+0x58]<br>mov rcx, qword[rcx+rax*8]<br>lea r9, [rsp+0x60]<br>lea rdx, [rsp+0x6c]<br>mov rcx, qword[r13+rcx]<br>call qword[sym.imp.KERNEL32.dll_WriteFile]<br>test eax, eax<br>je 0x180007727<br>cmp dword[rsp+0x60], 1<br>jl 0x18000773e<br>inc dword[rsp+0x40]<br>movzx ecx, word[rsp+0x44]<br>inc ebx<br>jmp 0x1800076eb<br>movzx ecx, word[rsp+0x44]<br>jmp 0x1800076e6<br>lea eax, [r12-1]<br>cmp al, 1<br>ja 0x1800076a5<br>movzx ecx, word[rdi]<br>xor eax, eax<br>cmp cx, 0xa<br>mov r13d, eax<br>mov word[rsp+0x44], cx<br>sete r13b<br>add rdi, 2<br>lea eax, [r12-1]<br>cmp al, 1<br>ja 0x1800076e6<br>call fcn.180008168<br>movzx ecx, word[rsp+0x44]<br>cmp ax, cx<br>jne 0x180007731<br>add ebx, 2<br>test r13d, r13d<br>je 0x1800076e6<br>mov eax, 0xd<br>mov ecx, eax<br>mov word[rsp+0x44], ax<br>call fcn.180008168<br>movzx ecx, word[rsp+0x44]<br>cmp ax, cx<br>jne 0x180007731<br>inc ebx<br>inc dword[rsp+0x40]<br>mov r13, qword[rsp+0x58]<br>mov eax, edi<br>sub eax, r14d<br>cmp eax, r15d<br>jae 0x18000773e<br>xor eax, eax<br>jmp 0x1800074d4<br>mov al, byte[rdi]<br>mov r15, qword[rsp+0x48]<br>lea r12, [0x180014660]<br>mov rcx, qword[r12+r15*8]<br>inc ebx<br>mov rdi, r15<br>mov byte[r13+rcx+0x4c], al<br>mov rax, qword[r12+r15*8]<br>mov dword[r13+rax+0x50], 1<br>jmp 0x180007743<br>call qword[sym.imp.KERNEL32.dll_GetLastError]<br>mov esi, eax<br>jmp 0x18000773e<br>call qword[sym.imp.KERNEL32.dll_GetLastError]<br>mov esi, eax<br>mov r13, qword[rsp+0x58]<br>mov rdi, qword[rsp+0x48]<br>mov eax, dword[rsp+0x40]<br>test ebx, ebx<br>jne 0x180007b13<br>xor ebx, ebx<br>test esi, esi<br>je 0x180007adf<br>cmp esi, 5<br>jne 0x180007ace<br>call fcn.1800044f8<br>mov dword[rax], 9<br>call fcn.180004488<br>mov dword[rax], esi<br>jmp 0x1800073c6<br>mov rdi, qword[rsp+0x48]<br>jmp 0x180007787<br>mov rdi, qword[rsp+0x48]<br>xor eax, eax<br>lea r9, [0x180014660]<br>mov rcx, qword[r9+rdi*8]<br>test byte[r13+rcx+8], 0x80<br>je 0x180007a86<br>mov esi, eax<br>test r12b, r12b<br>jne 0x180007881<br>mov r12, r14<br>test r15d, r15d<br>je 0x180007adf<br>mov edx, 0xd<br>jmp 0x1800077be<br>xor eax, eax<br>mov r13d, dword[rsp+0x40]<br>lea rdi, [rbp+0x630]<br>mov rcx, rax<br>mov eax, r12d<br>sub eax, r14d<br>cmp eax, r15d<br>jae 0x1800077ff<br>mov al, byte[r12]<br>inc r12<br>cmp al, 0xa<br>jne 0x1800077ee<br>mov byte[rdi], dl<br>inc r13d<br>inc rdi<br>inc rcx<br>inc rcx<br>mov byte[rdi], al<br>inc rdi<br>cmp rcx, 0x13ff<br>jb 0x1800077cd<br>lea rax, [rbp+0x630]<br>mov r8d, edi<br>mov dword[rsp+0x40], r13d<br>mov r13, qword[rsp+0x58]<br>sub r8d, eax<br>mov rax, qword[rsp+0x48]<br>mov rcx, qword[r9+rax*8]<br>xor eax, eax<br>lea r9, [rsp+0x50]<br>mov rcx, qword[r13+rcx]<br>lea rdx, [rbp+0x630]<br>mov qword[rsp+0x20], rax<br>call qword[sym.imp.KERNEL32.dll_WriteFile]<br>test eax, eax<br>je 0x180007727<br>add ebx, dword[rsp+0x50]<br>lea rax, [rbp+0x630]<br>sub rdi, rax<br>movsxd rax, dword[rsp+0x50]<br>cmp rax, rdi<br>jl 0x18000773e<br>mov eax, r12d<br>mov edx, 0xd<br>lea r9, [0x180014660]<br>sub eax, r14d<br>cmp eax, r15d<br>jb 0x1800077bc<br>jmp 0x18000773e<br>cmp r12b, 2<br>mov r12, r14<br>jne 0x18000796e<br>test r15d, r15d<br>je 0x180007adf<br>mov edx, 0xd<br>jmp 0x1800078a0<br>xor eax, eax<br>mov r13d, dword[rsp+0x40]<br>lea rdi, [rbp+0x630]<br>mov rcx, rax<br>mov eax, r12d<br>sub eax, r14d<br>cmp eax, r15d<br>jae 0x1800078ec<br>movzx eax, word[r12]<br>add r12, 2<br>cmp ax, 0xa<br>jne 0x1800078d8<br>mov word[rdi], dx<br>add r13d, 2<br>add rdi, 2<br>add rcx, 2<br>add rcx, 2<br>mov word[rdi], ax<br>add rdi, 2<br>cmp rcx, 0x13fe<br>jb 0x1800078af<br>lea rax, [rbp+0x630]<br>mov r8d, edi<br>mov dword[rsp+0x40], r13d<br>mov r13, qword[rsp+0x58]<br>sub r8d, eax<br>mov rax, qword[rsp+0x48]<br>mov rcx, qword[r9+rax*8]<br>xor eax, eax<br>lea r9, [rsp+0x50]<br>mov rcx, qword[r13+rcx]<br>lea rdx, [rbp+0x630]<br>mov qword[rsp+0x20], rax<br>call qword[sym.imp.KERNEL32.dll_WriteFile]<br>test eax, eax<br>je 0x180007727<br>add ebx, dword[rsp+0x50]<br>lea rax, [rbp+0x630]<br>sub rdi, rax<br>movsxd rax, dword[rsp+0x50]<br>cmp rax, rdi<br>jl 0x18000773e<br>mov eax, r12d<br>mov edx, 0xd<br>lea r9, [0x180014660]<br>sub eax, r14d<br>cmp eax, r15d<br>jb 0x18000789e<br>jmp 0x18000773e<br>test r15d, r15d<br>je 0x180007adf<br>mov r8d, 0xd<br>jmp 0x180007981<br>xor eax, eax<br>lea rcx, [rbp-0x80]<br>mov rdx, rax<br>mov eax, r12d<br>sub eax, r14d<br>cmp eax, r15d<br>jae 0x1800079c2<br>movzx eax, word[r12]<br>add r12, 2<br>cmp ax, 0xa<br>jne 0x1800079ae<br>mov word[rcx], r8w<br>add rcx, 2<br>add rdx, 2<br>add rdx, 2<br>mov word[rcx], ax<br>add rcx, 2<br>cmp rdx, 0x6a8<br>jb 0x180007988<br>lea rax, [rbp-0x80]<br>xor edi, edi<br>lea r8, [rbp-0x80]<br>sub ecx, eax<br>mov qword[rsp+0x38], rdi<br>mov qword[rsp+0x30], rdi<br>mov eax, ecx<br>mov ecx, 0xfde9<br>mov dword[rsp+0x28], 0xd55<br>cdq <br>sub eax, edx<br>xor edx, edx<br>sar eax, 1<br>mov r9d, eax<br>lea rax, [rbp+0x630]<br>mov qword[rsp+0x20], rax<br>call qword[sym.imp.KERNEL32.dll_WideCharToMultiByte]<br>mov r13d, eax<br>test eax, eax<br>je 0x180007731<br>movsxd rax, edi<br>mov r8d, r13d<br>lea rdx, [rbp+0x630]<br>add rdx, rax<br>mov rax, qword[rsp+0x48]<br>lea rcx, [0x180014660]<br>mov rcx, qword[rcx+rax*8]<br>xor eax, eax<br>lea r9, [rsp+0x50]<br>mov qword[rsp+0x20], rax<br>mov rax, qword[rsp+0x58]<br>sub r8d, edi<br>mov rcx, qword[rax+rcx]<br>call qword[sym.imp.KERNEL32.dll_WriteFile]<br>test eax, eax<br>je 0x180007a5b<br>add edi, dword[rsp+0x50]<br>cmp r13d, edi<br>jg 0x180007a0e<br>jmp 0x180007a63<br>call qword[sym.imp.KERNEL32.dll_GetLastError]<br>mov esi, eax<br>cmp r13d, edi<br>jg 0x180007739<br>mov ebx, r12d<br>mov r8d, 0xd<br>sub ebx, r14d<br>cmp ebx, r15d<br>jb 0x18000797f<br>jmp 0x180007739<br>mov rcx, qword[r13+rcx]<br>lea r9, [rsp+0x50]<br>mov r8d, r15d<br>mov rdx, r14<br>mov qword[rsp+0x20], rax<br>call qword[sym.imp.KERNEL32.dll_WriteFile]<br>test eax, eax<br>je 0x180007ab0<br>mov ebx, dword[rsp+0x50]<br>mov eax, esi<br>jmp 0x180007747<br>call qword[sym.imp.KERNEL32.dll_GetLastError]<br>mov esi, eax<br>mov eax, ebx<br>jmp 0x180007747<br>mov r13, qword[rsp+0x58]<br>mov rdi, qword[rsp+0x48]<br>jmp 0x180007747<br>mov ecx, esi<br>call fcn.1800044a8<br>jmp 0x1800073c6<br>mov rdi, qword[rsp+0x48]<br>lea rax, [0x180014660]<br>mov rax, qword[rax+rdi*8]<br>test byte[r13+rax+8], 0x40<br>je 0x180007afc<br>cmp byte[r14], 0x1a<br>je 0x1800073a2<br>call fcn.1800044f8<br>mov dword[rax], 0x1c<br>call fcn.180004488<br>mov dword[rax], ebx<br>jmp 0x1800073c6<br>sub ebx, eax<br>mov eax, ebx<br>mov rcx, qword[rbp+0x1a30]<br>xor rcx, rsp<br>call fcn.180005c80<br>mov rbx, qword[rsp+0x1b98]<br>add rsp, 0x1b40<br>pop r15<br>pop r14<br>pop r13<br>pop r12<br>pop rdi<br>pop rsi<br>pop rbp<br>ret <br><eoc> ', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

mov qword[rsp+0x20], rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp, [rsp-0x1a40]
mov eax, 0x1b40
call fcn.180006e80
sub rsp, rax
mov rax, qword[0x1800141b0]
xor rax, rsp
mov qword[rbp+0x1a30], rax
xor r12d, r12d
mov r15d, r8d
mov r14, rdx
movsxd rdi, ecx
mov dword[rsp+0x40], r12d
mov ebx, r12d
mov esi, r12d
test r8d, r8d
jne 0x1800073a9
xor eax, eax
jmp 0x180007b17
test rdx, rdx
jne 0x1800073ce
call fcn.180004488
mov dword[rax], r12d
call fcn.1800044f8
mov dword[rax], 0x16
call fcn.180004148
or eax, 0xffffffff
jmp 0x180007b17
mov rax, rdi
mov rcx, rdi
lea rdx, [0x180014660]
sar rcx, 5
and eax, 0x1f
mov qword[rsp+0x48], rcx
mov rcx, qword[rdx+rcx*8]
imul r13, rax, 0x58
mov r12b, byte[r13+rcx+0x38]
mov qword[rsp+0x58], r13
add r12b, r12b
sar r12b, 1
lea eax, [r12-1]
cmp al, 1
ja 0x18000741c
mov eax, r15d
not eax
test al, 1
jne 0x18000741c
call fcn.180004488
xor ecx, ecx
mov dword[rax], ecx
jmp 0x1800073b6
test byte[r13+rcx+8], 0x20
je 0x180007431
xor edx, edx
mov ecx, edi
lea r8d, [rdx+2]
call fcn.180007f78
mov ecx, edi
call fcn.180006b60
mov rdi, qword[rsp+0x48]
test eax, eax
je 0x180007785
lea rax, [0x180014660]
mov rax, qword[rax+rdi*8]
test byte[r13+rax+8], 0x80
je 0x180007785
call fcn.180001618
lea rdx, [rsp+0x64]
mov rcx, qword[rax+0xc0]
xor eax, eax
cmp qword[rcx+0x138], rax
mov edi, eax
mov rax, qword[rsp+0x48]
lea rcx, [0x180014660]
sete dil
mov rcx, qword[rcx+rax*8]
mov rcx, qword[r13+rcx]
call qword[sym.imp.KERNEL32.dll_GetConsoleMode]
xor ecx, ecx
test eax, eax
je 0x180007780
xor eax, eax
test edi, edi
je 0x1800074b0
test r12b, r12b
je 0x180007779
call qword[sym.imp.KERNEL32.dll_GetConsoleCP]
mov rdi, r14
mov dword[rsp+0x68], eax
xor eax, eax
movzx ecx, ax
mov word[rsp+0x44], ax
mov dword[rsp+0x60], eax
test r15d, r15d
je 0x180007ada
mov r13d, eax
test r12b, r12b
jne 0x180007683
mov cl, byte[rdi]
mov r13, qword[rsp+0x58]
lea rdx, [0x180014660]
cmp cl, 0xa
sete al
xor r8d, r8d
mov dword[rsp+0x64], eax
mov rax, qword[rsp+0x48]
mov rdx, qword[rdx+rax*8]
cmp dword[r13+rdx+0x50], r8d
je 0x18000752a
mov al, byte[r13+rdx+0x4c]
mov byte[rsp+0x6d], cl
mov byte[rsp+0x6c], al
mov dword[r13+rdx+0x50], r8d
mov r8d, 2
lea rdx, [rsp+0x6c]
jmp 0x180007573
movsx ecx, cl
call fcn.180007f30
test eax, eax
je 0x18000756a
mov rax, r15
sub rax, rdi
add rax, r14
cmp rax, 1
jle 0x1800076fc
lea rcx, [rsp+0x44]
mov r8d, 2
mov rdx, rdi
call fcn.180008160
cmp eax, 0xffffffff
je 0x18000773e
inc rdi
jmp 0x180007586
mov r8d, 1
mov rdx, rdi
lea rcx, [rsp+0x44]
call fcn.180008160
cmp eax, 0xffffffff
je 0x18000773e
mov ecx, dword[rsp+0x68]
xor eax, eax
lea r8, [rsp+0x44]
mov qword[rsp+0x38], rax
mov qword[rsp+0x30], rax
lea rax, [rsp+0x6c]
mov r9d, 1
xor edx, edx
mov dword[rsp+0x28], 5
mov qword[rsp+0x20], rax
inc rdi
call qword[sym.imp.KERNEL32.dll_WideCharToMultiByte]
mov r13d, eax
test eax, eax
je 0x180007739
mov rax, qword[rsp+0x48]
lea rcx, [0x180014660]
lea r9, [rsp+0x60]
mov rcx, qword[rcx+rax*8]
xor eax, eax
lea rdx, [rsp+0x6c]
mov qword[rsp+0x20], rax
mov rax, qword[rsp+0x58]
mov r8d, r13d
mov rcx, qword[rax+rcx]
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je 0x180007731
mov eax, dword[rsp+0x40]
mov ebx, edi
sub ebx, r14d
add ebx, eax
cmp dword[rsp+0x60], r13d
jl 0x180007abf
xor r13d, r13d
cmp dword[rsp+0x64], r13d
je 0x18000767c
mov rax, qword[rsp+0x48]
lea r8d, [r13+1]
mov byte[rsp+0x6c], 0xd
lea rcx, [0x180014660]
mov qword[rsp+0x20], r13
mov r13, qword[rsp+0x58]
mov rcx, qword[rcx+rax*8]
lea r9, [rsp+0x60]
lea rdx, [rsp+0x6c]
mov rcx, qword[r13+rcx]
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je 0x180007727
cmp dword[rsp+0x60], 1
jl 0x18000773e
inc dword[rsp+0x40]
movzx ecx, word[rsp+0x44]
inc ebx
jmp 0x1800076eb
movzx ecx, word[rsp+0x44]
jmp 0x1800076e6
lea eax, [r12-1]
cmp al, 1
ja 0x1800076a5
movzx ecx, word[rdi]
xor eax, eax
cmp cx, 0xa
mov r13d, eax
mov word[rsp+0x44], cx
sete r13b
add rdi, 2
lea eax, [r12-1]
cmp al, 1
ja 0x1800076e6
call fcn.180008168
movzx ecx, word[rsp+0x44]
cmp ax, cx
jne 0x180007731
add ebx, 2
test r13d, r13d
je 0x1800076e6
mov eax, 0xd
mov ecx, eax
mov word[rsp+0x44], ax
call fcn.180008168
movzx ecx, word[rsp+0x44]
cmp ax, cx
jne 0x180007731
inc ebx
inc dword[rsp+0x40]
mov r13, qword[rsp+0x58]
mov eax, edi
sub eax, r14d
cmp eax, r15d
jae 0x18000773e
xor eax, eax
jmp 0x1800074d4
mov al, byte[rdi]
mov r15, qword[rsp+0x48]
lea r12, [0x180014660]
mov rcx, qword[r12+r15*8]
inc ebx
mov rdi, r15
mov byte[r13+rcx+0x4c], al
mov rax, qword[r12+r15*8]
mov dword[r13+rax+0x50], 1
jmp 0x180007743
call qword[sym.imp.KERNEL32.dll_GetLastError]
mov esi, eax
jmp 0x18000773e
call qword[sym.imp.KERNEL32.dll_GetLastError]
mov esi, eax
mov r13, qword[rsp+0x58]
mov rdi, qword[rsp+0x48]
mov eax, dword[rsp+0x40]
test ebx, ebx
jne 0x180007b13
xor ebx, ebx
test esi, esi
je 0x180007adf
cmp esi, 5
jne 0x180007ace
call fcn.1800044f8
mov dword[rax], 9
call fcn.180004488
mov dword[rax], esi
jmp 0x1800073c6
mov rdi, qword[rsp+0x48]
jmp 0x180007787
mov rdi, qword[rsp+0x48]
xor eax, eax
lea r9, [0x180014660]
mov rcx, qword[r9+rdi*8]
test byte[r13+rcx+8], 0x80
je 0x180007a86
mov esi, eax
test r12b, r12b
jne 0x180007881
mov r12, r14
test r15d, r15d
je 0x180007adf
mov edx, 0xd
jmp 0x1800077be
xor eax, eax
mov r13d, dword[rsp+0x40]
lea rdi, [rbp+0x630]
mov rcx, rax
mov eax, r12d
sub eax, r14d
cmp eax, r15d
jae 0x1800077ff
mov al, byte[r12]
inc r12
cmp al, 0xa
jne 0x1800077ee
mov byte[rdi], dl
inc r13d
inc rdi
inc rcx
inc rcx
mov byte[rdi], al
inc rdi
cmp rcx, 0x13ff
jb 0x1800077cd
lea rax, [rbp+0x630]
mov r8d, edi
mov dword[rsp+0x40], r13d
mov r13, qword[rsp+0x58]
sub r8d, eax
mov rax, qword[rsp+0x48]
mov rcx, qword[r9+rax*8]
xor eax, eax
lea r9, [rsp+0x50]
mov rcx, qword[r13+rcx]
lea rdx, [rbp+0x630]
mov qword[rsp+0x20], rax
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je 0x180007727
add ebx, dword[rsp+0x50]
lea rax, [rbp+0x630]
sub rdi, rax
movsxd rax, dword[rsp+0x50]
cmp rax, rdi
jl 0x18000773e
mov eax, r12d
mov edx, 0xd
lea r9, [0x180014660]
sub eax, r14d
cmp eax, r15d
jb 0x1800077bc
jmp 0x18000773e
cmp r12b, 2
mov r12, r14
jne 0x18000796e
test r15d, r15d
je 0x180007adf
mov edx, 0xd
jmp 0x1800078a0
xor eax, eax
mov r13d, dword[rsp+0x40]
lea rdi, [rbp+0x630]
mov rcx, rax
mov eax, r12d
sub eax, r14d
cmp eax, r15d
jae 0x1800078ec
movzx eax, word[r12]
add r12, 2
cmp ax, 0xa
jne 0x1800078d8
mov word[rdi], dx
add r13d, 2
add rdi, 2
add rcx, 2
add rcx, 2
mov word[rdi], ax
add rdi, 2
cmp rcx, 0x13fe
jb 0x1800078af
lea rax, [rbp+0x630]
mov r8d, edi
mov dword[rsp+0x40], r13d
mov r13, qword[rsp+0x58]
sub r8d, eax
mov rax, qword[rsp+0x48]
mov rcx, qword[r9+rax*8]
xor eax, eax
lea r9, [rsp+0x50]
mov rcx, qword[r13+rcx]
lea rdx, [rbp+0x630]
mov qword[rsp+0x20], rax
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je 0x180007727
add ebx, dword[rsp+0x50]
lea rax, [rbp+0x630]
sub rdi, rax
movsxd rax, dword[rsp+0x50]
cmp rax, rdi
jl 0x18000773e
mov eax, r12d
mov edx, 0xd
lea r9, [0x180014660]
sub eax, r14d
cmp eax, r15d
jb 0x18000789e
jmp 0x18000773e
test r15d, r15d
je 0x180007adf
mov r8d, 0xd
jmp 0x180007981
xor eax, eax
lea rcx, [rbp-0x80]
mov rdx, rax
mov eax, r12d
sub eax, r14d
cmp eax, r15d
jae 0x1800079c2
movzx eax, word[r12]
add r12, 2
cmp ax, 0xa
jne 0x1800079ae
mov word[rcx], r8w
add rcx, 2
add rdx, 2
add rdx, 2
mov word[rcx], ax
add rcx, 2
cmp rdx, 0x6a8
jb 0x180007988
lea rax, [rbp-0x80]
xor edi, edi
lea r8, [rbp-0x80]
sub ecx, eax
mov qword[rsp+0x38], rdi
mov qword[rsp+0x30], rdi
mov eax, ecx
mov ecx, 0xfde9
mov dword[rsp+0x28], 0xd55
cdq
sub eax, edx
xor edx, edx
sar eax, 1
mov r9d, eax
lea rax, [rbp+0x630]
mov qword[rsp+0x20], rax
call qword[sym.imp.KERNEL32.dll_WideCharToMultiByte]
mov r13d, eax
test eax, eax
je 0x180007731
movsxd rax, edi
mov r8d, r13d
lea rdx, [rbp+0x630]
add rdx, rax
mov rax, qword[rsp+0x48]
lea rcx, [0x180014660]
mov rcx, qword[rcx+rax*8]
xor eax, eax
lea r9, [rsp+0x50]
mov qword[rsp+0x20], rax
mov rax, qword[rsp+0x58]
sub r8d, edi
mov rcx, qword[rax+rcx]
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je 0x180007a5b
add edi, dword[rsp+0x50]
cmp r13d, edi
jg 0x180007a0e
jmp 0x180007a63
call qword[sym.imp.KERNEL32.dll_GetLastError]
mov esi, eax
cmp r13d, edi
jg 0x180007739
mov ebx, r12d
mov r8d, 0xd
sub ebx, r14d
cmp ebx, r15d
jb 0x18000797f
jmp 0x180007739
mov rcx, qword[r13+rcx]
lea r9, [rsp+0x50]
mov r8d, r15d
mov rdx, r14
mov qword[rsp+0x20], rax
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je 0x180007ab0
mov ebx, dword[rsp+0x50]
mov eax, esi
jmp 0x180007747
call qword[sym.imp.KERNEL32.dll_GetLastError]
mov esi, eax
mov eax, ebx
jmp 0x180007747
mov r13, qword[rsp+0x58]
mov rdi, qword[rsp+0x48]
jmp 0x180007747
mov ecx, esi
call fcn.1800044a8
jmp 0x1800073c6
mov rdi, qword[rsp+0x48]
lea rax, [0x180014660]
mov rax, qword[rax+rdi*8]
test byte[r13+rax+8], 0x40
je 0x180007afc
cmp byte[r14], 0x1a
je 0x1800073a2
call fcn.1800044f8
mov dword[rax], 0x1c
call fcn.180004488
mov dword[rax], ebx
jmp 0x1800073c6
sub ebx, eax
mov eax, ebx
mov rcx, qword[rbp+0x1a30]
xor rcx, rsp
call fcn.180005c80
mov rbx, qword[rsp+0x1b98]
add rsp, 0x1b40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/7dc44f7522d53d03c7b1f4335f6d2a15