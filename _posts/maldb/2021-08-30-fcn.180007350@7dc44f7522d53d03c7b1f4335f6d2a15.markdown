---
layout: post
title:  "fcn.180007350 @ 7dc44f7522d53d03c7b1f4335f6d2a15"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.180007350
- **Origin (md5):** 7dc44f7522d53d03c7b1f4335f6d2a15
- **VirusTotal:** [virustotal.com/gui/file/7dc44f7522d53d03c7b1f4335f6d2a15][virustotal_ref]

# Code Tags
<span class="tag" id="FILE">FILE</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.180007350@7dc44f7522d53d03c7b1f4335f6d2a15">fcn.180007350</a><br>@7dc44f7522d53d03c7b1f4335f6d2a15</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

mov qword[rsp+0x20], rbx
push rbp
push rsi
push rdi
push r12
push r13
push r14
push r15
lea rbp, [rsp-0x1a40]
mov eax, 0x1b40
call fcn.180006e80
sub rsp, rax
mov rax, qword[0x1800141b0]
xor rax, rsp
mov qword[rbp+0x1a30], rax
xor r12d, r12d
mov r15d, r8d
mov r14, rdx
movsxd rdi, ecx
mov dword[rsp+0x40], r12d
mov ebx, r12d
mov esi, r12d
test r8d, r8d
jne off.b89
xor eax, eax
jmp off.b1991
test rdx, rdx
jne off.b126
call fcn.180004488
mov dword[rax], r12d
call fcn.1800044f8
mov dword[rax], 0x16
call fcn.180004148
or eax, 0xffffffff
jmp off.b1991
mov rax, rdi
mov rcx, rdi
lea rdx, [0x180014660]
sar rcx, 5
and eax, 0x1f
mov qword[rsp+0x48], rcx
mov rcx, qword[rdx+rcx*8]
imul r13, rax, 0x58
mov r12b, byte[r13+rcx+0x38]
mov qword[rsp+0x58], r13
add r12b, r12b
sar r12b, 1
lea eax, [r12-1]
cmp al, 1
ja off.b204
mov eax, r15d
not eax
test al, 1
jne off.b204
call fcn.180004488
xor ecx, ecx
mov dword[rax], ecx
jmp off.b102
test byte[r13+rcx+8], 0x20
je off.b225
xor edx, edx
mov ecx, edi
lea r8d, [rdx+2]
call fcn.180007f78
mov ecx, edi
call fcn.180006b60
mov rdi, qword[rsp+0x48]
test eax, eax
je off.b1077
lea rax, [0x180014660]
mov rax, qword[rax+rdi*8]
test byte[r13+rax+8], 0x80
je off.b1077
call fcn.180001618
lea rdx, [rsp+0x64]
mov rcx, qword[rax+0xc0]
xor eax, eax
cmp qword[rcx+0x138], rax
mov edi, eax
mov rax, qword[rsp+0x48]
lea rcx, [0x180014660]
sete dil
mov rcx, qword[rcx+rax*8]
mov rcx, qword[r13+rcx]
call qword[sym.imp.KERNEL32.dll_GetConsoleMode]
xor ecx, ecx
test eax, eax
je off.b1072
xor eax, eax
test edi, edi
je off.b352
test r12b, r12b
je off.b1065
call qword[sym.imp.KERNEL32.dll_GetConsoleCP]
mov rdi, r14
mov dword[rsp+0x68], eax
xor eax, eax
movzx ecx, ax
mov word[rsp+0x44], ax
mov dword[rsp+0x60], eax
test r15d, r15d
je off.b1930
mov r13d, eax
test r12b, r12b
jne off.b819
mov cl, byte[rdi]
mov r13, qword[rsp+0x58]
lea rdx, [0x180014660]
cmp cl, 0xa
sete al
xor r8d, r8d
mov dword[rsp+0x64], eax
mov rax, qword[rsp+0x48]
mov rdx, qword[rdx+rax*8]
cmp dword[r13+rdx+0x50], r8d
je off.b474
mov al, byte[r13+rdx+0x4c]
mov byte[rsp+0x6d], cl
mov byte[rsp+0x6c], al
mov dword[r13+rdx+0x50], r8d
mov r8d, 2
lea rdx, [rsp+0x6c]
jmp off.b547
movsx ecx, cl
call fcn.180007f30
test eax, eax
je off.b538
mov rax, r15
sub rax, rdi
add rax, r14
cmp rax, 1
jle off.b940
lea rcx, [rsp+0x44]
mov r8d, 2
mov rdx, rdi
call fcn.180008160
cmp eax, 0xffffffff
je off.b1006
inc rdi
jmp off.b566
mov r8d, 1
mov rdx, rdi
lea rcx, [rsp+0x44]
call fcn.180008160
cmp eax, 0xffffffff
je off.b1006
mov ecx, dword[rsp+0x68]
xor eax, eax
lea r8, [rsp+0x44]
mov qword[rsp+0x38], rax
mov qword[rsp+0x30], rax
lea rax, [rsp+0x6c]
mov r9d, 1
xor edx, edx
mov dword[rsp+0x28], 5
mov qword[rsp+0x20], rax
inc rdi
call qword[sym.imp.KERNEL32.dll_WideCharToMultiByte]
mov r13d, eax
test eax, eax
je off.b1001
mov rax, qword[rsp+0x48]
lea rcx, [0x180014660]
lea r9, [rsp+0x60]
mov rcx, qword[rcx+rax*8]
xor eax, eax
lea rdx, [rsp+0x6c]
mov qword[rsp+0x20], rax
mov rax, qword[rsp+0x58]
mov r8d, r13d
mov rcx, qword[rax+rcx]
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b993
mov eax, dword[rsp+0x40]
mov ebx, edi
sub ebx, r14d
add ebx, eax
cmp dword[rsp+0x60], r13d
jl off.b1903
xor r13d, r13d
cmp dword[rsp+0x64], r13d
je off.b812
mov rax, qword[rsp+0x48]
lea r8d, [r13+1]
mov byte[rsp+0x6c], 0xd
lea rcx, [0x180014660]
mov qword[rsp+0x20], r13
mov r13, qword[rsp+0x58]
mov rcx, qword[rcx+rax*8]
lea r9, [rsp+0x60]
lea rdx, [rsp+0x6c]
mov rcx, qword[r13+rcx]
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b983
cmp dword[rsp+0x60], 1
jl off.b1006
inc dword[rsp+0x40]
movzx ecx, word[rsp+0x44]
inc ebx
jmp off.b923
movzx ecx, word[rsp+0x44]
jmp off.b918
lea eax, [r12-1]
cmp al, 1
ja off.b853
movzx ecx, word[rdi]
xor eax, eax
cmp cx, 0xa
mov r13d, eax
mov word[rsp+0x44], cx
sete r13b
add rdi, 2
lea eax, [r12-1]
cmp al, 1
ja off.b918
call fcn.180008168
movzx ecx, word[rsp+0x44]
cmp ax, cx
jne off.b993
add ebx, 2
test r13d, r13d
je off.b918
mov eax, 0xd
mov ecx, eax
mov word[rsp+0x44], ax
call fcn.180008168
movzx ecx, word[rsp+0x44]
cmp ax, cx
jne off.b993
inc ebx
inc dword[rsp+0x40]
mov r13, qword[rsp+0x58]
mov eax, edi
sub eax, r14d
cmp eax, r15d
jae off.b1006
xor eax, eax
jmp off.b388
mov al, byte[rdi]
mov r15, qword[rsp+0x48]
lea r12, [0x180014660]
mov rcx, qword[r12+r15*8]
inc ebx
mov rdi, r15
mov byte[r13+rcx+0x4c], al
mov rax, qword[r12+r15*8]
mov dword[r13+rax+0x50], 1
jmp off.b1011
call qword[sym.imp.KERNEL32.dll_GetLastError]
mov esi, eax
jmp off.b1006
call qword[sym.imp.KERNEL32.dll_GetLastError]
mov esi, eax
mov r13, qword[rsp+0x58]
mov rdi, qword[rsp+0x48]
mov eax, dword[rsp+0x40]
test ebx, ebx
jne off.b1987
xor ebx, ebx
test esi, esi
je off.b1935
cmp esi, 5
jne off.b1918
call fcn.1800044f8
mov dword[rax], 9
call fcn.180004488
mov dword[rax], esi
jmp off.b118
mov rdi, qword[rsp+0x48]
jmp off.b1079
mov rdi, qword[rsp+0x48]
xor eax, eax
lea r9, [0x180014660]
mov rcx, qword[r9+rdi*8]
test byte[r13+rcx+8], 0x80
je off.b1846
mov esi, eax
test r12b, r12b
jne off.b1329
mov r12, r14
test r15d, r15d
je off.b1935
mov edx, 0xd
jmp off.b1134
xor eax, eax
mov r13d, dword[rsp+0x40]
lea rdi, [rbp+0x630]
mov rcx, rax
mov eax, r12d
sub eax, r14d
cmp eax, r15d
jae off.b1199
mov al, byte[r12]
inc r12
cmp al, 0xa
jne off.b1182
mov byte[rdi], dl
inc r13d
inc rdi
inc rcx
inc rcx
mov byte[rdi], al
inc rdi
cmp rcx, 0x13ff
jb off.b1149
lea rax, [rbp+0x630]
mov r8d, edi
mov dword[rsp+0x40], r13d
mov r13, qword[rsp+0x58]
sub r8d, eax
mov rax, qword[rsp+0x48]
mov rcx, qword[r9+rax*8]
xor eax, eax
lea r9, [rsp+0x50]
mov rcx, qword[r13+rcx]
lea rdx, [rbp+0x630]
mov qword[rsp+0x20], rax
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b983
add ebx, dword[rsp+0x50]
lea rax, [rbp+0x630]
sub rdi, rax
movsxd rax, dword[rsp+0x50]
cmp rax, rdi
jl off.b1006
mov eax, r12d
mov edx, 0xd
lea r9, [0x180014660]
sub eax, r14d
cmp eax, r15d
jb off.b1132
jmp off.b1006
cmp r12b, 2
mov r12, r14
jne off.b1566
test r15d, r15d
je off.b1935
mov edx, 0xd
jmp off.b1360
xor eax, eax
mov r13d, dword[rsp+0x40]
lea rdi, [rbp+0x630]
mov rcx, rax
mov eax, r12d
sub eax, r14d
cmp eax, r15d
jae off.b1436
movzx eax, word[r12]
add r12, 2
cmp ax, 0xa
jne off.b1416
mov word[rdi], dx
add r13d, 2
add rdi, 2
add rcx, 2
add rcx, 2
mov word[rdi], ax
add rdi, 2
cmp rcx, 0x13fe
jb off.b1375
lea rax, [rbp+0x630]
mov r8d, edi
mov dword[rsp+0x40], r13d
mov r13, qword[rsp+0x58]
sub r8d, eax
mov rax, qword[rsp+0x48]
mov rcx, qword[r9+rax*8]
xor eax, eax
lea r9, [rsp+0x50]
mov rcx, qword[r13+rcx]
lea rdx, [rbp+0x630]
mov qword[rsp+0x20], rax
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b983
add ebx, dword[rsp+0x50]
lea rax, [rbp+0x630]
sub rdi, rax
movsxd rax, dword[rsp+0x50]
cmp rax, rdi
jl off.b1006
mov eax, r12d
mov edx, 0xd
lea r9, [0x180014660]
sub eax, r14d
cmp eax, r15d
jb off.b1358
jmp off.b1006
test r15d, r15d
je off.b1935
mov r8d, 0xd
jmp off.b1585
xor eax, eax
lea rcx, [rbp-0x80]
mov rdx, rax
mov eax, r12d
sub eax, r14d
cmp eax, r15d
jae off.b1650
movzx eax, word[r12]
add r12, 2
cmp ax, 0xa
jne off.b1630
mov word[rcx], r8w
add rcx, 2
add rdx, 2
add rdx, 2
mov word[rcx], ax
add rcx, 2
cmp rdx, 0x6a8
jb off.b1592
lea rax, [rbp-0x80]
xor edi, edi
lea r8, [rbp-0x80]
sub ecx, eax
mov qword[rsp+0x38], rdi
mov qword[rsp+0x30], rdi
mov eax, ecx
mov ecx, 0xfde9
mov dword[rsp+0x28], 0xd55
cdq
sub eax, edx
xor edx, edx
sar eax, 1
mov r9d, eax
lea rax, [rbp+0x630]
mov qword[rsp+0x20], rax
call qword[sym.imp.KERNEL32.dll_WideCharToMultiByte]
mov r13d, eax
test eax, eax
je off.b993
movsxd rax, edi
mov r8d, r13d
lea rdx, [rbp+0x630]
add rdx, rax
mov rax, qword[rsp+0x48]
lea rcx, [0x180014660]
mov rcx, qword[rcx+rax*8]
xor eax, eax
lea r9, [rsp+0x50]
mov qword[rsp+0x20], rax
mov rax, qword[rsp+0x58]
sub r8d, edi
mov rcx, qword[rax+rcx]
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1803
add edi, dword[rsp+0x50]
cmp r13d, edi
jg off.b1726
jmp off.b1811
call qword[sym.imp.KERNEL32.dll_GetLastError]
mov esi, eax
cmp r13d, edi
jg off.b1001
mov ebx, r12d
mov r8d, 0xd
sub ebx, r14d
cmp ebx, r15d
jb off.b1583
jmp off.b1001
mov rcx, qword[r13+rcx]
lea r9, [rsp+0x50]
mov r8d, r15d
mov rdx, r14
mov qword[rsp+0x20], rax
call qword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1888
mov ebx, dword[rsp+0x50]
mov eax, esi
jmp off.b1015
call qword[sym.imp.KERNEL32.dll_GetLastError]
mov esi, eax
mov eax, ebx
jmp off.b1015
mov r13, qword[rsp+0x58]
mov rdi, qword[rsp+0x48]
jmp off.b1015
mov ecx, esi
call fcn.1800044a8
jmp off.b118
mov rdi, qword[rsp+0x48]
lea rax, [0x180014660]
mov rax, qword[rax+rdi*8]
test byte[r13+rax+8], 0x40
je off.b1964
cmp byte[r14], 0x1a
je off.b82
call fcn.1800044f8
mov dword[rax], 0x1c
call fcn.180004488
mov dword[rax], ebx
jmp off.b118
sub ebx, eax
mov eax, ebx
mov rcx, qword[rbp+0x1a30]
xor rcx, rsp
call fcn.180005c80
mov rbx, qword[rsp+0x1b98]
add rsp, 0x1b40
pop r15
pop r14
pop r13
pop r12
pop rdi
pop rsi
pop rbp
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/7dc44f7522d53d03c7b1f4335f6d2a15