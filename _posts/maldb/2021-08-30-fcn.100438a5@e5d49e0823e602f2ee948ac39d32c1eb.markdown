---
layout: post
title:  "fcn.100438a5 @ e5d49e0823e602f2ee948ac39d32c1eb"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.100438a5
- **Origin (md5):** e5d49e0823e602f2ee948ac39d32c1eb
- **VirusTotal:** [virustotal.com/gui/file/e5d49e0823e602f2ee948ac39d32c1eb][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Behaviour Tags
<span class="bhv-tag" id="na">N/A</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [-10.180338859558105, 160.64369201660156, '<b><a href="/report/fcn.100438a5@e5d49e0823e602f2ee948ac39d32c1eb">fcn.100438a5</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'point { fill-color: #e0440e; }'],
[77.57395935058594, 17.70819854736328, '<b><a href="/report/fcn.0046aa15@9c2b894b84f59672d8be2e984066f76f">fcn.0046aa15</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],
[110.68879699707031, -330.52972412109375, '<b><a href="/report/fcn.0042f095@505be53c36227b94e2fcc406f247f6e5">fcn.0042f095</a><br>@505be53c36227b94e2fcc406f247f6e5</b><br>', 'null'],
[50.94575500488281, 489.3222351074219, '<b><a href="/report/fcn.0046c9b9@9c2b894b84f59672d8be2e984066f76f">fcn.0046c9b9</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],
[-197.35743713378906, -92.0482177734375, '<b><a href="/report/fcn.10038d78@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10038d78</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[195.6151123046875, 373.99420166015625, '<b><a href="/report/fcn.10045261@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10045261</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[-292.6258544921875, 196.51036071777344, '<b><a href="/report/fcn.00460a97@9c2b894b84f59672d8be2e984066f76f">fcn.00460a97</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],
[336.683837890625, 48.87137222290039, '<b><a href="/report/fcn.10035053@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10035053</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[-416.3914489746094, -114.62579345703125, '<b><a href="/report/fcn.00461a98@9c2b894b84f59672d8be2e984066f76f">fcn.00461a98</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],
[-323.729736328125, -281.74993896484375, '<b><a href="/report/fcn.10038b15@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10038b15</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[-34.95707321166992, -433.3913269042969, '<b><a href="/report/fcn.0042f095@96a869ae624ddb4834a1d5a829f85469">fcn.0042f095</a><br>@96a869ae624ddb4834a1d5a829f85469</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push 0xe0
mov eax, 0x1013d9a1
call fcn.10124124
mov edi, ecx
mov dword[ebp-0x80], edi
mov eax, dword[ebp+0x2c]
mov esi, dword[ebp+0x10]
mov ebx, dword[ebp+0x14]
mov dword[ebp-0x8c], eax
mov eax, dword[ebp+8]
sub esi, eax
mov dword[ebp-0x70], eax
mov eax, dword[ebp+0xc]
sub ebx, eax
mov dword[ebp-0x40], esi
mov dword[ebp-0x74], eax
mov dword[ebp-0x54], ebx
cmp esi, 4
jle 0x1004409f
cmp ebx, 4
jle 0x1004409f
lea ecx, [ebp-0x38]
call fcn.1001703e
and dword[ebp-4], 0
mov eax, dword[edi+4]
test eax, eax
je 0x10043906
mov eax, dword[eax+4]
push eax
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
push eax
lea ecx, [ebp-0x38]
call fcn.100179cf
test eax, eax
je 0x10044093
and dword[ebp-0x4c], 0
mov dword[ebp-0x50], 0x1014cb54
mov eax, dword[edi+4]
push ebx
push esi
mov byte[ebp-4], 1
push dword[eax+4]
call dword[sym.imp.GDI32.dll_CreateCompatibleBitmap]
push eax
lea ecx, [ebp-0x50]
call fcn.10017a05
test eax, eax
je 0x10044080
push dword[ebp-0x4c]
push dword[ebp-0x34]
call fcn.1001807d
mov ecx, eax
xor eax, eax
test ecx, ecx
mov dword[ebp-0x98], ecx
setne al
test eax, eax
jne 0x1004396f
call fcn.10009c74
lea eax, [ebp-0x44]
mov dword[ebp-0xac], esi
push eax
lea eax, [ebp-0xac]
mov dword[ebp-0xa8], ebx
push eax
call fcn.10042ae4
mov dword[ebp-0xa4], eax
test eax, eax
je 0x10044080
cmp dword[ebp-0x44], 0
je 0x10044080
push eax
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_SelectObject]
mov eax, dword[edi+4]
test eax, eax
je 0x100439b7
mov eax, dword[eax+4]
push 0xcc0020
push dword[ebp+0xc]
push dword[ebp+8]
push eax
push ebx
push esi
push 0
push 0
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_BitBlt]
mov eax, dword[ebp-0x74]
neg eax
push eax
mov eax, dword[ebp-0x70]
neg eax
push eax
lea eax, [ebp+8]
push eax
call dword[sym.imp.USER32.dll_OffsetRect]
mov eax, dword[ebp+0x10]
add eax, dword[ebp+8]
fild dword[ebp+0x24]
cdq
sub eax, edx
mov ecx, dword[ebp+0x18]
sar eax, 1
mov dword[ebp-0x48], eax
mov eax, dword[ebp+0x14]
add eax, dword[ebp+0xc]
fstp qword[ebp-0x7c]
fld qword[ebp-0x7c]
fmul qword[0x10152608]
cdq
sub eax, edx
mov edx, dword[ebp+0x1c]
sar eax, 1
mov dword[ebp-0x60], eax
fdiv qword[0x10152bf0]
movzx eax, cl
mov dword[ebp-0x10], eax
movzx eax, dl
fst qword[ebp-0x7c]
fld qword[0x1017c4e0]
fadd st(1)
fst qword[ebp-0xec]
fild dword[ebp-0x10]
mov dword[ebp-0x10], eax
mov eax, ecx
shr eax, 8
movzx eax, al
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fst qword[ebp-0xc4]
fild dword[ebp-0x10]
mov dword[ebp-0x10], eax
mov eax, edx
shr eax, 8
movzx eax, al
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fld qword[0x1017c4b8]
fadd st(1), st(0)
fxch st(1)
fsubrp st(2)
fld qword[0x10152c00]
fdiv st(2), st(0)
fld qword[0x10152600]
fmul st(3), st(0)
fxch st(3)
fstp qword[ebp-0xb4]
fild dword[ebp-0x10]
mov dword[ebp-0x10], eax
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fst qword[ebp-0xd4]
fild dword[ebp-0x10]
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fadd st(3)
fsubrp st(1)
fdiv st(1)
fmul st(3)
shr ecx, 0x10
movzx eax, cl
mov dword[ebp-0x10], eax
shr edx, 0x10
fstp qword[ebp-0xe4]
fild dword[ebp-0x10]
movzx eax, dl
mov dword[ebp-0x10], eax
and dword[ebp-0x3c], 0
cmp dword[ebp+0x28], 0
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fst qword[ebp-0xcc]
fild dword[ebp-0x10]
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fadd st(3)
fsubrp st(1)
fdivrp st(1)
fmulp st(2)
fxch st(1)
fstp qword[ebp-0xbc]
jle 0x10044008
fld qword[0x10152bc8]
faddp st(2)
fxch st(1)
fst qword[ebp-0x88]
fld qword[0x1014c518]
fldz
jmp 0x10043b22
fxch st(4)
fxch st(2)
fxch st(3)
fxch st(1)
fxch st(2)
fxch st(1)
mov esi, dword[ebp+0x10]
mov eax, esi
mov ecx, dword[ebp+0x14]
sub ecx, dword[ebp+0xc]
sub eax, dword[ebp+8]
and dword[ebp-0x6c], 0
cmp eax, ecx
jl 0x10043b3a
mov eax, ecx
sub esi, dword[ebp+0x14]
sub esi, dword[ebp+8]
add esi, dword[ebp+0xc]
cdq
sub eax, edx
mov dword[ebp-0x28], esi
sar eax, 1
mov dword[ebp-0x20], eax
mov eax, dword[ebp-0x8c]
cmp eax, 0xffffffff
je 0x10043cbe
cmp dword[ebp-0x3c], 0
jne 0x10043cbe
fstp st(2)
lea ecx, [ebp-0xa0]
fstp st(0)
fstp st(0)
fstp st(0)
push eax
fstp st(0)
call fcn.10016fa7
lea eax, [ebp-0xa0]
mov byte[ebp-4], 2
push eax
lea ecx, [ebp-0x38]
call fcn.100180dc
push 8
lea ecx, [ebp-0x38]
mov edi, eax
call fcn.10018149
mov dword[ebp-0x10], eax
test esi, esi
jne 0x10043bbd
push dword[ebp+0x14]
push dword[ebp+0x10]
push dword[ebp+0xc]
push dword[ebp+8]
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_Ellipse]
jmp 0x10043c6e
mov esi, dword[sym.imp.GDI32.dll_Ellipse]
jle 0x10043c16
mov eax, dword[ebp+0x14]
push dword[ebp+0x14]
sub eax, dword[ebp+0xc]
add eax, dword[ebp+8]
push eax
push dword[ebp+0xc]
push dword[ebp+8]
push dword[ebp-0x34]
call esi
push dword[ebp+0x14]
mov eax, dword[ebp+0x10]
push dword[ebp+0x10]
sub eax, dword[ebp+0x14]
push dword[ebp+0xc]
add eax, dword[ebp+0xc]
push eax
push dword[ebp-0x34]
call esi
mov eax, dword[ebp+0x14]
sub eax, dword[ebp+0xc]
push dword[ebp+0x14]
cdq
sub eax, edx
mov edx, dword[ebp+0x10]
mov ecx, eax
mov eax, dword[ebp+8]
sar ecx, 1
sub edx, ecx
add eax, ecx
push edx
push dword[ebp+0xc]
push eax
jmp 0x10043c65
mov eax, dword[ebp+0x10]
sub eax, dword[ebp+8]
add eax, dword[ebp+0xc]
push eax
push dword[ebp+0x10]
push dword[ebp+0xc]
push dword[ebp+8]
push dword[ebp-0x34]
call esi
push dword[ebp+0x14]
mov eax, dword[ebp+0x14]
push dword[ebp+0x10]
sub eax, dword[ebp+0x10]
add eax, dword[ebp+8]
push eax
push dword[ebp+8]
push dword[ebp-0x34]
call esi
mov eax, dword[ebp+0x10]
sub eax, dword[ebp+8]
cdq
sub eax, edx
mov edx, dword[ebp+0x14]
mov ecx, eax
mov eax, dword[ebp+0xc]
sar ecx, 1
sub edx, ecx
add eax, ecx
push edx
push dword[ebp+0x10]
push eax
push dword[ebp+8]
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_Rectangle]
push edi
lea ecx, [ebp-0x38]
call fcn.100180dc
push dword[ebp-0x10]
lea ecx, [ebp-0x38]
call fcn.100180dc
lea ecx, [ebp-0xa0]
mov byte[ebp-4], 1
mov dword[ebp-0xa0], 0x1014cb44
call fcn.100171ad
fld qword[0x1014c518]
fldz
fld qword[0x1017c4b8]
fld qword[ebp-0x88]
fld qword[ebp-0x7c]
fxch st(4)
fxch st(2)
fxch st(3)
fxch st(1)
fxch st(2)
fxch st(1)
fld st(4)
or esi, 0xffffffff
fst qword[ebp-0x94]
fxch st(3)
mov dword[ebp-0x58], esi
fcomp st(5)
or edi, esi
fnstsw ax
mov dword[ebp-0x64], edi
test ah, 0x41
jne 0x1004403a
fld qword[ebp-0xec]
mov ecx, 0x168
faddp st(5)
mov dword[ebp-0x10], ecx
fxch st(4)
fmul st(3)
fst qword[ebp-0xdc]
fild dword[ebp-0x20]
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fstp qword[ebp-0x18]
jmp 0x10043d14
fxch st(2)
fxch st(4)
fxch st(1)
fxch st(3)
fxch st(1)
fxch st(2)
fcomp st(2)
fnstsw ax
test ah, 1
jne 0x10043d25
mov eax, dword[ebp-0x6c]
mov dword[ebp-0x20], eax
jmp 0x10043d28
mov dword[ebp-0x20], ecx
fild dword[ebp-0x20]
fstp qword[ebp-0x24]
fld qword[ebp-0x24]
fld st(0)
fmul qword[ebp-0xb4]
fadd st(4)
fadd qword[ebp-0xc4]
fcom st(2)
fnstsw ax
test ah, 0x41
je 0x10043d59
fcom st(5)
fnstsw ax
test ah, 5
jp 0x10043d59
fstp st(0)
fld st(4)
jmp 0x10043d66
fcom st(2)
fnstsw ax
test ah, 0x41
jne 0x10043d66
fstp st(0)
fld st(1)
call fcn.101254a6
fld st(0)
mov byte[ebp-0x19], al
fmul qword[ebp-0xe4]
fadd st(4)
fadd qword[ebp-0xd4]
fcom st(2)
fnstsw ax
test ah, 0x41
je 0x10043d96
fcom st(5)
fnstsw ax
test ah, 5
jp 0x10043d96
fstp st(0)
fld st(4)
jmp 0x10043da3
fcom st(2)
fnstsw ax
test ah, 0x41
jne 0x10043da3
fstp st(0)
fld st(1)
call fcn.101254a6
fmul qword[ebp-0xbc]
mov byte[ebp-0x1a], al
faddp st(3)
fld qword[ebp-0xcc]
faddp st(3)
fcom st(2)
fnstsw ax
test ah, 5
jnp 0x10043dd5
fxch st(3)
fcom st(2)
fnstsw ax
test ah, 0x41
jne 0x10043dd9
fstp st(2)
fstp st(2)
jmp 0x10043dec
fstp st(3)
jmp 0x10043ddb
fstp st(0)
fxch st(2)
fcom st(1)
fnstsw ax
test ah, 5
jp 0x10043dea
fstp st(1)
jmp 0x10043dec
fstp st(0)
call fcn.101254a6
cmp dword[ebp-0x3c], 0
jne 0x10043e02
cmp dword[ebp+0x20], 0xffffffff
je 0x10043e02
mov ebx, dword[ebp+0x20]
jmp 0x10043e17
movzx ebx, al
movzx eax, byte[ebp-0x1a]
shl ebx, 8
or ebx, eax
movzx eax, byte[ebp-0x19]
shl ebx, 8
or ebx, eax
push ecx
push ecx
fstp qword[esp]
call fcn.10127520
fmul qword[ebp-0x18]
fldz
faddp st(1)
call fcn.10125470
fld qword[ebp-0x94]
mov esi, eax
add esi, dword[ebp-0x48]
fstp qword[esp]
call fcn.10126fa0
fmul qword[ebp-0x18]
fldz
faddp st(1)
pop ecx
pop ecx
call fcn.10125470
mov ecx, dword[ebp-0x60]
lea edi, [ecx+eax]
mov eax, dword[ebp-0x28]
test eax, eax
jle 0x10043ee7
fild dword[ebp-0x28]
cmp esi, dword[ebp-0x48]
jle 0x10043e75
fstp qword[ebp-0x68]
fld qword[ebp-0x68]
fmul qword[0x1017c4b8]
jmp 0x10043e81
fstp qword[ebp-0x68]
fld qword[ebp-0x68]
fmul qword[0x10152660]
call fcn.10125470
mov edx, dword[ebp-0x58]
add esi, eax
cmp edx, 0xffffffff
je 0x10043f64
xor ecx, ecx
cmp esi, dword[ebp-0x48]
setg cl
xor eax, eax
cmp edx, dword[ebp-0x48]
setg al
cmp eax, ecx
je 0x10043f64
cmp esi, edx
jge 0x10043eb7
mov eax, esi
mov dword[ebp-0x20], eax
jmp 0x10043ebc
mov eax, edx
mov dword[ebp-0x20], edx
cmp esi, edx
jle 0x10043ec2
mov edx, esi
cmp eax, edx
jge 0x10043f64
push ebx
push edi
push eax
push dword[ebp-0x54]
push dword[ebp-0x40]
push dword[ebp-0x44]
call fcn.1004695e
mov eax, dword[ebp-0x20]
mov edx, dword[ebp-0x58]
inc eax
mov dword[ebp-0x20], eax
jmp 0x10043ebc
jns 0x10043f64
fild dword[ebp-0x28]
cmp edi, ecx
jle 0x10043efe
fstp qword[ebp-0x5c]
fld qword[ebp-0x5c]
fmul qword[0x10152660]
jmp 0x10043f0a
fstp qword[ebp-0x5c]
fld qword[ebp-0x5c]
fmul qword[0x1017c4b8]
call fcn.10125470
mov edx, dword[ebp-0x64]
add edi, eax
cmp edx, 0xffffffff
je 0x10043f64
xor ecx, ecx
cmp edi, dword[ebp-0x60]
setg cl
xor eax, eax
cmp edx, dword[ebp-0x60]
setg al
cmp eax, ecx
je 0x10043f64
cmp edi, edx
jge 0x10043f38
mov eax, edi
mov dword[ebp-0x20], eax
jmp 0x10043f3d
mov eax, edx
mov dword[ebp-0x20], edx
cmp edi, edx
jle 0x10043f43
mov edx, edi
cmp eax, edx
jge 0x10043f64
push ebx
push eax
push esi
push dword[ebp-0x54]
push dword[ebp-0x40]
push dword[ebp-0x44]
call fcn.1004695e
mov eax, dword[ebp-0x20]
mov edx, dword[ebp-0x64]
inc eax
mov dword[ebp-0x20], eax
jmp 0x10043f3d
push ebx
mov ebx, dword[ebp-0x54]
push edi
push esi
push ebx
push dword[ebp-0x40]
push dword[ebp-0x44]
call fcn.1004695e
fld qword[ebp-0x94]
fadd qword[0x10152bc8]
mov ecx, dword[ebp-0x10]
inc dword[ebp-0x6c]
dec ecx
mov dword[ebp-0x58], esi
mov dword[ebp-0x64], edi
fst qword[ebp-0x94]
fld qword[ebp-0x88]
fcomp st(1)
mov dword[ebp-0x10], ecx
fnstsw ax
fld qword[0x1014c518]
fldz
fld qword[0x1017c4b8]
fld qword[ebp-0xdc]
test ah, 0x41
je 0x10043d08
fstp st(0)
fstp st(2)
fstp st(2)
fstp st(1)
push 0xffffffffffffffff
push 0xffffffffffffffff
lea eax, [ebp+8]
fstp st(0)
push eax
call dword[sym.imp.USER32.dll_InflateRect]
fld qword[0x1014c518]
mov edx, dword[ebp-0x3c]
fldz
inc edx
fld qword[0x1017c4b8]
fld qword[ebp-0x88]
fld qword[ebp-0x7c]
mov dword[ebp-0x3c], edx
cmp edx, dword[ebp+0x28]
jl 0x10043b16
mov esi, dword[ebp-0x40]
fstp st(1)
mov edi, dword[ebp-0x80]
fstp st(3)
mov eax, dword[edi+4]
fstp st(1)
push 0xcc0020
push 0
push 0
push dword[ebp-0x34]
fstp st(0)
push ebx
push esi
push dword[ebp-0x74]
fstp st(0)
push dword[ebp-0x70]
push dword[eax+4]
call dword[sym.imp.GDI32.dll_BitBlt]
mov eax, dword[ebp-0x98]
test eax, eax
jne 0x10044044
jmp 0x10044047
fstp st(1)
fstp st(1)
fstp st(0)
fstp st(0)
jmp 0x10043fc7
mov eax, dword[eax+4]
push eax
push dword[ebp-0x34]
call fcn.1001807d
push dword[ebp-0xa4]
call dword[sym.imp.GDI32.dll_DeleteObject]
lea ecx, [ebp-0x50]
mov byte[ebp-4], 0
mov dword[ebp-0x50], 0x1014cb54
call fcn.100171ad
or dword[ebp-4], 0xffffffff
lea ecx, [ebp-0x38]
call fcn.10017194
xor eax, eax
inc eax
jmp 0x100440a1
lea ecx, [ebp-0x50]
mov byte[ebp-4], 0
mov dword[ebp-0x50], 0x1014cb54
call fcn.100171ad
or dword[ebp-4], 0xffffffff
lea ecx, [ebp-0x38]
call fcn.10017194
xor eax, eax
call fcn.101240f2
ret 0x28

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/e5d49e0823e602f2ee948ac39d32c1eb