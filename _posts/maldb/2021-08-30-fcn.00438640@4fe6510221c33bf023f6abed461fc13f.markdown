---
layout: post
title:  "fcn.00438640 @ 4fe6510221c33bf023f6abed461fc13f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.00438640
- **Origin (md5):** 4fe6510221c33bf023f6abed461fc13f
- **VirusTotal:** [virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.00438640@4fe6510221c33bf023f6abed461fc13f">fcn.00438640</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
mov ebp, esp
and esp, 0xfffffff8
sub esp, 0x8c
push ebx
mov ebx, dword[ebp+0x20]
push esi
push edi
xor edi, edi
cmp byte[ebp+0x24], 0
mov esi, ecx
jne off.b47
mov eax, str.Fast
call fcn.00473c80
mov byte[esp+0x16], 0
test eax, eax
je off.b52
mov byte[esp+0x16], 1
mov eax, 0x4a9ba8
mov ecx, esi
call fcn.00473c80
test eax, eax
setne al
mov byte[esp+0x1b], al
test al, al
je off.b116
mov eax, dword[ebp+0x1c]
mov ecx, eax
shr ecx, 8
movzx edx, cl
movzx ecx, al
mov dword[esp+0x1c], eax
shl ecx, 8
shr eax, 0x10
or edx, ecx
movzx eax, al
shl edx, 8
or edx, eax
mov dword[ebp+0x1c], edx
jmp off.b150
mov ecx, dword[ebp+0x1c]
mov edx, ecx
shr edx, 8
movzx eax, dl
movzx edx, cl
shl edx, 8
shr ecx, 0x10
or eax, edx
movzx ecx, cl
shl eax, 8
or eax, ecx
mov dword[esp+0x1c], eax
cmp byte[ebp+0x24], 0
mov ecx, dword[0x4c6400]
mov dword[esp+0x3c], ecx
je off.b170
xor esi, esi
jmp off.b186
mov eax, dword[ebp+8]
mov dl, 1
cmp dl, byte[eax+1]
sbb esi, esi
and esi, dword[0x4c6404]
mov dword[esp+0x38], esi
cmp ecx, edi
je off.b199
call fcn.00413110
cmp esi, edi
je off.b210
mov ecx, esi
call fcn.00413110
mov ecx, dword[0x4c28ec]
movzx esi, word[ecx+0xec]
and esi, 3
mov dword[esp+0x24], edi
mov dword[esp+0x28], edi
cmp esi, 2
je off.b322
call dword[sym.imp.USER32.dll_GetForegroundWindow]
mov edi, eax
test edi, edi
je off.b322
push edi
call dword[sym.imp.USER32.dll_IsIconic]
test eax, eax
jne off.b322
test esi, esi
jne off.b280
lea edx, [esp+0x44]
push edx
push edi
call dword[sym.imp.USER32.dll_GetWindowRect]
jmp off.b302
lea edx, [esp+0x44]
xor eax, eax
push edx
push edi
mov dword[esp+0x4c], eax
mov dword[esp+0x50], eax
call dword[sym.imp.USER32.dll_ClientToScreen]
test eax, eax
je off.b322
mov eax, dword[esp+0x44]
mov ecx, dword[esp+0x48]
add dword[esp+0x24], eax
add dword[esp+0x28], ecx
mov esi, dword[ebp+0xc]
mov eax, dword[esp+0x24]
mov ecx, dword[esp+0x28]
add dword[ebp+0x10], ecx
add dword[ebp+0x14], eax
add dword[ebp+0x18], ecx
add esi, eax
mov dword[ebp+0xc], esi
test ebx, ebx
jns off.b358
xor ebx, ebx
mov dword[ebp+0x20], ebx
jmp off.b403
cmp ebx, 0xff
jle off.b376
mov ebx, 0xff
mov dword[ebp+0x20], ebx
jmp off.b380
test ebx, ebx
jle off.b403
mov eax, dword[ebp+0x1c]
mov edx, eax
shr edx, 8
mov byte[esp+0x14], al
shr eax, 0x10
mov byte[esp+0x13], dl
mov byte[esp+0x15], al
push 0
call dword[sym.imp.USER32.dll_GetDC]
mov dword[esp+0x2c], eax
test eax, eax
je off.b1269
cmp byte[esp+0x16], 0
mov byte[esp+0x17], 0
je off.b1325
mov esi, dword[ebp+0x14]
mov edi, dword[ebp+0x18]
sub esi, dword[ebp+0xc]
sub edi, dword[ebp+0x10]
xor eax, eax
mov dword[esp+0x34], eax
mov dword[esp+0x20], eax
mov dword[esp+0x54], eax
mov eax, dword[esp+0x2c]
push eax
inc esi
inc edi
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
mov dword[esp+0x30], eax
test eax, eax
je off.b1054
mov ecx, dword[esp+0x2c]
push edi
push esi
push ecx
call dword[sym.imp.GDI32.dll_CreateCompatibleBitmap]
mov dword[esp+0x34], eax
test eax, eax
je off.b1054
mov edx, eax
mov eax, dword[esp+0x30]
push edx
push eax
call dword[sym.imp.GDI32.dll_SelectObject]
mov dword[esp+0x54], eax
test eax, eax
je off.b1054
mov ecx, dword[ebp+0x10]
mov edx, dword[ebp+0xc]
mov eax, dword[esp+0x2c]
push 0xcc0020
push ecx
mov ecx, dword[esp+0x38]
push edx
push eax
push edi
push esi
push 0
push 0
push ecx
call dword[sym.imp.GDI32.dll_BitBlt]
test eax, eax
je off.b1054
push 8
lea edx, [esp+0x1e]
push edx
mov edx, dword[esp+0x3c]
lea eax, [esp+0x4c]
push eax
mov eax, dword[esp+0x3c]
lea ecx, [esp+0x4c]
push ecx
push edx
call fcn.00438430
add esp, 0x14
mov dword[esp+0x20], eax
test eax, eax
je off.b1054
mov edi, dword[esp+0x40]
mov al, byte[esp+0x1a]
imul edi, dword[esp+0x44]
mov ecx, dword[esp+0x20]
test al, al
je off.b671
xor esi, esi
test edi, edi
jle off.b675
and dword[ecx+esi*4], 0xf8f8f8f8
inc esi
cmp esi, edi
jl off.b657
jmp off.b675
mov esi, dword[esp+0x44]
cmp byte[ebp+0x24], 0
je off.b755
mov ecx, dword[ecx]
and ecx, 0xffffff
cmp byte[esp+0x1b], 0
je off.b700
mov eax, ecx
jmp off.b705
call fcn.0042f740
push eax
lea eax, [esp+0x5c]
push str.0x_06X
push eax
call fcn.0048d153
mov edx, dword[esp+0x48]
add esp, 0xc
push 1
push 0
push 0xffffffffffffffff
lea ecx, [esp+0x64]
push ecx
push edx
call fcn.00476680
mov byte[esp+0x17], 1
jmp off.b1058
cmp ebx, 1
jge off.b810
test al, al
mov eax, dword[esp+0x1c]
je off.b773
and eax, 0xf8f8f8f8
xor esi, esi
test edi, edi
jle off.b1058
mov ecx, dword[esp+0x20]
mov edx, dword[ecx+esi*4]
and edx, 0xffffff
cmp edx, eax
je off.b745
inc esi
cmp esi, edi
jl off.b787
jmp off.b1058
test al, al
je off.b828
mov al, 0xf8
and byte[esp+0x14], al
and byte[esp+0x13], al
and byte[esp+0x15], al
movzx edx, byte[esp+0x14]
mov dword[esp+0x1c], edx
cmp ebx, edx
jle off.b848
mov byte[esp+0x18], 0
jmp off.b856
mov al, dl
sub al, bl
mov byte[esp+0x18], al
movzx ecx, byte[esp+0x13]
cmp ebx, ecx
jle off.b872
mov byte[esp+0x16], 0
jmp off.b880
mov al, cl
sub al, bl
mov byte[esp+0x16], al
movzx eax, byte[esp+0x15]
cmp ebx, eax
jle off.b896
mov byte[esp+0x13], 0
jmp off.b908
mov dl, al
sub dl, bl
mov byte[esp+0x13], dl
mov edx, dword[esp+0x1c]
mov esi, 0xff
sub esi, edx
cmp ebx, esi
jle off.b926
mov byte[esp+0x19], 0xff
jmp off.b936
mov dl, byte[esp+0x1c]
add dl, bl
mov byte[esp+0x19], dl
mov edx, 0xff
sub edx, ecx
cmp ebx, edx
jle off.b954
mov byte[esp+0x15], 0xff
jmp off.b960
add cl, bl
mov byte[esp+0x15], cl
mov ecx, 0xff
sub ecx, eax
cmp ebx, ecx
jle off.b978
mov byte[esp+0x14], 0xff
jmp off.b984
add al, bl
mov byte[esp+0x14], al
xor esi, esi
test edi, edi
jle off.b1058
mov edx, dword[esp+0x20]
mov eax, dword[edx+esi*4]
mov ecx, eax
mov edx, eax
shr ecx, 0x10
shr edx, 8
cmp cl, byte[esp+0x18]
jb off.b1047
cmp cl, byte[esp+0x19]
ja off.b1047
cmp dl, byte[esp+0x16]
jb off.b1047
cmp dl, byte[esp+0x15]
ja off.b1047
cmp al, byte[esp+0x13]
jb off.b1047
cmp al, byte[esp+0x14]
jbe off.b745
inc esi
cmp esi, edi
jl off.b990
jmp off.b1058
mov esi, dword[esp+0x44]
mov eax, dword[esp+0x2c]
push eax
push 0
call dword[sym.imp.USER32.dll_ReleaseDC]
mov edi, dword[esp+0x30]
test edi, edi
je off.b1102
mov eax, dword[esp+0x54]
test eax, eax
je off.b1095
push eax
push edi
call dword[sym.imp.GDI32.dll_SelectObject]
push edi
call dword[sym.imp.GDI32.dll_DeleteDC]
mov eax, dword[esp+0x34]
test eax, eax
je off.b1117
push eax
call dword[sym.imp.GDI32.dll_DeleteObject]
cmp dword[esp+0x20], 0
je off.b1269
mov ecx, dword[esp+0x20]
push ecx
call fcn.0048e3af
add esp, 4
cmp byte[ebp+0x24], 0
jne off.b1224
cmp byte[esp+0x17], 0
je off.b1236
mov ecx, dword[esp+0x3c]
test ecx, ecx
je off.b1190
mov eax, esi
cdq
idiv dword[esp+0x40]
push 0x18
mov eax, edx
sub eax, dword[esp+0x28]
add eax, dword[ebp+0xc]
cdq
push edx
push eax
mov eax, ecx
call fcn.004010e0
mov ecx, dword[esp+0x38]
test ecx, ecx
je off.b1224
mov eax, esi
cdq
idiv dword[esp+0x40]
push 0x18
sub eax, dword[esp+0x2c]
add eax, dword[ebp+0x10]
cdq
push edx
push eax
mov eax, ecx
call fcn.004010e0
cmp byte[esp+0x17], 0
mov eax, 0x4a0900
jne off.b1241
mov eax, 0x4a331c
mov edx, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
push eax
push edx
call fcn.00476680
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 0x20
cmp byte[ebp+0x24], 0
mov eax, 0x4a331c
jne off.b1285
mov eax, 0x4a358c
mov ecx, dword[0x4c28ec]
cmp byte[ecx+0x104], 0
je off.b1241
mov ecx, dword[ebp+8]
push 0x4ab02c
push 0
push eax
call fcn.0042dc50
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 0x20
cmp esi, dword[ebp+0x14]
mov eax, dword[ebp+0x18]
setg byte[esp+0x1a]
cmp dword[ebp+0x10], eax
setg byte[esp+0x1b]
test ebx, ebx
jle off.b1508
movzx edx, byte[esp+0x14]
mov dword[esp+0x1c], edx
cmp ebx, edx
jle off.b1372
mov byte[esp+0x18], 0
jmp off.b1380
mov al, dl
sub al, bl
mov byte[esp+0x18], al
movzx ecx, byte[esp+0x13]
cmp ebx, ecx
jle off.b1396
mov byte[esp+0x16], 0
jmp off.b1404
mov al, cl
sub al, bl
mov byte[esp+0x16], al
movzx eax, byte[esp+0x15]
cmp ebx, eax
jle off.b1420
mov byte[esp+0x13], 0
jmp off.b1432
mov dl, al
sub dl, bl
mov byte[esp+0x13], dl
mov edx, dword[esp+0x1c]
mov edi, 0xff
sub edi, edx
cmp ebx, edi
jle off.b1450
mov byte[esp+0x19], 0xff
jmp off.b1460
mov dl, byte[esp+0x1c]
add dl, bl
mov byte[esp+0x19], dl
mov edx, 0xff
sub edx, ecx
cmp ebx, edx
jle off.b1478
mov byte[esp+0x15], 0xff
jmp off.b1484
add cl, bl
mov byte[esp+0x15], cl
mov ecx, 0xff
sub ecx, eax
cmp ebx, ecx
jle off.b1502
mov byte[esp+0x14], 0xff
jmp off.b1508
add al, bl
mov byte[esp+0x14], al
mov ecx, dword[ebp+0x18]
mov dl, byte[esp+0x1a]
mov edi, esi
mov esi, dword[esp+0x44]
mov eax, dword[ebp+0x14]
test dl, dl
je off.b1537
xor edx, edx
cmp edi, eax
setge dl
jmp off.b1544
xor edx, edx
cmp edi, eax
setle dl
mov eax, edx
test eax, eax
je off.b1609
mov esi, dword[ebp+0x10]
xor eax, eax
cmp byte[esp+0x1b], al
je off.b1568
cmp esi, ecx
setge al
jmp off.b1573
cmp esi, ecx
setle al
test eax, eax
je off.b1731
mov eax, dword[esp+0x2c]
push esi
push edi
push eax
call dword[sym.imp.GDI32.dll_GetPixel]
cmp ebx, 1
jge off.b1661
cmp eax, dword[ebp+0x1c]
jne off.b1710
mov byte[esp+0x17], 1
mov ecx, dword[esp+0x2c]
push ecx
push 0
call dword[sym.imp.USER32.dll_ReleaseDC]
cmp byte[esp+0x17], 0
jne off.b1751
mov edx, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
push 0x4a331c
push edx
call fcn.00476680
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 0x20
mov ecx, eax
mov edx, eax
shr ecx, 8
shr edx, 0x10
cmp al, byte[esp+0x18]
jb off.b1707
cmp al, byte[esp+0x19]
ja off.b1707
cmp cl, byte[esp+0x16]
jb off.b1707
cmp cl, byte[esp+0x15]
ja off.b1707
cmp dl, byte[esp+0x13]
jb off.b1707
cmp dl, byte[esp+0x14]
jbe off.b1604
mov ebx, dword[ebp+0x20]
mov ecx, dword[ebp+0x18]
xor eax, eax
cmp byte[esp+0x1b], al
sete al
lea esi, [esi+eax*2-1]
jmp off.b1553
mov dl, byte[esp+0x1a]
xor eax, eax
test dl, dl
sete al
lea edi, [edi+eax*2-1]
jmp off.b1521
mov ecx, dword[esp+0x3c]
test ecx, ecx
je off.b1777
mov eax, edi
sub eax, dword[esp+0x24]
push 0x18
cdq
push edx
push eax
mov eax, ecx
call fcn.004010e0
mov ecx, dword[esp+0x38]
test ecx, ecx
je off.b1803
mov eax, esi
sub eax, dword[esp+0x28]
push 0x18
cdq
push edx
push eax
mov eax, ecx
call fcn.004010e0
mov eax, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
push 0x4a0900
push eax
call fcn.00476680
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 0x20

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f