---
layout: post
title:  "fcn.00438d70 @ 4fe6510221c33bf023f6abed461fc13f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.00438d70
- **Origin (md5):** 4fe6510221c33bf023f6abed461fc13f
- **VirusTotal:** [virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>
<span class="tag" id="SYSTEM-INFO">SYSTEM-INFO</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.00438d70@4fe6510221c33bf023f6abed461fc13f">fcn.00438d70</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
mov ebp, esp
and esp, 0xfffffff8
sub esp, 0xdc
mov edx, dword[ebp+8]
mov ecx, dword[0x4c6400]
mov al, 1
cmp al, byte[edx+1]
push ebx
push esi
sbb esi, esi
and esi, dword[0x4c6404]
push edi
mov dword[esp+0x8c], ecx
mov dword[esp+0x90], esi
test ecx, ecx
je off.b60
call fcn.00413110
test esi, esi
je off.b71
mov ecx, esi
call fcn.00413110
mov eax, dword[0x4c28ec]
movzx ebx, word[eax+0xec]
xor esi, esi
xor edi, edi
and ebx, 3
mov dword[esp+0x60], esi
mov dword[esp+0x64], edi
cmp ebx, 2
je off.b207
call dword[sym.imp.USER32.dll_GetForegroundWindow]
mov dword[esp+0x14], eax
test eax, eax
je off.b207
mov ecx, eax
push ecx
call dword[sym.imp.USER32.dll_IsIconic]
test eax, eax
jne off.b207
test ebx, ebx
jne off.b152
mov eax, dword[esp+0x14]
lea edx, [esp+0x7c]
push edx
push eax
call dword[sym.imp.USER32.dll_GetWindowRect]
jmp off.b184
mov edx, dword[esp+0x14]
lea ecx, [esp+0x7c]
xor eax, eax
push ecx
push edx
mov dword[esp+0x84], eax
mov dword[esp+0x88], eax
call dword[sym.imp.USER32.dll_ClientToScreen]
test eax, eax
je off.b207
add esi, dword[esp+0x7c]
add edi, dword[esp+0x80]
mov dword[esp+0x60], esi
mov dword[esp+0x64], edi
mov ebx, dword[ebp+0x1c]
add dword[ebp+0xc], esi
add dword[ebp+0x10], edi
add dword[ebp+0x14], esi
add dword[ebp+0x18], edi
xor eax, eax
push 0x2e
push ebx
mov dword[esp+0x18], eax
mov dword[esp+0x3c], 0xffffffff
mov dword[esp+0x1c], eax
mov dword[esp+0x2c], eax
mov dword[esp+0x30], eax
call fcn.0048e91d
mov esi, eax
add esp, 8
test esi, esi
je off.b344
add esi, 2
push 0x4a9bb0
push esi
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b322
push 0x4a9bb8
push esi
call fcn.0048cd49
add esp, 8
test eax, eax
je off.b322
push 0x4a9bc0
push esi
call fcn.0048cd49
add esp, 8
test eax, eax
jne off.b344
mov esi, dword[sym.imp.USER32.dll_GetSystemMetrics]
push 0x31
call esi
push 0x32
mov dword[esp+0x28], eax
call esi
mov dword[esp+0x28], eax
mov edi, ebx
lea ebx, [ebx]
movzx eax, word[edi]
cmp eax, 0x20
je off.b365
cmp eax, 9
jne off.b370
add edi, 2
jmp off.b352
cmp word[edi], 0x2a
jne off.b1106
movzx eax, word[edi+2]
add edi, 2
push eax
call fcn.0048ee9d
movzx eax, ax
add esp, 4
cmp eax, 0x48
je off.b846
cmp eax, 0x57
je off.b731
push 4
push str.Icon
push edi
call fcn.0048d597
add esp, 0xc
test eax, eax
jne off.b488
add edi, 8
mov eax, edi
call fcn.0040d200
test al, al
je off.b473
push 0x10
push 0
push edi
call fcn.0048e37b
add esp, 0xc
mov dword[esp+0x14], eax
jmp off.b959
push edi
call fcn.0048dfe6
mov dword[esp+0x18], eax
jmp off.b956
push 5
push str.Trans
push edi
call fcn.0048d597
add esp, 0xc
test eax, eax
jne off.b647
push 0x1f
add edi, 0xa
lea ecx, [esp+0xac]
push edi
push ecx
call fcn.0048fa44
xor edx, edx
add esp, 0xc
mov ebx, 0x4a352c
lea eax, [esp+0xa8]
mov word[esp+0xe6], dx
call fcn.004095d0
test eax, eax
je off.b570
xor ecx, ecx
mov word[eax], cx
lea esi, [esp+0xa8]
call fcn.00474a80
cmp eax, 0xffffffff
jne off.b611
push 0x10
mov edx, esi
push 0
push edx
call fcn.0048e37b
add esp, 0xc
mov dword[esp+0x34], eax
jmp off.b959
mov ecx, eax
shr ecx, 8
movzx edx, al
movzx ecx, cl
shl edx, 8
shr eax, 0x10
or ecx, edx
movzx eax, al
shl ecx, 8
or ecx, eax
mov dword[esp+0x34], ecx
jmp off.b959
mov eax, edi
call fcn.0040d200
test al, al
je off.b677
push 0x10
push 0
push edi
call fcn.0048e37b
add esp, 0xc
mov dword[esp+0x10], eax
jmp off.b690
push edi
call fcn.0048dfe6
add esp, 4
mov dword[esp+0x10], eax
test eax, eax
jns off.b707
mov dword[esp+0x10], 0
jmp off.b959
cmp eax, 0xff
jle off.b959
mov dword[esp+0x10], 0xff
jmp off.b959
lea esi, [edi+2]
mov eax, esi
movzx ecx, word[eax]
cmp ecx, 0x20
je off.b749
cmp ecx, 9
jne off.b754
add eax, 2
jmp off.b736
movzx ecx, word[eax]
test cx, cx
je off.b834
cmp ecx, 0x2d
je off.b772
cmp ecx, 0x2b
jne off.b775
add eax, 2
cmp word[eax], 0x30
jne off.b834
movzx ecx, word[eax+2]
cmp ecx, 0x78
je off.b795
cmp ecx, 0x58
jne off.b834
movzx ecx, word[eax+4]
push ecx
call fcn.0048e189
add esp, 4
test eax, eax
je off.b834
push 0x10
push 0
push esi
call fcn.0048e37b
add esp, 0xc
mov dword[esp+0x24], eax
jmp off.b959
push esi
call fcn.0048dfe6
mov dword[esp+0x28], eax
jmp off.b956
lea esi, [edi+2]
mov eax, esi
movzx ecx, word[eax]
cmp ecx, 0x20
je off.b864
cmp ecx, 9
jne off.b869
add eax, 2
jmp off.b851
movzx ecx, word[eax]
test cx, cx
je off.b946
cmp ecx, 0x2d
je off.b887
cmp ecx, 0x2b
jne off.b890
add eax, 2
cmp word[eax], 0x30
jne off.b946
movzx ecx, word[eax+2]
cmp ecx, 0x78
je off.b910
cmp ecx, 0x58
jne off.b946
movzx edx, word[eax+4]
push edx
call fcn.0048e189
add esp, 4
test eax, eax
je off.b946
push 0x10
push 0
push esi
call fcn.0048e37b
add esp, 0xc
mov dword[esp+0x28], eax
jmp off.b959
push esi
call fcn.0048dfe6
mov dword[esp+0x2c], eax
add esp, 4
test edi, edi
je off.b1021
movzx eax, word[edi]
test ax, ax
je off.b1021
jmp off.b976
movzx edx, ax
mov ecx, 0x4a352c
mov eax, 0x20
lea ecx, [ecx]
cmp dx, ax
je off.b1071
movzx eax, word[ecx+2]
add ecx, 2
test ax, ax
jne off.b992
movzx eax, word[edi+2]
add edi, 2
test ax, ax
jne off.b976
mov eax, dword[0x4c28ec]
cmp byte[eax+0x104], 0
jne off.b2773
mov ecx, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
push 0x4a358c
push ecx
call fcn.00476680
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 0x18
lea ebx, [edi+2]
mov eax, ebx
movzx ecx, word[eax]
cmp ecx, 0x20
je off.b1089
cmp ecx, 9
jne off.b1094
add eax, 2
jmp off.b1076
cmp word[eax], 0x2a
mov edi, eax
je off.b380
mov ecx, dword[esp+0x14]
lea eax, [esp+0x1c]
push eax
mov eax, dword[esp+0x2c]
push 0
push ecx
mov ecx, dword[esp+0x30]
lea edx, [esp+0x38]
push edx
push eax
push ecx
push ebx
call fcn.00474f00
mov esi, eax
add esp, 0x1c
mov dword[esp+0x68], esi
test esi, esi
je off.b1021
push 0
call dword[sym.imp.USER32.dll_GetDC]
mov edi, eax
mov dword[esp+0x48], edi
test edi, edi
jne off.b1214
cmp byte[esp+0x1c], al
jne off.b1021
cmp dword[esp+0x2c], 1
push esi
jne off.b1203
call dword[sym.imp.USER32.dll_DestroyIcon]
jmp off.b1021
call dword[sym.imp.GDI32.dll_DeleteObject]
jmp off.b1021
mov ebx, dword[sym.imp.GDI32.dll_DeleteObject]
xor eax, eax
cmp dword[esp+0x2c], 1
mov dword[esp+0x78], eax
mov dword[esp+0x14], eax
mov dword[esp+0x28], eax
mov dword[esp+0x38], eax
mov dword[esp+0x6c], eax
mov byte[esp+0xd], al
jne off.b1354
lea edx, [esp+0x94]
push edx
push esi
call dword[sym.imp.USER32.dll_GetIconInfo]
test eax, eax
je off.b1331
push 1
lea eax, [esp+0x12]
push eax
mov eax, dword[esp+0xa8]
lea ecx, [esp+0x54]
push ecx
lea edx, [esp+0x4c]
push edx
push eax
mov eax, edi
call fcn.00438430
mov ecx, dword[esp+0xb8]
add esp, 0x14
push ecx
mov dword[esp+0x3c], eax
call ebx
mov edx, dword[esp+0xa0]
push edx
call ebx
push esi
call fcn.004757f0
mov esi, eax
add esp, 4
mov dword[esp+0x68], eax
test esi, esi
je off.b1021
push 8
lea eax, [esp+0x12]
push eax
lea ecx, [esp+0x54]
push ecx
lea edx, [esp+0x4c]
push edx
push esi
mov eax, edi
call fcn.00438430
add esp, 0x14
mov dword[esp+0x3c], eax
test eax, eax
je off.b1959
mov esi, dword[ebp+0x14]
mov ebx, dword[ebp+0x18]
mov eax, dword[esp+0x48]
sub esi, dword[ebp+0xc]
sub ebx, dword[ebp+0x10]
push eax
inc esi
inc ebx
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
mov edi, eax
mov dword[esp+0x78], edi
test edi, edi
je off.b1959
mov ecx, dword[esp+0x48]
push ebx
push esi
push ecx
call dword[sym.imp.GDI32.dll_CreateCompatibleBitmap]
mov dword[esp+0x14], eax
test eax, eax
je off.b1959
mov edx, eax
push edx
push edi
call dword[sym.imp.GDI32.dll_SelectObject]
mov dword[esp+0x6c], eax
test eax, eax
je off.b1959
mov eax, dword[ebp+0x10]
mov ecx, dword[ebp+0xc]
mov edx, dword[esp+0x48]
push 0xcc0020
push eax
push ecx
push edx
push ebx
push esi
push 0
push 0
push edi
call dword[sym.imp.GDI32.dll_BitBlt]
test eax, eax
je off.b1959
push 8
lea eax, [esp+0x13]
push eax
mov eax, dword[esp+0x1c]
lea ecx, [esp+0x64]
push ecx
lea edx, [esp+0x3c]
push edx
push eax
mov eax, edi
call fcn.00438430
mov esi, eax
add esp, 0x14
mov dword[esp+0x28], esi
test esi, esi
je off.b1959
mov ecx, dword[esp+0x40]
mov edx, dword[esp+0x30]
imul ecx, dword[esp+0x4c]
imul edx, dword[esp+0x5c]
cmp byte[esp+0xe], 0
mov dword[esp+0x44], ecx
mov dword[esp+0x70], edx
jne off.b1605
cmp byte[esp+0xf], 0
je off.b1668
cmp dword[esp+0x34], 0xffffffff
je off.b1620
and dword[esp+0x34], 0xf8f8f8
xor eax, eax
test edx, edx
jle off.b1644
lea ebx, [ebx]
and dword[esi+eax*4], 0xf8f8f8
inc eax
cmp eax, edx
jl off.b1632
mov edi, dword[esp+0x3c]
xor eax, eax
test ecx, ecx
jle off.b1689
and dword[edi+eax*4], 0xf8f8f8
inc eax
cmp eax, ecx
jl off.b1654
jmp off.b1672
mov edi, dword[esp+0x3c]
test ecx, ecx
jle off.b1689
lea eax, [edi+3]
nop
mov byte[eax], 0
add eax, 4
dec ecx
jne off.b1680
mov ebx, dword[esp+0x10]
cmp ebx, 1
jge off.b2153
test edx, edx
jle off.b1721
lea eax, [esi+3]
mov ecx, edx
nop
mov byte[eax], 0
add eax, 4
dec ecx
jne off.b1712
xor esi, esi
mov dword[esp+0x20], esi
test edx, edx
jle off.b2637
mov ebx, dword[edi]
mov dword[esp+0x50], ebx
lea ecx, [ecx]
mov ecx, dword[esp+0x28]
lea edi, [esi*4]
cmp dword[edi+ecx], ebx
je off.b1783
mov eax, dword[esp+0x38]
test eax, eax
je off.b1773
cmp dword[eax], 0
jne off.b1783
cmp ebx, dword[esp+0x34]
jne off.b2133
mov ecx, dword[esp+0x30]
mov eax, esi
cdq
idiv ecx
mov esi, dword[esp+0x5c]
sub esi, eax
cmp dword[esp+0x4c], esi
jg off.b2129
sub ecx, edx
cmp dword[esp+0x40], ecx
jg off.b2129
mov esi, dword[esp+0x20]
xor ebx, ebx
mov byte[esp+0xd], 1
mov dword[esp+0x24], ebx
cmp dword[esp+0x44], ebx
jle off.b1963
mov eax, dword[esp+0x3c]
mov edx, dword[esp+0x38]
sub edx, eax
mov byte[esp+0xd], 1
mov ecx, esi
mov dword[esp+0x2c], edi
mov dword[esp+0x58], edx
mov edi, edi
mov edx, dword[eax]
mov edi, dword[esp+0x28]
cmp dword[edi+esi*4], edx
je off.b1910
cmp dword[esp+0x38], 0
je off.b1900
mov edi, dword[esp+0x58]
cmp dword[edi+eax], 0
jne off.b1910
cmp edx, dword[esp+0x34]
jne off.b2120
inc ebx
cmp ebx, dword[esp+0x40]
jge off.b1920
inc esi
jmp off.b1941
mov edx, dword[esp+0x30]
lea esi, [edx*4]
add dword[esp+0x2c], esi
xor ebx, ebx
add ecx, edx
mov esi, ecx
mov edx, dword[esp+0x24]
inc edx
add eax, 4
mov dword[esp+0x24], edx
cmp edx, dword[esp+0x44]
jl off.b1872
mov esi, dword[esp+0x20]
mov eax, dword[esp+0x48]
push eax
push 0
call dword[sym.imp.USER32.dll_ReleaseDC]
cmp byte[esp+0x1c], 0
jne off.b1994
mov ecx, dword[esp+0x68]
push ecx
call dword[sym.imp.GDI32.dll_DeleteObject]
mov edi, dword[esp+0x78]
test edi, edi
je off.b2025
mov eax, dword[esp+0x6c]
test eax, eax
je off.b2018
push eax
push edi
call dword[sym.imp.GDI32.dll_SelectObject]
push edi
call dword[sym.imp.GDI32.dll_DeleteDC]
mov eax, dword[esp+0x14]
test eax, eax
je off.b2040
push eax
call dword[sym.imp.GDI32.dll_DeleteObject]
mov eax, dword[esp+0x3c]
test eax, eax
je off.b2057
push eax
call fcn.0048e3af
add esp, 4
mov eax, dword[esp+0x38]
test eax, eax
je off.b2074
push eax
call fcn.0048e3af
add esp, 4
mov eax, dword[esp+0x28]
test eax, eax
je off.b1021
push eax
call fcn.0048e3af
add esp, 4
cmp byte[esp+0xd], 0
jne off.b2665
mov eax, 1
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 0x18
mov ebx, dword[esp+0x50]
mov byte[esp+0xd], 0
mov esi, dword[esp+0x20]
inc esi
mov dword[esp+0x20], esi
cmp esi, dword[esp+0x70]
jl off.b1744
jmp off.b2637
xor esi, esi
mov dword[esp+0x20], esi
test edx, edx
jle off.b2637
mov eax, esi
cdq
idiv dword[esp+0x30]
mov ecx, dword[esp+0x5c]
sub ecx, eax
cmp dword[esp+0x4c], ecx
jg off.b2622
mov eax, dword[esp+0x30]
sub eax, edx
cmp dword[esp+0x40], eax
jg off.b2622
xor eax, eax
mov byte[esp+0xd], 1
mov dword[esp+0x54], eax
mov dword[esp+0x24], eax
mov dword[esp+0x2c], esi
cmp dword[esp+0x44], eax
jle off.b1963
mov eax, dword[esp+0x38]
lea ecx, [esi*4]
sub eax, edi
mov byte[esp+0xd], 1
mov dword[esp+0x50], esi
mov dword[esp+0x74], ecx
mov dword[esp+0x58], eax
lea esp, [esp]
movzx eax, byte[edi+2]
mov dl, byte[edi+1]
cmp ebx, eax
jle off.b2290
mov byte[esp+0xe], 0
jmp off.b2298
mov cl, al
sub cl, bl
mov byte[esp+0xe], cl
movzx edx, dl
mov dword[esp+0x7c], edx
cmp ebx, edx
jle off.b2316
mov byte[esp+0x1e], 0
jmp off.b2330
mov ebx, dword[esp+0x10]
mov cl, dl
sub cl, byte[esp+0x10]
mov byte[esp+0x1e], cl
movzx ecx, byte[edi]
cmp ebx, ecx
jle off.b2344
mov byte[esp+0x1f], 0
jmp off.b2358
mov dl, cl
sub dl, byte[esp+0x10]
mov byte[esp+0x1f], dl
mov edx, dword[esp+0x7c]
mov ebx, dword[esp+0x10]
mov esi, 0xff
sub esi, eax
cmp ebx, esi
jle off.b2384
mov eax, 0xff
mov byte[esp+0x1d], al
jmp off.b2395
add al, bl
mov byte[esp+0x1d], al
mov eax, 0xff
mov esi, eax
sub esi, edx
cmp ebx, esi
jle off.b2409
mov byte[esp+0x1b], al
jmp off.b2415
add dl, bl
mov byte[esp+0x1b], dl
mov edx, eax
sub edx, ecx
cmp ebx, edx
jle off.b2429
mov byte[esp+0xf], al
jmp off.b2435
add cl, bl
mov byte[esp+0xf], cl
mov eax, dword[esp+0x28]
mov esi, dword[esp+0x2c]
mov cl, byte[eax+esi*4+2]
mov dl, byte[eax+esi*4+1]
mov al, byte[eax+esi*4]
cmp cl, byte[esp+0xe]
jb off.b2490
cmp cl, byte[esp+0x1d]
ja off.b2490
cmp dl, byte[esp+0x1e]
jb off.b2490
cmp dl, byte[esp+0x1b]
ja off.b2490
cmp al, byte[esp+0x1f]
jb off.b2490
cmp al, byte[esp+0xf]
jbe off.b2515
cmp dword[esp+0x38], 0
je off.b2507
mov eax, dword[esp+0x58]
cmp dword[edi+eax], 0
jne off.b2515
mov ecx, dword[esp+0x34]
cmp dword[edi], ecx
jne off.b2605
mov eax, dword[esp+0x54]
inc eax
mov dword[esp+0x54], eax
cmp eax, dword[esp+0x40]
jge off.b2537
inc esi
mov dword[esp+0x2c], esi
jmp off.b2574
mov eax, dword[esp+0x30]
lea ecx, [eax*4]
add dword[esp+0x74], ecx
mov ecx, dword[esp+0x50]
add ecx, eax
mov dword[esp+0x54], 0
mov dword[esp+0x50], ecx
mov dword[esp+0x2c], ecx
mov eax, dword[esp+0x24]
inc eax
add edi, 4
mov dword[esp+0x24], eax
cmp eax, dword[esp+0x44]
jge off.b1959
mov ebx, dword[esp+0x10]
jmp off.b2272
mov ebx, dword[esp+0x10]
mov esi, dword[esp+0x20]
mov edi, dword[esp+0x3c]
mov byte[esp+0xd], 0
inc esi
mov dword[esp+0x20], esi
cmp esi, dword[esp+0x70]
jl off.b2167
mov edx, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
push 0x4a331c
push edx
call fcn.00476680
jmp off.b1963
mov ecx, dword[esp+0x8c]
test ecx, ecx
je off.b2704
mov eax, esi
cdq
idiv dword[esp+0x30]
push 0x18
mov eax, edx
sub eax, dword[esp+0x64]
add eax, dword[ebp+0xc]
cdq
push edx
push eax
mov eax, ecx
call fcn.004010e0
mov ecx, dword[esp+0x90]
test ecx, ecx
je off.b2741
mov eax, esi
cdq
idiv dword[esp+0x30]
push 0x18
sub eax, dword[esp+0x68]
add eax, dword[ebp+0x10]
cdq
push edx
push eax
mov eax, ecx
call fcn.004010e0
mov edx, dword[0x4c6cb4]
push 1
push 0
push 0xffffffffffffffff
push 0x4a0900
push edx
call fcn.00476680
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 0x18
mov ecx, dword[ebp+8]
push 0x4ab02c
push 0
push 0x4a358c
call fcn.0042dc50
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret 0x18

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f