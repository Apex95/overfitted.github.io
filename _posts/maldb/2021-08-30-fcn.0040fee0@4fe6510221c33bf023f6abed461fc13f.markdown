---
layout: post
title:  "fcn.0040fee0 @ 4fe6510221c33bf023f6abed461fc13f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0040fee0
- **Origin (md5):** 4fe6510221c33bf023f6abed461fc13f
- **VirusTotal:** [virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f][virustotal_ref]

# Code Tags
<span class="tag" id="LINKING">LINKING</span>


# Behaviour Tags
<span class="bhv-tag" id="SCREENSHOTS_FOREGROUND_WINDOW">SCREENSHOTS_FOREGROUND_WINDOW / 0.03077718675207343</span><span class="bhv-tag" id="CREATES_SOCKET_LISTENER">CREATES_SOCKET_LISTENER / 0.22309018422424232</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [16.437116622924805, 205.55738830566406, '<b><a href="/report/fcn.0040fee0@4fe6510221c33bf023f6abed461fc13f">fcn.0040fee0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>mov eax, dword[0x4c28ec]<br>mov eax, dword[eax+0xd0]<br>sub esp, 0x124<br>push ebx<br>mov ebx, dword[esp+0x134]<br>push ebp<br>mov ebp, dword[esp+0x13c]<br>push esi<br>mov esi, dword[esp+0x154]<br>mov dword[0x4c7f18], eax<br>cmp eax, 1<br>je 0x40ff18<br>cmp eax, 3<br>jne 0x40ff48<br>cmp dword[0x4c92dc], 0<br>je 0x40ff3b<br>call fcn.00408e80<br>test al, al<br>jne 0x40ff36<br>mov eax, 1<br>mov dword[0x4c7f18], eax<br>jmp 0x40ff4c<br>mov eax, dword[0x4c7f18]<br>dec eax<br>neg eax<br>sbb eax, eax<br>and eax, 2<br>mov dword[0x4c7f18], eax<br>test eax, eax<br>je 0x40ff97<br>lea ecx, [esp+0x18]<br>mov dword[0x4c53ec], ecx<br>mov ecx, 0x80000000<br>mov dword[0x4c53e4], 0xa<br>mov byte[0x4c53d7], 0<br>mov dword[0x4c53d8], ecx<br>mov dword[0x4c53dc], ecx<br>mov byte[0x4c53d6], 0<br>mov dword[0x4c53e8], 0<br>mov byte[0x4c53d5], 0<br>mov byte[0x4c53d4], 1<br>mov ecx, dword[0x4c29c8]<br>mov dl, byte[0x4c6ec4]<br>mov byte[esp+0x13], dl<br>cmp ecx, 9<br>je 0x40ffb5<br>cmp ecx, 0xa<br>jne 0x410045<br>test eax, eax<br>jne 0x410045<br>test byte[0x4c9b80], 1<br>mov byte[esp+0x12], 1<br>jne 0x40fff3<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>mov eax, dword[0x4c7f18]<br>mov ecx, dword[0x4c9b7c]<br>test ecx, ecx<br>je 0x410006<br>push 1<br>call ecx<br>mov eax, dword[0x4c7f18]<br>mov byte[0x4c6ec4], 1<br>movzx ecx, byte[esp+0x134]<br>sub ecx, 0x56<br>je 0x410072<br>dec ecx<br>je 0x41004c<br>dec ecx<br>jne 0x410094<br>mov eax, dword[esp+0x148]<br>mov ecx, dword[esp+0x144]<br>push esi<br>push edi<br>push eax<br>mov al, byte[esp+0x144]<br>push ecx<br>push ebp<br>push ebx<br>call fcn.00410160<br>add esp, 0x18<br>jmp 0x41008f<br>mov byte[esp+0x12], 0<br>jmp 0x41000d<br>mov edx, dword[esp+0x150]<br>mov eax, dword[esp+0x14c]<br>push esi<br>push edx<br>push eax<br>mov al, byte[esp+0x144]<br>push ebp<br>push ebx<br>mov ecx, edi<br>call fcn.004102e0<br>add esp, 0x14<br>jmp 0x41008f<br>push esi<br>lea ecx, [esp+0x144]<br>push edi<br>push ecx<br>lea ecx, [esp+0x20]<br>lea eax, [esp+0x148]<br>call fcn.004106d0<br>add esp, 0xc<br>mov eax, dword[0x4c7f18]<br>test eax, eax<br>je 0x410102<br>cmp byte[0x4c53d5], 0<br>mov dword[esp+0x14], 0xffffffff<br>jne 0x4100c6<br>cmp dword[0x4c53e8], 0<br>jbe 0x4100c6<br>lea edx, [esp+0x14]<br>push 0<br>push edx<br>call fcn.00410cf0<br>mov eax, dword[0x4c7f18]<br>add esp, 8<br>dec eax<br>neg eax<br>sbb eax, eax<br>and eax, 0x3e8<br>add eax, 0x1f4<br>cmp dword[0x4c53e4], eax<br>jbe 0x4100eb<br>mov eax, dword[0x4c53ec]<br>push eax<br>call fcn.0048e3af<br>add esp, 4<br>mov ecx, dword[esp+0x14]<br>push ecx<br>mov dword[0x4c7f18], 0<br>call fcn.00410e40<br>add esp, 4<br>cmp byte[esp+0x12], 0<br>je 0x410152<br>cmp byte[esp+0x13], 0<br>jne 0x410152<br>test byte[0x4c9b80], 1<br>jne 0x41013e<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>jmp 0x410143<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x41014b<br>push 0<br>call eax<br>mov byte[0x4c6ec4], 0<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0x124<br>ret <br><eoc> ', 'point { fill-color: #e0440e; }'],
[-197.4603271484375, -92.65523529052734, '<b><a href="/report/fcn.004102e0@4fe6510221c33bf023f6abed461fc13f">fcn.004102e0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>sub esp, 0x18<br>push ebx<br>push ebp<br>push esi<br>mov esi, dword[esp+0x28]<br>push edi<br>mov edi, dword[esp+0x30]<br>mov bl, al<br>cmp esi, 0x80000000<br>jne 0x410303<br>cmp edi, esi<br>jne 0x410699<br>jmp 0x41030f<br>cmp edi, 0x80000000<br>je 0x410699<br>cmp dword[esp+0x34], 1<br>jl 0x410699<br>xor eax, eax<br>mov dword[esp+0x14], eax<br>cmp esi, 0x80000000<br>je 0x410357<br>cmp edi, 0x80000000<br>je 0x410357<br>mov eax, dword[esp+0x3c]<br>push eax<br>push ecx<br>lea edx, [esp+0x38]<br>push edx<br>lea ecx, [esp+0x20]<br>lea eax, [esp+0x38]<br>call fcn.004106d0<br>mov edi, dword[esp+0x3c]<br>mov esi, dword[esp+0x38]<br>mov eax, dword[esp+0x20]<br>add esp, 0xc<br>movzx ecx, bl<br>add ecx, 0xffffff64<br>cmp ecx, 3<br>ja case.default.0x410365<br>jmp dword[ecx*4+0x4106a4]<br>mov edx, dword[esp+0x34]<br>mov ecx, edx<br>shl ecx, 4<br>sub ecx, edx<br>add ecx, ecx<br>add ecx, ecx<br>add ecx, ecx<br>or eax, 0x800<br>push eax<br>mov edx, edi<br>mov eax, esi<br>call fcn.004108c0<br>add esp, 4<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0x18<br>ret <br>mov ecx, dword[esp+0x34]<br>imul ecx, ecx, 0xffffff88<br>jmp 0x41037d<br>mov ecx, dword[esp+0x34]<br>imul ecx, ecx, 0xffffff88<br>or eax, 0x1000<br>jmp 0x410382<br>mov edx, dword[esp+0x34]<br>mov ecx, edx<br>shl ecx, 4<br>sub ecx, edx<br>add ecx, ecx<br>add ecx, ecx<br>add ecx, ecx<br>or eax, 0x1000<br>jmp 0x410382<br>xor ebp, ebp<br>mov dword[esp+0x2c], ebp<br>cmp bl, 0x9a<br>jne 0x4103ee<br>cmp dword[0x4c7f18], 2<br>je 0x4103ea<br>push 0x17<br>call dword[sym.imp.USER32.dll_GetSystemMetrics]<br>test eax, eax<br>mov eax, dword[esp+0x14]<br>jne 0x41040e<br>mov bl, 1<br>jmp 0x410410<br>cmp bl, 0x9b<br>jne 0x410410<br>cmp dword[0x4c7f18], 2<br>je 0x41040e<br>push 0x17<br>call dword[sym.imp.USER32.dll_GetSystemMetrics]<br>test eax, eax<br>mov eax, dword[esp+0x14]<br>mov bl, 1<br>jne 0x410410<br>mov bl, 2<br>movzx ecx, bl<br>dec ecx<br>cmp ecx, 5<br>ja case.0x41041d.3<br>jmp dword[ecx*4+0x4106b4]<br>cmp dword[0x4c7f18], ebp<br>je 0x410438<br>cmp dword[0x4c53e8], ebp<br>jne 0x41053f<br>mov ecx, dword[esp+0x38]<br>test ecx, ecx<br>je 0x410456<br>cmp ecx, 1<br>jne 0x41053f<br>cmp byte[0x4c9304], 0<br>je 0x41053f<br>lea eax, [esp+0x20]<br>push eax<br>call dword[sym.imp.USER32.dll_GetCursorPos]<br>mov ecx, dword[esp+0x24]<br>mov edx, dword[esp+0x20]<br>push ecx<br>push edx<br>call dword[sym.imp.USER32.dll_WindowFromPoint]<br>test eax, eax<br>je 0x41053b<br>call fcn.004784d0<br>mov ebp, eax<br>test ebp, ebp<br>je 0x410537<br>push 0<br>push ebp<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>cmp eax, dword[0x4c85cc]<br>jne 0x410537<br>movzx eax, word[esp+0x24]<br>movzx ecx, word[esp+0x20]<br>shl eax, 0x10<br>or eax, ecx<br>push eax<br>push 0<br>push 0x84<br>push ebp<br>call dword[sym.imp.USER32.dll_SendMessageW]<br>cmp bl, 1<br>jne 0x4104f1<br>cmp eax, 0x14<br>je 0x410500<br>cmp eax, 9<br>je 0x410500<br>cmp eax, 8<br>je 0x410500<br>cmp eax, 0x15<br>je 0x410500<br>mov ebp, dword[esp+0x2c]<br>mov eax, dword[esp+0x14]<br>mov dword[esp+0x18], 2<br>mov dword[esp+0x1c], 4<br>jmp case.0x41041d.3<br>cmp bl, 2<br>jne 0x410537<br>cmp eax, 2<br>je 0x410500<br>cmp eax, 3<br>jne 0x410556<br>cmp dword[esp+0x38], 0<br>jne 0x410521<br>mov dword[0x4c9bf0], eax<br>mov eax, ebp<br>mov byte[0x4c9304], bl<br>call fcn.00477480<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0x18<br>ret <br>mov ebp, dword[esp+0x2c]<br>cmp dword[0x4c9bf0], eax<br>jne 0x41053b<br>mov dword[esp+0x38], 2<br>jmp 0x41053b<br>mov ebp, dword[esp+0x2c]<br>mov eax, dword[esp+0x14]<br>cmp bl, 1<br>jne 0x41055e<br>mov dword[esp+0x18], 2<br>mov dword[esp+0x1c], 4<br>jmp case.0x41041d.3<br>mov ebp, dword[esp+0x2c]<br>mov eax, dword[esp+0x14]<br>mov dword[esp+0x18], 8<br>mov dword[esp+0x1c], 0x10<br>jmp case.0x41041d.3<br>mov dword[esp+0x18], 0x20<br>mov dword[esp+0x1c], 0x40<br>jmp case.0x41041d.3<br>xor edx, edx<br>cmp bl, 5<br>setne dl<br>mov dword[esp+0x18], 0x80<br>mov dword[esp+0x1c], 0x100<br>inc edx<br>mov dword[esp+0x2c], edx<br>mov ebp, edx<br>mov ecx, dword[esp+0x34]<br>test ecx, ecx<br>jle 0x410692<br>mov dword[esp+0x2c], ecx<br>mov ecx, 1<br>cmp dword[esp+0x38], ecx<br>je 0x410620<br>mov ebx, dword[esp+0x18]<br>or ebx, eax<br>cmp dword[0x4c7f18], 0<br>je 0x4105d8<br>push ebp<br>mov eax, esi<br>call fcn.00410a90<br>add esp, 4<br>jmp 0x41060e<br>mov eax, dword[0x4c28ec]<br>movzx ecx, byte[eax+0xf2]<br>mov edx, 0xffc3d44d<br>sub edx, ecx<br>lea eax, [edi-0x80000000]<br>neg eax<br>sbb eax, eax<br>push edx<br>and eax, edi<br>lea ecx, [esi-0x80000000]<br>neg ecx<br>push ebp<br>sbb ecx, ecx<br>push eax<br>and ecx, esi<br>push ecx<br>push ebx<br>call dword[sym.imp.USER32.dll_mouse_event]<br>cmp byte[0x4c9304], 0<br>jne 0x41061c<br>call fcn.00410f20<br>mov eax, dword[esp+0x14]<br>cmp dword[esp+0x38], 0<br>je 0x410683<br>mov ebx, dword[esp+0x1c]<br>or ebx, eax<br>cmp dword[0x4c7f18], 0<br>je 0x410643<br>push ebp<br>mov eax, esi<br>call fcn.00410a90<br>add esp, 4<br>jmp 0x41067a<br>mov edx, dword[0x4c28ec]<br>movzx eax, byte[edx+0xf2]<br>mov ecx, 0xffc3d44d<br>sub ecx, eax<br>lea edx, [edi-0x80000000]<br>neg edx<br>sbb edx, edx<br>push ecx<br>and edx, edi<br>lea eax, [esi-0x80000000]<br>neg eax<br>push ebp<br>sbb eax, eax<br>push edx<br>and eax, esi<br>push eax<br>push ebx<br>call dword[sym.imp.USER32.dll_mouse_event]<br>call fcn.00410f20<br>mov eax, dword[esp+0x14]<br>mov ecx, 1<br>sub dword[esp+0x2c], ecx<br>jne 0x4105b6<br>mov byte[0x4c9304], 0<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0x18<br>ret <br><eoc> ', 'null'],
[167.75729370117188, -128.78672790527344, '<b><a href="/report/fcn.0040f3b0@4fe6510221c33bf023f6abed461fc13f">fcn.0040f3b0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>push ebp<br>mov ebp, esp<br>and esp, 0xfffffff8<br>movzx eax, byte[ebp+0xc]<br>sub esp, 0x11c<br>push ebx<br>mov ebx, dword[ebp+0x10]<br>or ax, bx<br>push esi<br>push edi<br>je 0x40f9c7<br>cmp dword[ebp+0x1c], 0<br>jne 0x40f3dc<br>mov dword[ebp+0x1c], 0xffc3d44d<br>call dword[sym.imp.KERNEL32.dll_GetCurrentThreadId]<br>cmp eax, dword[0x4c53a0]<br>mov eax, dword[0x4c7f18]<br>sete byte[esp+0x11]<br>test eax, eax<br>je 0x40f402<br>cmp byte[esp+0x11], 0<br>mov byte[esp+0x12], 1<br>je 0x40f407<br>mov byte[esp+0x12], 0<br>cmp eax, 1<br>je 0x40f413<br>cmp byte[esp+0x11], 0<br>je 0x40f417<br>mov byte[ebp+0x18], 0<br>cmp byte[ebp+0xc], 0<br>jne 0x40f429<br>mov ecx, ebx<br>call fcn.00412980<br>mov byte[ebp+0xc], al<br>jmp 0x40f442<br>test bx, bx<br>jne 0x40f442<br>mov ecx, dword[ebp+0xc]<br>push ecx<br>xor bl, bl<br>call fcn.00412700<br>movzx ebx, ax<br>add esp, 4<br>mov dword[ebp+0x10], ebx<br>mov edx, ebx<br>xor eax, eax<br>shr edx, 8<br>test dl, dl<br>setne al<br>cmp dword[0x4c7f18], 2<br>mov dword[esp+0x1c], eax<br>jne case.default.0x40f469<br>movzx eax, byte[ebp+0xc]<br>add eax, 0xffffff60<br>cmp eax, 5<br>ja case.default.0x40f469<br>jmp dword[eax*4+0x40f9d0]<br>mov byte[ebp+0xc], 0x11<br>jmp case.default.0x40f469<br>mov byte[ebp+0xc], 0x10<br>jmp case.default.0x40f469<br>mov byte[ebp+0xc], 0x12<br>cmp dword[ebp+0x14], 0<br>mov al, byte[ebp+0xc]<br>je 0x40f5b5<br>xor ecx, ecx<br>mov edx, ebx<br>call fcn.00411b10<br>mov ebx, dword[ebp+8]<br>test al, al<br>je 0x40f54b<br>lea ecx, [esp+0x28]<br>push ecx<br>call dword[sym.imp.USER32.dll_GetKeyboardState]<br>mov cl, 0x80<br>mov dl, 0x7f<br>test ebx, ebx<br>jne 0x40f4c2<br>movzx eax, byte[ebp+0xc]<br>or byte[esp+eax+0x28], cl<br>lea eax, [esp+eax+0x28]<br>jmp 0x40f4d3<br>cmp ebx, 1<br>jne 0x40f4d3<br>movzx eax, byte[ebp+0xc]<br>and byte[esp+eax+0x28], dl<br>lea eax, [esp+eax+0x28]<br>movzx eax, byte[ebp+0xc]<br>add eax, 0xffffff60<br>cmp eax, 5<br>ja case.default.0x40f4e1<br>jmp dword[eax*4+0x40f9e8]<br>test byte[esp+0xca], cl<br>jne 0x40f500<br>test byte[esp+0xcb], cl<br>jne 0x40f500<br>and byte[esp+0x39], dl<br>jmp case.default.0x40f4e1<br>or byte[esp+0x39], cl<br>jmp case.default.0x40f4e1<br>test byte[esp+0xc8], cl<br>jne 0x40f51e<br>test byte[esp+0xc9], cl<br>jne 0x40f51e<br>and byte[esp+0x38], dl<br>jmp case.default.0x40f4e1<br>or byte[esp+0x38], cl<br>jmp case.default.0x40f4e1<br>test byte[esp+0xcc], cl<br>jne 0x40f53c<br>test byte[esp+0xcd], cl<br>jne 0x40f53c<br>and byte[esp+0x3a], dl<br>jmp case.default.0x40f4e1<br>or byte[esp+0x3a], cl<br>lea edx, [esp+0x28]<br>push edx<br>call dword[sym.imp.USER32.dll_SetKeyboardState]<br>movzx esi, word[ebp+0x10]<br>mov edi, dword[sym.imp.USER32.dll_PostMessageW]<br>shl esi, 0x10<br>cmp ebx, 1<br>je 0x40f573<br>movzx ecx, byte[ebp+0xc]<br>mov edx, dword[ebp+0x14]<br>mov eax, esi<br>or eax, 1<br>push eax<br>push ecx<br>push 0x100<br>push edx<br>call edi<br>cmp byte[ebp+0x18], 0<br>je 0x40f591<br>cmp ebx, 2<br>jne 0x40f591<br>mov eax, dword[0x4c28ec]<br>mov ecx, dword[eax+0x64]<br>push ecx<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40f599<br>test ebx, ebx<br>je 0x40f98e<br>movzx edx, byte[ebp+0xc]<br>mov eax, dword[ebp+0x14]<br>or esi, 0xc0000001<br>push esi<br>push edx<br>push 0x101<br>push eax<br>call edi<br>jmp 0x40f98e<br>cmp byte[0x4c6ec4], 0<br>mov ecx, dword[ebp+8]<br>mov dword[0x4c53f8], ecx<br>mov byte[0x4c6eff], al<br>je 0x40f612<br>cmp al, 0x12<br>je 0x40f5d8<br>cmp al, 0xa4<br>je 0x40f5d8<br>cmp al, 0xa5<br>jne 0x40f612<br>cmp byte[esp+0x11], 0<br>jne 0x40f612<br>test byte[0x4c9b80], 1<br>mov byte[esp+0x16], 1<br>jne 0x40f643<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>jmp 0x40f648<br>cmp byte[esp+0x11], 0<br>mov byte[esp+0x16], 0<br>lea esi, [esp+0x24]<br>jne 0x40f627<br>mov esi, 0x4c53f0<br>mov dword[esp+0x18], esi<br>cmp al, 0xa5<br>jne 0x40f65c<br>cmp byte[esp+0x12], 0<br>jne 0x40f65c<br>cmp dword[0x4c65e8], 0<br>je 0x40f65c<br>mov al, 1<br>jmp 0x40f65e<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x40f650<br>push 0<br>call eax<br>mov al, byte[ebp+0xc]<br>mov byte[0x4c6ec4], 0<br>jmp 0x40f622<br>xor al, al<br>mov byte[esp+0x14], al<br>mov byte[esp+0x13], al<br>test al, al<br>je 0x40f6d6<br>cmp byte[esp+0x11], 0<br>jne 0x40f679<br>mov edi, dword[0x4c53f4]<br>jmp 0x40f6a6<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>test eax, eax<br>je 0x40f68e<br>push 0<br>push eax<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>jmp 0x40f690<br>xor eax, eax<br>push eax<br>call dword[sym.imp.USER32.dll_GetKeyboardLayout]<br>mov edi, eax<br>push edi<br>xor eax, eax<br>call fcn.00411f10<br>add esp, 4<br>mov dword[esi], eax<br>cmp dword[esi], 0<br>je 0x40f6b2<br>mov byte[esp+0x13], 0<br>jmp 0x40f6da<br>push 0xa2<br>mov byte[esp+0x19], 0xa2<br>call dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>mov edx, dword[ebp+0x1c]<br>mov dword[0x4c65dc], edx<br>shr eax, 0xf<br>and al, 1<br>mov byte[esp+0x17], al<br>jmp 0x40f6da<br>mov edi, dword[esp+0x24]<br>cmp byte[esp+0x12], 0<br>je 0x40f6f3<br>mov al, byte[ebp+0xc]<br>xor ecx, ecx<br>mov edx, ebx<br>call fcn.00411b10<br>mov byte[esp+0x20], al<br>jmp 0x40f6f8<br>mov byte[esp+0x20], 0<br>cmp byte[esp+0x11], 0<br>jne 0x40f71e<br>mov eax, dword[0x4c7f18]<br>cmp eax, 2<br>je 0x40f71e<br>cmp dword[0x4c65e8], 0<br>je 0x40f717<br>cmp eax, 1<br>jne 0x40f71e<br>mov byte[esp+0x11], 1<br>jmp 0x40f723<br>mov byte[esp+0x11], 0<br>cmp dword[ebp+8], 1<br>mov esi, dword[sym.imp.USER32.dll_keybd_event]<br>mov ebx, dword[esp+0x20]<br>je 0x40f812<br>cmp byte[esp+0x12], 0<br>je 0x40f75d<br>mov eax, dword[ebp+0x1c]<br>mov ecx, dword[esp+0x1c]<br>mov edx, dword[ebp+0x10]<br>push eax<br>mov eax, dword[ebp+0xc]<br>push ecx<br>push edx<br>push eax<br>push ebx<br>call fcn.00410920<br>add esp, 0x14<br>jmp 0x40f7f9<br>cmp byte[esp+0x14], 0<br>je 0x40f776<br>mov ecx, dword[esp+0x18]<br>cmp dword[ecx], 3<br>jne 0x40f776<br>mov edx, dword[ebp+0x1c]<br>mov dword[0x4c65e0], edx<br>mov eax, dword[ebp+0x1c]<br>mov ecx, dword[esp+0x1c]<br>mov edx, dword[ebp+0x10]<br>push eax<br>mov eax, dword[ebp+0xc]<br>push ecx<br>push edx<br>push eax<br>call esi<br>cmp byte[esp+0x13], 0<br>mov dword[0x4c65e0], 0<br>je 0x40f7f9<br>cmp dword[0x4c65dc], 0<br>mov byte[esp+0x13], 0<br>je 0x40f7c5<br>push edi<br>mov eax, 4<br>mov dword[0x4c65dc], 0<br>call fcn.00411f10<br>mov ecx, dword[esp+0x1c]<br>mov dword[ecx], eax<br>jmp 0x40f7f6<br>cmp byte[esp+0x17], 0<br>jne 0x40f7f9<br>movzx edx, byte[esp+0x15]<br>push edx<br>call dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>mov ecx, 0x8000<br>and ax, cx<br>movzx eax, ax<br>neg eax<br>sbb eax, eax<br>add eax, 4<br>push edi<br>call fcn.00411f10<br>mov edx, dword[esp+0x1c]<br>mov dword[edx], eax<br>add esp, 4<br>cmp byte[esp+0x11], 0<br>je 0x40f812<br>mov eax, dword[ebp+0x10]<br>mov ecx, dword[ebp+0xc]<br>push eax<br>push ecx<br>xor dl, dl<br>call fcn.00411010<br>add esp, 8<br>cmp byte[ebp+0x18], 0<br>je 0x40f851<br>mov eax, 2<br>cmp dword[ebp+8], eax<br>jne 0x40f851<br>cmp dword[0x4c7f18], eax<br>jne 0x40f83e<br>mov edx, dword[0x4c28ec]<br>mov eax, dword[edx+0x68]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40f85b<br>mov eax, dword[0x4c28ec]<br>mov eax, dword[eax+0x64]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40f85b<br>cmp dword[ebp+8], 0<br>je 0x40f945<br>or dword[esp+0x1c], 2<br>cmp byte[esp+0x12], 0<br>je 0x40f889<br>mov ecx, dword[ebp+0x1c]<br>mov edx, dword[esp+0x1c]<br>mov eax, dword[ebp+0x10]<br>push ecx<br>mov ecx, dword[ebp+0xc]<br>push edx<br>push eax<br>push ecx<br>push ebx<br>call fcn.00410920<br>mov ebx, dword[ebp+0x10]<br>add esp, 0x14<br>jmp 0x40f915<br>cmp byte[esp+0x14], 0<br>je 0x40f8a1<br>mov edx, dword[esp+0x18]<br>cmp dword[edx], 3<br>jne 0x40f8a1<br>mov eax, dword[ebp+0x1c]<br>mov dword[0x4c65e4], eax<br>mov ecx, dword[ebp+0x1c]<br>mov edx, dword[esp+0x1c]<br>mov ebx, dword[ebp+0x10]<br>mov eax, dword[ebp+0xc]<br>push ecx<br>push edx<br>push ebx<br>push eax<br>call esi<br>xor eax, eax<br>mov dword[0x4c65e4], eax<br>cmp byte[esp+0x13], al<br>je 0x40f915<br>cmp dword[0x4c65dc], eax<br>je 0x40f8e1<br>mov dword[0x4c65dc], eax<br>push edi<br>mov eax, 4<br>call fcn.00411f10<br>mov ecx, dword[esp+0x1c]<br>mov dword[ecx], eax<br>jmp 0x40f912<br>cmp byte[esp+0x17], al<br>je 0x40f915<br>movzx edx, byte[esp+0x15]<br>push edx<br>call dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>mov ecx, 0x8000<br>test cx, ax<br>mov eax, 0<br>setne al<br>push edi<br>add eax, 3<br>call fcn.00411f10<br>mov edx, dword[esp+0x1c]<br>mov dword[edx], eax<br>add esp, 4<br>mov eax, dword[esp+0x18]<br>cmp dword[eax], 0<br>je 0x40f92f<br>mov ecx, 0x138<br>cmp bx, cx<br>jne 0x40f92f<br>and byte[0x4c53d7], 0xfe<br>cmp byte[esp+0x11], 0<br>je 0x40f945<br>mov edx, dword[ebp+0xc]<br>push ebx<br>push edx<br>mov dl, 1<br>call fcn.00411010<br>add esp, 8<br>cmp byte[esp+0x16], 0<br>je 0x40f98e<br>test byte[0x4c9b80], 1<br>jne 0x40f97a<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>jmp 0x40f97f<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x40f987<br>push 1<br>call eax<br>mov byte[0x4c6ec4], 1<br>cmp byte[ebp+0x18], 0<br>je 0x40f9c7<br>cmp dword[0x4c7f18], 2<br>jne 0x40f9b5<br>mov eax, dword[0x4c28ec]<br>mov eax, dword[eax+0x60]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret <br>mov ecx, dword[0x4c28ec]<br>mov eax, dword[ecx+0x5c]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret <br><eoc> ', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

mov eax, dword[0x4c28ec]
mov eax, dword[eax+0xd0]
sub esp, 0x124
push ebx
mov ebx, dword[esp+0x134]
push ebp
mov ebp, dword[esp+0x13c]
push esi
mov esi, dword[esp+0x154]
mov dword[0x4c7f18], eax
cmp eax, 1
je 0x40ff18
cmp eax, 3
jne 0x40ff48
cmp dword[0x4c92dc], 0
je 0x40ff3b
call fcn.00408e80
test al, al
jne 0x40ff36
mov eax, 1
mov dword[0x4c7f18], eax
jmp 0x40ff4c
mov eax, dword[0x4c7f18]
dec eax
neg eax
sbb eax, eax
and eax, 2
mov dword[0x4c7f18], eax
test eax, eax
je 0x40ff97
lea ecx, [esp+0x18]
mov dword[0x4c53ec], ecx
mov ecx, 0x80000000
mov dword[0x4c53e4], 0xa
mov byte[0x4c53d7], 0
mov dword[0x4c53d8], ecx
mov dword[0x4c53dc], ecx
mov byte[0x4c53d6], 0
mov dword[0x4c53e8], 0
mov byte[0x4c53d5], 0
mov byte[0x4c53d4], 1
mov ecx, dword[0x4c29c8]
mov dl, byte[0x4c6ec4]
mov byte[esp+0x13], dl
cmp ecx, 9
je 0x40ffb5
cmp ecx, 0xa
jne 0x410045
test eax, eax
jne 0x410045
test byte[0x4c9b80], 1
mov byte[esp+0x12], 1
jne 0x40fff3
or dword[0x4c9b80], 1
push str.BlockInput
push str.user32
call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]
push eax
call dword[sym.imp.KERNEL32.dll_GetProcAddress]
mov dword[0x4c9b7c], eax
mov eax, dword[0x4c7f18]
mov ecx, dword[0x4c9b7c]
test ecx, ecx
je 0x410006
push 1
call ecx
mov eax, dword[0x4c7f18]
mov byte[0x4c6ec4], 1
movzx ecx, byte[esp+0x134]
sub ecx, 0x56
je 0x410072
dec ecx
je 0x41004c
dec ecx
jne 0x410094
mov eax, dword[esp+0x148]
mov ecx, dword[esp+0x144]
push esi
push edi
push eax
mov al, byte[esp+0x144]
push ecx
push ebp
push ebx
call fcn.00410160
add esp, 0x18
jmp 0x41008f
mov byte[esp+0x12], 0
jmp 0x41000d
mov edx, dword[esp+0x150]
mov eax, dword[esp+0x14c]
push esi
push edx
push eax
mov al, byte[esp+0x144]
push ebp
push ebx
mov ecx, edi
call fcn.004102e0
add esp, 0x14
jmp 0x41008f
push esi
lea ecx, [esp+0x144]
push edi
push ecx
lea ecx, [esp+0x20]
lea eax, [esp+0x148]
call fcn.004106d0
add esp, 0xc
mov eax, dword[0x4c7f18]
test eax, eax
je 0x410102
cmp byte[0x4c53d5], 0
mov dword[esp+0x14], 0xffffffff
jne 0x4100c6
cmp dword[0x4c53e8], 0
jbe 0x4100c6
lea edx, [esp+0x14]
push 0
push edx
call fcn.00410cf0
mov eax, dword[0x4c7f18]
add esp, 8
dec eax
neg eax
sbb eax, eax
and eax, 0x3e8
add eax, 0x1f4
cmp dword[0x4c53e4], eax
jbe 0x4100eb
mov eax, dword[0x4c53ec]
push eax
call fcn.0048e3af
add esp, 4
mov ecx, dword[esp+0x14]
push ecx
mov dword[0x4c7f18], 0
call fcn.00410e40
add esp, 4
cmp byte[esp+0x12], 0
je 0x410152
cmp byte[esp+0x13], 0
jne 0x410152
test byte[0x4c9b80], 1
jne 0x41013e
or dword[0x4c9b80], 1
push str.BlockInput
push str.user32
call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]
push eax
call dword[sym.imp.KERNEL32.dll_GetProcAddress]
mov dword[0x4c9b7c], eax
jmp 0x410143
mov eax, dword[0x4c9b7c]
test eax, eax
je 0x41014b
push 0
call eax
mov byte[0x4c6ec4], 0
pop esi
pop ebp
pop ebx
add esp, 0x124
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f