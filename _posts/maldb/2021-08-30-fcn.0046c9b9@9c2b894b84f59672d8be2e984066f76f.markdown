---
layout: post
title:  "fcn.0046c9b9 @ 9c2b894b84f59672d8be2e984066f76f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0046c9b9
- **Origin (md5):** 9c2b894b84f59672d8be2e984066f76f
- **VirusTotal:** [virustotal.com/gui/file/9c2b894b84f59672d8be2e984066f76f][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.0046c9b9@9c2b894b84f59672d8be2e984066f76f">fcn.0046c9b9</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push 0x4c
mov eax, 0x578c49
call fcn.005538d4
mov ebx, ecx
mov dword[ebp-0x48], ebx
cmp dword[ebp+0x18], 0x64
je off.b624
mov eax, dword[ebp+0x14]
sub eax, dword[ebp+0xc]
test eax, eax
jle off.b624
mov eax, dword[ebp+0x10]
sub eax, dword[ebp+8]
test eax, eax
jle off.b624
call fcn.00410017
cmp dword[eax+0x1ac], 8
jg off.b86
lea eax, [ebp+8]
push eax
push dword[ebx+4]
call fcn.004609c2
jmp off.b624
cmp dword[ebp+0x24], 0xffffffff
je off.b105
cmp dword[ebp+0x18], 0x64
jle off.b105
xor eax, eax
jmp off.b627
mov edi, dword[ebp+0x10]
lea ecx, [ebp-0x3c]
mov esi, dword[ebp+0x14]
sub edi, dword[ebp+8]
sub esi, dword[ebp+0xc]
mov dword[ebp-0x40], edi
mov dword[ebp-0x44], esi
call fcn.004119b2
and dword[ebp-4], 0
mov eax, dword[ebx+4]
test eax, eax
je off.b145
mov eax, dword[eax+4]
push eax
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
push eax
lea ecx, [ebp-0x3c]
call fcn.004122af
test eax, eax
jne off.b175
lea ecx, [ebp-0x3c]
call fcn.00411b08
jmp off.b98
and dword[ebp-0x20], 0
mov dword[ebp-0x24], 0x585684
mov eax, dword[ebx+4]
push esi
push edi
mov byte[ebp-4], 1
push dword[eax+4]
call dword[sym.imp.GDI32.dll_CreateCompatibleBitmap]
push eax
lea ecx, [ebp-0x24]
call fcn.004122f0
test eax, eax
jne off.b234
lea ecx, [ebp-0x24]
mov dword[ebp-0x24], 0x585684
call fcn.00404d00
jmp off.b165
push dword[ebp-0x20]
push dword[ebp-0x38]
call fcn.00412959
mov dword[ebp-0x4c], eax
test eax, eax
jne off.b257
call fcn.0040f785
lea eax, [ebp-0x18]
mov dword[ebp-0x58], edi
push eax
lea eax, [ebp-0x58]
mov dword[ebp-0x54], esi
push eax
call fcn.00469c5b
mov dword[ebp-0x50], eax
test eax, eax
je off.b217
cmp dword[ebp-0x18], 0
je off.b217
push eax
push dword[ebp-0x38]
call dword[sym.imp.GDI32.dll_SelectObject]
mov eax, dword[ebx+4]
test eax, eax
je off.b309
mov eax, dword[eax+4]
push 0xcc0020
push dword[ebp+0xc]
push dword[ebp+8]
push eax
push esi
push edi
push 0
push 0
push dword[ebp-0x38]
call dword[sym.imp.GDI32.dll_BitBlt]
mov ebx, dword[ebp+0x1c]
cmp ebx, 0xffffffff
je off.b371
mov eax, ebx
shr eax, 8
movzx ecx, al
movzx eax, bl
shl eax, 8
or ecx, eax
shr ebx, 0x10
shl ecx, 8
movzx ebx, bl
or ebx, ecx
mov eax, esi
imul eax, edi
mov dword[ebp-0x28], eax
test eax, eax
jle off.b543
fld qword[0x58d470]
mov eax, dword[ebp-0x18]
mov edi, dword[ebp-0x28]
cmp dword[ebp+0x20], 0
mov ecx, dword[eax]
mov dword[ebp-0x10], ecx
jle off.b635
movzx ecx, cl
fstp st(0)
movzx eax, bl
sub ecx, eax
push ecx
call fcn.0055e1e6
pop ecx
cmp eax, dword[ebp+0x20]
jge off.b652
mov esi, dword[ebp-0x10]
mov eax, esi
shr eax, 8
movzx ecx, al
mov eax, ebx
shr eax, 8
movzx eax, al
sub ecx, eax
push ecx
call fcn.0055e1e6
pop ecx
cmp eax, dword[ebp+0x20]
jge off.b652
mov eax, esi
shr eax, 0x10
movzx ecx, al
mov eax, ebx
shr eax, 0x10
movzx eax, al
sub ecx, eax
push ecx
call fcn.0055e1e6
fld qword[0x58d470]
pop ecx
cmp eax, dword[ebp+0x20]
jge off.b658
mov eax, dword[ebp-0x18]
add eax, 4
mov dword[ebp-0x18], eax
sub edi, 1
jne off.b399
mov edi, dword[ebp-0x40]
fstp st(0)
mov esi, dword[ebp-0x44]
mov eax, dword[ebp-0x48]
push 0xcc0020
push 0
push 0
push dword[ebp-0x38]
mov eax, dword[eax+4]
push esi
push edi
push dword[ebp+0xc]
push dword[ebp+8]
push dword[eax+4]
call dword[sym.imp.GDI32.dll_BitBlt]
mov eax, dword[ebp-0x4c]
push dword[eax+4]
push dword[ebp-0x38]
call fcn.00412959
push dword[ebp-0x50]
call dword[sym.imp.GDI32.dll_DeleteObject]
lea ecx, [ebp-0x24]
mov dword[ebp-0x24], 0x585684
call fcn.00404d00
lea ecx, [ebp-0x3c]
call fcn.00411b08
xor eax, eax
inc eax
call fcn.0055389d
ret 0x20
xor eax, eax
cmp ecx, ebx
sete al
test eax, eax
jne off.b517
jmp off.b661
fld qword[0x58d470]
mov ecx, dword[ebp-0x10]
mov esi, dword[ebp+0x18]
cmp esi, 0xffffffff
jne off.b905
movzx esi, cl
fstp st(0)
add esi, esi
call fcn.00410017
push 3
xor edx, edx
pop ecx
movzx eax, byte[eax+0x26]
add eax, esi
div ecx
mov ecx, 0xff
cmp eax, ecx
jle off.b712
mov dword[ebp-0x14], ecx
jmp off.b733
call fcn.00410017
push 3
xor edx, edx
pop ecx
movzx eax, byte[eax+0x26]
add eax, esi
div ecx
mov dword[ebp-0x14], eax
mov ecx, dword[ebp-0x10]
shr ecx, 8
movzx esi, cl
add esi, esi
call fcn.00410017
push 3
xor edx, edx
pop ecx
movzx eax, byte[eax+0x25]
add eax, esi
div ecx
mov ecx, 0xff
cmp eax, ecx
jle off.b776
mov dword[ebp-0x1c], ecx
jmp off.b797
call fcn.00410017
push 3
xor edx, edx
pop ecx
movzx eax, byte[eax+0x25]
add eax, esi
div ecx
mov dword[ebp-0x1c], eax
mov eax, dword[ebp-0x10]
shr eax, 0x10
movzx esi, al
add esi, esi
call fcn.00410017
push 3
xor edx, edx
pop ecx
movzx eax, byte[eax+0x24]
add eax, esi
div ecx
cmp eax, 0xff
jle off.b840
mov eax, 0xff
jmp off.b858
call fcn.00410017
push 3
xor edx, edx
pop ecx
movzx eax, byte[eax+0x24]
add eax, esi
div ecx
movzx ecx, al
mov eax, dword[ebp-0x1c]
or ecx, 0xffffff00
movzx eax, al
shl ecx, 8
or ecx, eax
mov eax, dword[ebp-0x14]
fld qword[0x58d470]
movzx eax, al
shl ecx, 8
or ecx, eax
mov eax, dword[ebp-0x18]
mov dword[eax], ecx
jmp off.b520
cmp dword[ebp+0x24], 0xffffffff
jne off.b961
fild dword[ebp+0x18]
sub esp, 0x18
fstp qword[ebp-0x2c]
fmul qword[ebp-0x2c]
fst qword[esp+0x10]
fst qword[esp+8]
fstp qword[esp]
push ecx
call fcn.0046d3b5
mov ecx, dword[ebp-0x18]
or eax, 0xff000000
fld qword[0x58d470]
mov dword[ecx], eax
jmp off.b517
mov eax, ecx
movzx edx, cl
shr eax, 8
fstp st(0)
movzx eax, al
mov dword[ebp-0x10], eax
shr ecx, 0x10
movzx eax, cl
mov dword[ebp-0x1c], eax
mov eax, dword[ebp+0x24]
shr eax, 0x10
push 0x64
movzx eax, al
sub eax, edx
mov dword[ebp-0x14], edx
push esi
push eax
mov dword[ebp-0x28], eax
call dword[sym.imp.KERNEL32.dll_MulDiv]
add eax, dword[ebp-0x14]
mov ecx, 0xff
cmp eax, ecx
jle off.b1030
mov dword[ebp-0x28], ecx
jmp off.b1048
push 0x64
push esi
push dword[ebp-0x28]
call dword[sym.imp.KERNEL32.dll_MulDiv]
add eax, dword[ebp-0x14]
mov dword[ebp-0x28], eax
mov ecx, dword[ebp+0x24]
shr ecx, 8
push 0x64
movzx eax, cl
sub eax, dword[ebp-0x10]
push esi
push eax
mov dword[ebp-0x14], eax
call dword[sym.imp.KERNEL32.dll_MulDiv]
add eax, dword[ebp-0x10]
mov ecx, 0xff
cmp eax, ecx
jle off.b1090
mov dword[ebp-0x14], ecx
jmp off.b1108
push 0x64
push esi
push dword[ebp-0x14]
call dword[sym.imp.KERNEL32.dll_MulDiv]
add eax, dword[ebp-0x10]
mov dword[ebp-0x14], eax
mov eax, dword[ebp+0x24]
push 0x64
movzx eax, al
sub eax, dword[ebp-0x1c]
push esi
push eax
mov dword[ebp-0x10], eax
call dword[sym.imp.KERNEL32.dll_MulDiv]
add eax, dword[ebp-0x1c]
cmp eax, 0xff
jle off.b1147
mov eax, 0xff
jmp off.b1162
push 0x64
push esi
push dword[ebp-0x10]
call dword[sym.imp.KERNEL32.dll_MulDiv]
add eax, dword[ebp-0x1c]
movzx ecx, al
mov eax, dword[ebp-0x14]
or ecx, 0xffffff00
movzx eax, al
shl ecx, 8
or ecx, eax
mov eax, dword[ebp-0x28]
jmp off.b881

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/9c2b894b84f59672d8be2e984066f76f