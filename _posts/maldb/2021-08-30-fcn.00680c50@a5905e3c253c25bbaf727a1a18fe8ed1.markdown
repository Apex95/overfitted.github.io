---
layout: post
title:  "fcn.00680c50 @ a5905e3c253c25bbaf727a1a18fe8ed1"
date:   2021-08-30 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.00680c50
- **Origin (md5):** a5905e3c253c25bbaf727a1a18fe8ed1
- **VirusTotal:** [virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1][virustotal_ref]

# Code Tags
<span class="tag" id="THREAD">THREAD</span>


# Similar Functions

1. [fcn.00680030][similar_1_ref] (sim.: 0.9721214777400398)
2. [fcn.005bd550][similar_2_ref] (sim.: 0.9662459165998355)
3. [fcn.005c7c20][similar_3_ref] (sim.: 0.9655640834795651)
4. [fcn.0062fa00][similar_4_ref] (sim.: 0.9652460907418319)
5. [fcn.00579b00][similar_5_ref] (sim.: 0.9648549533185493)


# Disassembled Code

{% highlight nasm %}
push r15
push r14
push r13
push r12
push rbp
push rdi
push rsi
push rbx
sub rsp,0x98
mov rdi,qword[0x00a7d7b0]
mov rbx,rcx
mov qword[rsp+0xe8],rdx
mov qword[rsp+0xf0],r8
mov r13,r9
cmp rdi,0xffffffffffffff68
je 0x681b65
mov rbp,qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
lea r12,[rdi+0x9c]
call rbp
mov r14d,eax
xor eax,eax
lock cmpxchg dword[r12],eax
cmp r14d,eax
je 0x680d80
lea rsi,[rdi+0xa0]
mov r15d,dword[rdi+0xa0]
jmp 0x680cc4
mov r15d,eax
mov edx,r15d
mov r8d,r15d
mov rcx,rsi
or edx,0x80000000
call fcn.008eebc0
cmp r15d,eax
jne 0x680cc1
test r15d,r15d
js 0x6813a0
xchg dword[r12],r14d
mov rax,qword[rdi+0x88]
sub rax,qword[rdi+0x80]
mov dword[rdi+0x98],0
sar rax,3
mov qword[rsp+0x28],rax
xor eax,eax
xchg dword[r12],eax
mov eax,0x80000000
lock xadd dword[rsi],eax
test eax,0x40000000
jne 0x680da5
cmp eax,0x80000000
je 0x680da5
mov r12d,dword[rdi+0xa0]
jmp 0x680d38
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rsi
or edx,0x40000000
call fcn.008eebc0
cmp r12d,eax
jne 0x680d35
and r12d,0x40000000
jne 0x680da5
add rdi,0xa8
xor eax,eax
lock cmpxchg qword[rdi],rax
test rax,rax
mov rsi,rax
je 0x6818cb
mov rcx,rsi
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x680da5
mov rax,qword[rdi+0x88]
sub rax,qword[rdi+0x80]
mov edx,dword[rdi+0x98]
sar rax,3
test edx,edx
mov qword[rsp+0x28],rax
je 0x681bdb
mov rax,qword[0x00a7d820]
cmp byte[rax+0x1a47],0
je 0x681070
movzx r8d,byte[rax+0xc80]
mov edx,0x19
mov ecx,0x6d
test r8b,r8b
jne 0x68108b
cmp byte[rax+rcx+0x1938],0
jne 0x681100
mov r15d,dword[rax+rdx*4+0x1728]
lea rdi,[rbx+0x14]
call rbp
mov r12d,eax
xor eax,eax
lock cmpxchg dword[rdi],eax
cmp r12d,eax
je 0x680eb0
lea rsi,[rbx+0x18]
mov r14d,dword[rbx+0x18]
jmp 0x680e13
mov r14d,eax
mov edx,r14d
mov r8d,r14d
mov rcx,rsi
or edx,0x80000000
call fcn.008eebc0
cmp r14d,eax
jne 0x680e10
test r14d,r14d
js 0x681480
xchg dword[rdi],r12d
mov r12d,dword[rbx+0x58]
mov dword[rbx+0x10],0
xor eax,eax
xchg dword[rdi],eax
mov eax,0x80000000
lock xadd dword[rsi],eax
test eax,0x40000000
jne 0x680ebf
cmp eax,0x80000000
je 0x680ebf
mov r14d,dword[rbx+0x18]
jmp 0x680e67
mov r14d,eax
mov edx,r14d
mov r8d,r14d
mov rcx,rsi
or edx,0x40000000
call fcn.008eebc0
cmp r14d,eax
jne 0x680e64
and r14d,0x40000000
jne 0x680ebf
lea r14,[rbx+0x20]
xor eax,eax
lock cmpxchg qword[r14],rax
test rax,rax
mov rsi,rax
je 0x681890
mov rcx,rsi
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x680ebf
mov eax,dword[rbx+0x10]
mov r12d,dword[rbx+0x58]
test eax,eax
je 0x681be7
cmp r12d,0xffffffff
je 0x681034
test r15d,r15d
sete dl
cmp qword[rsp+0x28],0
sete al
or dl,al
mov byte[rsp+0x30],dl
jne 0x681034
lea r12,[rbx+0x84]
call rbp
mov esi,eax
mov dword[rsp+0x38],eax
xor eax,eax
lock cmpxchg dword[r12],eax
cmp esi,eax
je 0x681110
lea rsi,[rbx+0x88]
mov r14d,dword[rbx+0x88]
jmp 0x680f16
mov r14d,eax
mov edx,r14d
mov r8d,r14d
mov rcx,rsi
or edx,0x80000000
call fcn.008eebc0
cmp r14d,eax
jne 0x680f13
test r14d,r14d
js 0x6815a4
mov eax,dword[rsp+0x38]
xchg dword[r12],eax
mov r8,qword[rbx+0x98]
mov dword[rbx+0x80],1
test r8,r8
jle 0x681bf0
xor ecx,ecx
shl r15d,0xa
xor edx,edx
movsxd rax,r15d
div qword[rsp+0x28]
cmp qword[r13],r8
cmovbe r8,qword[r13]
cmp rax,r8
cmova rax,r8
mov qword[r13],rax
sub qword[rbx+0x98],rax
test ecx,ecx
mov dword[rbx+0x80],ecx
jne 0x681000
xchg dword[r12],ecx
mov edx,0x80000000
lea rsi,[rbx+0x88]
lock xadd dword[rsi],edx
mov eax,edx
shr eax,0x1e
xor eax,1
cmp edx,0x80000000
setne dl
and dl,al
mov byte[rsp+0x30],dl
je 0x681000
mov r12d,dword[rbx+0x88]
jmp 0x680fc8
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rsi
or edx,0x40000000
call fcn.008eebc0
cmp r12d,eax
jne 0x680fc5
and r12d,0x40000000
je 0x68184f
cmp byte[rsp+0x30],0
je 0x68113d
nop dword[rax]
mov rax,qword[rsp+0xe8]
mov r8d,dword[r13]
mov rdx,qword[rsp+0xf0]
mov rcx,qword[rsp+0xe8]
mov rax,qword[rax]
call qword[rax+0x18]
xor ecx,ecx
mov dword[rsp+0x28],eax
call qword[sym.imp.KERNEL32.dll_Sleep]
mov eax,dword[rsp+0x28]
jmp 0x681056
mov rax,qword[rsp+0xe8]
mov r8d,dword[r13]
mov rdx,qword[rsp+0xf0]
mov rcx,qword[rsp+0xe8]
mov rax,qword[rax]
call qword[rax+0x18]
add rsp,0x98
pop rbx
pop rsi
pop rdi
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
movzx r8d,byte[rax+0x18f0]
mov edx,0x19
mov ecx,0x6d
test r8b,r8b
je 0x680dd4
lea rsi,[rsp+0x50]
mov rcx,rsi
call qword[sym.imp.msvcrt.dll__time64]
mov rcx,rsi
call qword[sym.imp.msvcrt.dll__localtime64]
mov r9d,dword[rax+8]
mov rax,qword[0x00a7d820]
cmp byte[rax+0x19a0],0
je 0x6812e0
cmp byte[rax+0x19a1],0
mov r8d,dword[rax+0xb08]
je 0x6812f4
mov edx,dword[rax+0xb0c]
cmp edx,r8d
jle 0x681303
cmp r9d,edx
jge 0x681330
cmp r9d,r8d
jl 0x681330
mov edx,0x17
mov ecx,0x6b
jmp 0x680dd4
mov r15d,dword[rax+rdx*4+0xab8]
jmp 0x680dea
mov ecx,dword[rbx+0x80]
mov r8,qword[rbx+0x98]
lea eax,[rcx+1]
test r8,r8
mov dword[rbx+0x80],eax
jg 0x680f5c
test ecx,ecx
mov dword[rbx+0x80],ecx
je 0x681ebc
call rbp
mov r12d,eax
xor eax,eax
lock cmpxchg dword[rdi],eax
cmp r12d,eax
je 0x681340
lea rsi,[rbx+0x18]
mov r14d,dword[rbx+0x18]
mov r13,rsi
jmp 0x681163
mov r14d,eax
mov edx,r14d
mov r8d,r14d
mov rcx,rsi
or edx,0x80000000
call fcn.008eebc0
cmp r14d,eax
jne 0x681160
test r14d,r14d
js 0x68169f
xchg dword[rdi],r12d
movsxd rax,dword[rbx+0x58]
mov dword[rbx+0x10],1
cmp eax,0xffffffff
je 0x681570
lea rax,[rax+rax*2]
mov dword[rbx+0x10],0
lea rsi,[rbx+rax*8+0x28]
xor eax,eax
xchg dword[rdi],eax
mov eax,0x80000000
lock xadd dword[r13],eax
test eax,0x40000000
jne 0x681211
cmp eax,0x80000000
je 0x681211
mov edi,dword[rbx+0x18]
jmp 0x6811d2
mov edi,eax
mov edx,edi
mov r8d,edi
mov rcx,r13
or edx,0x40000000
call fcn.008eebc0
cmp edi,eax
jne 0x6811d0
and edi,0x40000000
jne 0x681211
add rbx,0x20
xor eax,eax
lock cmpxchg qword[rbx],rax
test rax,rax
mov rdi,rax
mov rcx,rax
je 0x681945
call qword[sym.imp.KERNEL32.dll_SetEvent]
test rsi,rsi
je 0x6812d1
call rbp
lea rbp,[rsi+4]
mov r12d,eax
xor eax,eax
lock cmpxchg dword[rbp],eax
cmp r12d,eax
je 0x681370
lea rdi,[rsi+8]
mov ebx,dword[rsi+8]
jmp 0x681242
mov ebx,eax
mov edx,ebx
mov r8d,ebx
mov rcx,rdi
or edx,0x80000000
call fcn.008eebc0
cmp ebx,eax
jne 0x681240
test ebx,ebx
js 0x681785
xchg dword[rbp],r12d
mov dword[rsi],0
xor eax,eax
xchg dword[rbp],eax
mov eax,0x80000000
lock xadd dword[rdi],eax
test eax,0x40000000
jne 0x6812d1
cmp eax,0x80000000
je 0x6812d1
mov ebx,dword[rsi+8]
jmp 0x681292
mov ebx,eax
mov edx,ebx
mov r8d,ebx
mov rcx,rdi
or edx,0x40000000
call fcn.008eebc0
cmp ebx,eax
jne 0x681290
and ebx,0x40000000
jne 0x6812d1
add rsi,0x10
xor eax,eax
lock cmpxchg qword[rsi],rax
test rax,rax
mov rbx,rax
mov rcx,rax
je 0x681b27
call qword[sym.imp.KERNEL32.dll_SetEvent]
xor eax,eax
jmp 0x681056
cmp byte[rax+0x19a1],0
mov r8d,dword[rax+0x1778]
jne 0x6810ce
mov edx,dword[rax+0x177c]
cmp edx,r8d
jg 0x6810dd
jge 0x681330
cmp r9d,edx
jl 0x6810ef
cmp r9d,r8d
mov edx,0x19
mov ecx,0x6d
jl 0x680dd4
jmp 0x6810ef
mov edx,0x19
mov ecx,0x6d
jmp 0x680dd4
mov edx,dword[rbx+0x10]
lea eax,[rdx+1]
mov dword[rbx+0x10],eax
movsxd rax,dword[rbx+0x58]
cmp eax,0xffffffff
je 0x681383
lea rax,[rax+rax*2]
test edx,edx
mov dword[rbx+0x10],edx
lea rsi,[rbx+rax*8+0x28]
jne 0x68121a
lea r13,[rbx+0x18]
jmp 0x6811ac
mov eax,dword[rsi]
test eax,eax
jne 0x6812d1
lea rdi,[rsi+8]
jmp 0x68126b
test edx,edx
mov dword[rbx+0x10],edx
jne 0x6812d1
lea rsi,[rbx+0x18]
jmp 0x681577
mov edx,dword[rdi+0xa0]
jmp 0x6813b2
mov edx,eax
lea eax,[rdx+1]
mov r15d,edx
or r15d,0x80000000
test edx,edx
cmovs r15d,eax
mov eax,edx
lock cmpxchg dword[rsi],r15d
cmp eax,edx
jne 0x6813b0
mov eax,r15d
shr eax,0x1f
test al,al
je 0x680ce6
shr edx,0x1f
test dl,dl
je 0x680ce6
lea r10,[rdi+0xa8]
xor eax,eax
lock cmpxchg qword[r10],rax
test rax,rax
mov rcx,rax
je 0x6819e4
mov rax,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov qword[rsp+0x28],rdi
mov edi,r15d
mov qword[rsp+0xe0],rbx
mov r15,rcx
mov rbx,rax
and edi,0x7fffffff
xor r8d,r8d
mov edx,0xffffffff
mov rcx,r15
call rbx
mov edx,edi
or edx,0x40000000
test edx,edx
js 0x681463
nop
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rsi],ecx
cmp eax,edx
je 0x68155e
mov edx,eax
test edx,edx
jns 0x681440
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rsi],ecx
cmp eax,edx
jne 0x68145d
mov edi,eax
jmp 0x681420
mov edx,dword[rbx+0x18]
jmp 0x681487
mov edx,eax
lea eax,[rdx+1]
mov r14d,edx
or r14d,0x80000000
test edx,edx
cmovs r14d,eax
mov eax,edx
lock cmpxchg dword[rsi],r14d
cmp eax,edx
jne 0x681485
shr edx,0x1f
test dl,dl
je 0x680e35
mov eax,r14d
shr eax,0x1f
test al,al
je 0x680e35
lea r10,[rbx+0x20]
xor eax,eax
lock cmpxchg qword[r10],rax
test rax,rax
mov rcx,rax
je 0x68198b
mov rax,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov qword[rsp+0x30],rdi
mov rdi,rsi
mov qword[rsp+0xe0],rbx
mov esi,r14d
mov r14,rcx
mov rbx,rax
and esi,0x7fffffff
xor r8d,r8d
mov edx,0xffffffff
mov rcx,r14
call rbx
mov edx,esi
or edx,0x40000000
test edx,edx
js 0x681533
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rdi],ecx
cmp eax,edx
je 0x681549
mov edx,eax
test edx,edx
jns 0x681514
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rdi],ecx
cmp eax,edx
jne 0x68152d
mov esi,eax
jmp 0x6814f5
mov rsi,rdi
mov rbx,qword[rsp+0xe0]
mov rdi,qword[rsp+0x30]
jmp 0x680e35
mov rdi,qword[rsp+0x28]
mov rbx,qword[rsp+0xe0]
jmp 0x680ce6
mov dword[rbx+0x10],0
xor eax,eax
xchg dword[rdi],eax
mov eax,0x80000000
mov r13,rsi
lock xadd dword[rsi],eax
test eax,0x40000000
jne 0x6812d1
cmp eax,0x80000000
je 0x6812d1
xor esi,esi
jmp 0x6811c9
mov edx,dword[rbx+0x88]
jmp 0x6815b2
mov edx,eax
lea eax,[rdx+1]
mov r14d,edx
or r14d,0x80000000
test edx,edx
cmovs r14d,eax
mov eax,edx
lock cmpxchg dword[rsi],r14d
cmp eax,edx
jne 0x6815b0
mov eax,r14d
shr eax,0x1f
test al,al
je 0x680f38
shr edx,0x1f
test dl,dl
je 0x680f38
lea r10,[rbx+0x90]
xor eax,eax
lock cmpxchg qword[r10],rax
test rax,rax
mov rcx,rax
je 0x681ace
mov rax,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov qword[rsp+0x40],rdi
mov edi,r14d
mov qword[rsp+0xe0],rbx
mov r14,rbp
mov rbx,rcx
mov rbp,rsi
mov rsi,rax
nop word cs:[rax+rax]
and edi,0x7fffffff
xor r8d,r8d
mov edx,0xffffffff
mov rcx,rbx
call rsi
mov edx,edi
or edx,0x40000000
test edx,edx
js 0x681670
nop
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rbp],ecx
cmp eax,edx
je 0x681687
mov edx,eax
test edx,edx
jns 0x681650
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rbp],ecx
cmp eax,edx
jne 0x68166a
mov edi,eax
jmp 0x681630
mov rsi,rbp
mov rdi,qword[rsp+0x40]
mov rbx,qword[rsp+0xe0]
mov rbp,r14
jmp 0x680f38
mov ecx,dword[rbx+0x18]
jmp 0x6816a6
mov ecx,eax
lea eax,[rcx+1]
mov r14d,ecx
or r14d,0x80000000
test ecx,ecx
cmovs r14d,eax
mov eax,ecx
lock cmpxchg dword[rsi],r14d
cmp eax,ecx
jne 0x6816a4
shr ecx,0x1f
test cl,cl
je 0x681185
mov eax,r14d
shr eax,0x1f
test al,al
je 0x681185
lea r11,[rbx+0x20]
xor eax,eax
lock cmpxchg qword[r11],rax
test rax,rax
mov r15,rax
mov rcx,rax
je 0x681a45
mov rax,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov qword[rsp+0x28],rdi
mov r15d,0xffffffff
mov edi,r14d
mov qword[rsp+0xe0],rbx
mov r14,rbp
mov rbx,rcx
mov rbp,rsi
mov rsi,rax
and edi,0x7fffffff
xor r8d,r8d
mov edx,r15d
mov rcx,rbx
call rsi
mov r9d,edi
or r9d,0x40000000
jmp 0x681766
lea ecx,[r9-1]
mov eax,r9d
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rbp],ecx
cmp eax,r9d
mov edi,eax
je 0x681878
mov r9d,edi
test r9d,r9d
jns 0x681740
mov ecx,r9d
mov eax,r9d
and ecx,0xbfffffff
lock cmpxchg dword[rbp],ecx
cmp eax,r9d
mov edi,eax
jne 0x681763
jmp 0x681720
mov ecx,dword[rsi+8]
jmp 0x681792
mov ecx,eax
lea eax,[rcx+1]
mov r14d,ecx
or r14d,0x80000000
test ecx,ecx
cmovs r14d,eax
mov eax,ecx
lock cmpxchg dword[rdi],r14d
cmp eax,ecx
jne 0x681790
shr ecx,0x1f
test cl,cl
je 0x681261
mov eax,r14d
shr eax,0x1f
test al,al
je 0x681261
lea r15,[rsi+0x10]
xor eax,eax
lock cmpxchg qword[r15],rax
test rax,rax
mov r13,rax
mov rbx,rax
je 0x681a8d
mov rax,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov r13d,0xffffffff
mov r15,rax
and r14d,0x7fffffff
mov edx,r13d
xor r8d,r8d
mov rcx,rbx
call r15
mov edx,r14d
or edx,0x40000000
jmp 0x681834
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov r14d,eax
je 0x681261
mov edx,r14d
test edx,edx
jns 0x681811
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov r14d,eax
jne 0x681831
jmp 0x6817f3
lea r12,[rbx+0x90]
xor eax,eax
lock cmpxchg qword[r12],rax
test rax,rax
mov rsi,rax
mov rcx,rax
je 0x681906
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x680fee
mov rsi,rbp
mov rdi,qword[rsp+0x28]
mov rbx,qword[rsp+0xe0]
mov rbp,r14
jmp 0x681185
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x681d4c
mov rax,rsi
lock cmpxchg qword[r14],rcx
test rax,rax
mov rsi,rax
je 0x681983
call qword[sym.imp.KERNEL32.dll_CloseHandle]
jmp 0x680ea0
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x681e04
mov rax,rsi
lock cmpxchg qword[rdi],rcx
test rax,rax
mov rsi,rax
je 0x681a3d
call qword[sym.imp.KERNEL32.dll_CloseHandle]
jmp 0x680d74
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x681c7b
mov rax,rsi
lock cmpxchg qword[r12],rcx
test rax,rax
mov rsi,rax
je 0x68186d
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rsi
jmp 0x68186d
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x681da3
mov rax,rdi
lock cmpxchg qword[rbx],rcx
test rax,rax
mov rdi,rax
je 0x68120b
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rdi
jmp 0x68120b
mov rsi,rcx
jmp 0x680ea0
xor ecx,ecx
mov qword[rsp+0x30],r10
xor r9d,r9d
xor r8d,r8d
xor edx,edx
mov qword[rsp+0x38],rax
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
mov r10,qword[rsp+0x30]
mov r11,qword[rsp+0x38]
je 0x681c24
mov rax,r11
lock cmpxchg qword[r10],rcx
test rax,rax
je 0x6814d5
mov qword[rsp+0x30],rax
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r11,qword[rsp+0x30]
mov rcx,r11
jmp 0x6814d5
xor ecx,ecx
mov qword[rsp+0x28],r10
xor r9d,r9d
xor r8d,r8d
xor edx,edx
mov qword[rsp+0x30],rax
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
mov r10,qword[rsp+0x28]
mov r11,qword[rsp+0x30]
je 0x681e5b
mov rax,r11
lock cmpxchg qword[r10],rcx
test rax,rax
je 0x681403
mov qword[rsp+0x28],rax
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r11,qword[rsp+0x28]
mov rcx,r11
jmp 0x681403
mov rsi,rcx
jmp 0x680d74
xor ecx,ecx
mov qword[rsp+0x28],r11
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
mov r11,qword[rsp+0x28]
je 0x681cd2
mov rax,r15
lock cmpxchg qword[r11],rcx
test rax,rax
mov r15,rax
je 0x6816f7
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,r15
jmp 0x6816f7
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rbx,rax
je 0x681ec8
mov rax,r13
lock cmpxchg qword[r15],rbx
test rax,rax
mov r13,rax
je 0x6817e3
mov rcx,rbx
mov rbx,r13
call qword[sym.imp.KERNEL32.dll_CloseHandle]
jmp 0x6817e3
xor ecx,ecx
mov qword[rsp+0x40],r10
xor r9d,r9d
xor r8d,r8d
xor edx,edx
mov qword[rsp+0x48],rax
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
mov r10,qword[rsp+0x40]
mov r11,qword[rsp+0x48]
je 0x681f1f
mov rax,r11
lock cmpxchg qword[r10],rcx
test rax,rax
je 0x681603
mov qword[rsp+0x40],rax
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r11,qword[rsp+0x40]
mov rcx,r11
jmp 0x681603
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x681f76
mov rax,rbx
lock cmpxchg qword[rsi],rcx
test rax,rax
mov rbx,rax
je 0x6812cb
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rbx
jmp 0x6812cb
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75f8]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],1
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b714e0]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.009472d0
mov rsi,rax
lea rax,[0x00b72450]
mov rcx,rbx
mov qword[rsp+0x50],rax
call fcn.00962490
mov rcx,rsi
call fcn.008da260
lea rsi,[rdi+0xa0]
jmp 0x680d0b
lea rsi,[rbx+0x18]
jmp 0x680e43
mov dword[rbx+0x80],0
xor eax,eax
xchg dword[r12],eax
mov eax,0x80000000
lock xadd dword[rsi],eax
test eax,0x40000000
jne 0x68113d
cmp eax,0x80000000
jne 0x680fbc
jmp 0x68113d
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
jmp 0x681bbc
lea rax,[0x00b72450]
mov rcx,rbx
mov qword[rsp+0x50],rax
call fcn.00962490
call fcn.00a55e20
jmp 0x681bbc
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
jmp 0x681d2e
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
jmp 0x681d2e
lea rsi,[rbx+0x88]
jmp 0x681bfa
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00ab75da]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
jmp 0x681bbc
{% endhighlight %}


[similar_1_ref]: /report/fcn.00680030@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_2_ref]: /report/fcn.005bd550@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_3_ref]: /report/fcn.005c7c20@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_4_ref]: /report/fcn.0062fa00@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_5_ref]: /report/fcn.00579b00@a5905e3c253c25bbaf727a1a18fe8ed1
[virustotal_ref]: https://www.virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1