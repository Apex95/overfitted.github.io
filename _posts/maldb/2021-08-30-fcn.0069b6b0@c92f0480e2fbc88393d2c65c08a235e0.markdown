---
layout: post
title:  "fcn.0069b6b0 @ c92f0480e2fbc88393d2c65c08a235e0"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0069b6b0
- **Origin (md5):** c92f0480e2fbc88393d2c65c08a235e0
- **VirusTotal:** [virustotal.com/gui/file/c92f0480e2fbc88393d2c65c08a235e0][virustotal_ref]

# Code Tags
<span class="tag" id="SOCKET">SOCKET</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.0069b6b0@c92f0480e2fbc88393d2c65c08a235e0">fcn.0069b6b0</a><br>@c92f0480e2fbc88393d2c65c08a235e0</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
push edi
push esi
push ebx
push eax
mov eax, 0x6068
call fcn.006acfd0
sub esp, eax
mov eax, dword[esp+eax]
mov dword[esp+0x4c], 0
mov dword[esp+0x50], 0
movzx edi, byte[eax+0xc4]
mov ebx, eax
mov eax, edi
test al, al
jne off.b608
mov eax, dword[ebx+0xdc]
mov esi, edx
mov dword[esp+0x54], 0
mov dword[esp+0x2058], 0
mov dword[esp+0x405c], 0
mov dword[esp+0x3c], 0xffffffff
test ah, 0x20
jne off.b720
test al, 4
jne off.b640
movzx edi, byte[ebx+0xc4]
mov eax, edi
test al, al
je off.b752
mov dword[esp+4], str.Could_not_obtain_daemon_fdsets
mov dword[esp], ebx
mov edi, 1
call fcn.0069df20
mov dword[esp+0x2c], 1
mov eax, dword[ebx+0xbc]
cmp eax, 0xffffffff
je off.b215
lea edx, [esp+0x3c]
lea ebp, [esp+0x54]
mov dword[esp+0xc], 0x800
mov dword[esp], eax
mov dword[esp+8], edx
mov dword[esp+4], ebp
call fcn.0069fa80
test eax, eax
je off.b816
xor esi, 1
mov edx, dword[ebx+0xb4]
mov ecx, esi
and ecx, 1
or ecx, edi
cmp edx, 0xffffffff
je off.b306
cmp dword[ebx+0xbc], 0xffffffff
je off.b306
mov eax, dword[ebx+0xd0]
cmp dword[ebx+0xcc], eax
je off.b268
cmp byte[ebx+0xc6], 0
je off.b306
mov esi, dword[esp+0x54]
test esi, esi
je off.b306
xor eax, eax
cmp dword[esp+0x58], edx
jne off.b299
jmp off.b1107
cmp dword[esp+eax*4+0x58], edx
je off.b1107
add eax, 1
cmp eax, esi
jne off.b289
test cl, cl
je off.b992
lea esi, [esp+0x4c]
mov dword[esp+0x50], 0
mov dword[esp+0x4c], 0
mov ecx, dword[esp+0x54]
test ecx, ecx
jne off.b484
mov edx, dword[esp+0x2058]
test edx, edx
jne off.b484
mov eax, dword[esp+0x405c]
test eax, eax
jne off.b484
test esi, esi
je off.b412
imul ecx, dword[esi], 0x3e8
mov esi, dword[esi+4]
mov edx, 0x10624dd3
mov eax, esi
sar esi, 0x1f
imul edx
sar edx, 6
sub edx, esi
add edx, ecx
mov dword[esp], edx
call dword[sym.imp.KERNEL32.dll_Sleep]
sub esp, 4
movzx eax, byte[ebx+0xc4]
test al, al
jne off.b608
lea ecx, [esp+0x2058]
lea ebp, [esp+0x54]
lea edx, [esp+0x405c]
mov dword[esp], edx
mov eax, ebx
mov edx, ebp
call fcn.006992a0
cmp eax, 1
jne off.b608
mov eax, dword[esp+0x2c]
add esp, 0x606c
pop ebx
pop esi
xor eax, 1
pop edi
pop ebp
ret
lea ecx, [esp+0x2058]
lea edx, [esp+0x405c]
lea ebp, [esp+0x54]
mov dword[esp+0x10], esi
mov dword[esp], 0
mov dword[esp+8], ecx
mov dword[esp+0x24], ecx
mov dword[esp+0xc], edx
mov dword[esp+0x28], edx
mov dword[esp+4], ebp
call dword[sym.imp.WS2_32.dll_select]
movzx esi, byte[ebx+0xc4]
sub esp, 0x14
mov ecx, esi
test cl, cl
jne off.b608
test eax, eax
mov ecx, dword[esp+0x24]
mov edx, dword[esp+0x28]
jns off.b445
call dword[sym.imp.WS2_32.dll_WSAGetLastError]
cmp eax, 0x2714
je off.b466
mov dword[esp], eax
call fcn.0069ee40
mov dword[esp+4], str.select_failed:__s_n_
mov dword[esp+8], eax
mov dword[esp], ebx
call fcn.0069df20
xor eax, eax
add esp, 0x606c
pop ebx
pop esi
pop edi
pop ebp
ret
test byte[ebx+0xdc], 4
je off.b1200
lea esi, [esi]
mov eax, dword[ebx+0xb4]
cmp eax, 0xffffffff
je off.b704
movzx edx, byte[ebx+0xc5]
test dl, dl
jne off.b704
lea edx, [esp+0x3c]
lea ebp, [esp+0x54]
mov dword[esp+0xc], 0x800
mov dword[esp], eax
mov dword[esp+8], edx
mov dword[esp+4], ebp
call fcn.0069fa80
test eax, eax
je off.b1216
nop
mov dword[esp+0x2c], 0
jmp off.b164
mov eax, ebx
call fcn.00697ca0
cmp eax, 1
je off.b624
mov eax, dword[ebx+0xdc]
jmp off.b110
lea eax, [esp+0x3c]
lea edx, [esp+0x405c]
lea ebp, [esp+0x54]
lea ecx, [esp+0x2058]
mov dword[esp+8], 0x800
mov dword[esp+4], eax
mov dword[esp], edx
mov eax, ebx
mov edx, ebp
call fcn.00697f60
test eax, eax
je off.b135
jmp off.b704
mov edx, dword[ebx+0xb4]
cmp edx, 0xffffffff
je off.b1248
movzx eax, byte[ebx+0xc5]
test al, al
jne off.b1184
mov ecx, dword[esp+0x54]
test ecx, ecx
je off.b884
xor eax, eax
cmp dword[esp+0x58], edx
jne off.b877
jmp off.b1264
cmp dword[ebp+eax*4+4], edx
je off.b1264
add eax, 1
cmp ecx, eax
jne off.b867
lea eax, [esp+0x3c]
mov dword[esp+0xc], 0x800
mov dword[esp+4], ebp
mov dword[esp+8], eax
mov eax, dword[ebx+0xbc]
mov dword[esp], eax
call fcn.0069fa80
test eax, eax
jne off.b215
mov dword[esp+4], str.Could_not_add_control_inter_thread_communication_channel_FD_to_fdset
mov dword[esp], ebx
call fcn.0069df20
mov edx, dword[ebx+0xb4]
cmp edx, 0xffffffff
je off.b1369
cmp dword[ebx+0xbc], 0xffffffff
mov ecx, 1
mov dword[esp+0x2c], 1
jne off.b245
jmp off.b314
xor esi, esi
test byte[ebx+0xdc], 4
jne off.b334
lea eax, [esp+0x40]
mov dword[esp], ebx
mov dword[esp+4], eax
call sym.xmrig.exe_MHD_get_timeout
cmp eax, 1
jne off.b334
mov esi, dword[esp+0x44]
mov edi, dword[esp+0x40]
mov dword[esp+8], 0x3e8
mov dword[esp+0xc], 0
mov dword[esp], edi
mov dword[esp+4], esi
call fcn.006ad3f0
imul eax, eax, 0x3e8
cmp esi, 0x1f3
mov dword[esp+0x50], eax
jbe off.b1328
mov dword[esp+0x4c], 0x7fffffff
lea esi, [esp+0x4c]
jmp off.b334
lea edi, [esi-1]
cmp edi, eax
jbe off.b1167
sub esi, eax
lea edx, [eax*4]
lea ebp, [esp+0x54]
lea eax, [esi*4-4]
mov byte[esp+0x24], cl
mov dword[esp+8], eax
lea eax, [ebp+edx+8]
mov dword[esp+4], eax
lea eax, [ebp+edx+4]
mov dword[esp], eax
call sub.msvcrt.dll_memmove
movzx ecx, byte[esp+0x24]
mov dword[esp+0x54], edi
jmp off.b306
xor esi, 1
mov ecx, esi
and ecx, 1
or ecx, edi
jmp off.b236
xor esi, esi
jmp off.b118
mov dword[esp+4], str.Could_not_add_listen_socket_to_fdset
mov dword[esp], ebx
mov dword[esp+0x24], eax
call fcn.0069df20
mov eax, dword[esp+0x24]
jmp off.b610
xor esi, 1
mov ecx, esi
and ecx, 1
or ecx, edi
jmp off.b306
lea edx, [ecx-1]
cmp eax, edx
mov dword[esp+0x24], edx
jae off.b1315
sub ecx, eax
lea edx, [eax*4]
lea eax, [ecx*4-4]
mov dword[esp+8], eax
lea eax, [ebp+edx+8]
mov dword[esp+4], eax
lea eax, [ebp+edx+4]
mov dword[esp], eax
call sub.msvcrt.dll_memmove
mov eax, dword[esp+0x24]
mov dword[esp+0x54], eax
jmp off.b884
mov dword[esp+4], esi
mov dword[esp+8], 0x3e8
lea esi, [esp+0x4c]
mov dword[esp+0xc], 0
mov dword[esp], edi
call fcn.006ad2e0
mov dword[esp+0x4c], eax
jmp off.b334
mov dword[esp+0x2c], 1
jmp off.b314

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/c92f0480e2fbc88393d2c65c08a235e0