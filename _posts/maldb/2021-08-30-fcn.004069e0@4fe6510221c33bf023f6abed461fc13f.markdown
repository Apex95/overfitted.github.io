---
layout: post
title:  "fcn.004069e0 @ 4fe6510221c33bf023f6abed461fc13f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.004069e0
- **Origin (md5):** 4fe6510221c33bf023f6abed461fc13f
- **VirusTotal:** [virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Behaviour Tags
<span class="bhv-tag" id="SCREENSHOTS_FOREGROUND_WINDOW">SCREENSHOTS_FOREGROUND_WINDOW / 0.2150830122119891</span><span class="bhv-tag" id="CREATES_SOCKET_LISTENER">CREATES_SOCKET_LISTENER / 0.119638662011197</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [-55.691383361816406, -82.38129425048828, '<b><a href="/report/fcn.004069e0@4fe6510221c33bf023f6abed461fc13f">fcn.004069e0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>sub esp, 0xc<br>push ebx<br>push ebp<br>push esi<br>mov ebx, ecx<br>mov ecx, dword[esp+0x1c]<br>push edi<br>mov esi, eax<br>mov edi, edx<br>mov dword[esp+0x14], 0x7fffffff<br>cmp ecx, dword[0x4c65ec]<br>je 0x406e03<br>mov eax, dword[edi+0x10]<br>cmp eax, 0xffc3d44f<br>je 0x406a64<br>cmp eax, 0xffc3d44e<br>je 0x406a64<br>cmp eax, 0xffc3d44d<br>je 0x406a64<br>mov ebp, dword[0x4c6eec]<br>movzx eax, bl<br>lea eax, [eax+eax*8]<br>shl eax, 5<br>mov eax, dword[eax+ebp]<br>xor ebp, ebp<br>xor dl, dl<br>cmp eax, ebp<br>je 0x406a68<br>cmp dword[eax], 7<br>je 0x406a68<br>mov edx, dword[esp+0x34]<br>mov eax, dword[esp+0x2c]<br>push ebp<br>push 0x7fffffff<br>push edx<br>push eax<br>push esi<br>push ebx<br>mov ebx, dword[esp+0x48]<br>mov eax, edi<br>call fcn.004068b0<br>add esp, 0x18<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0xc<br>ret <br>mov dl, 1<br>xor ebp, ebp<br>cmp byte[0x4c6efe], 0<br>je 0x406a75<br>test dl, dl<br>je 0x406a8b<br>cmp dword[0x4c8600], 1<br>jne 0x406ade<br>cmp byte[0x4c862e], 0<br>je 0x406a8b<br>test dl, dl<br>jne 0x406ade<br>lea ecx, [esp+0x18]<br>push ecx<br>mov ecx, dword[esp+0x34]<br>lea eax, [esp+0x18]<br>push eax<br>mov eax, dword[esp+0x34]<br>push ecx<br>push eax<br>push esi<br>push ebx<br>push edi<br>call fcn.00406ed0<br>add esp, 0x1c<br>test al, al<br>jne 0x406ade<br>mov ecx, dword[esp+0x18]<br>mov edx, dword[esp+0x14]<br>mov eax, dword[esp+0x34]<br>push ecx<br>mov ecx, dword[esp+0x30]<br>push edx<br>push eax<br>push ecx<br>mov ecx, dword[esp+0x30]<br>push esi<br>push ebx<br>mov ebx, dword[esp+0x48]<br>mov eax, edi<br>call fcn.004068b0<br>add esp, 0x18<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0xc<br>ret <br>mov edx, dword[esp+0x2c]<br>push ebp<br>push edx<br>push esi<br>push ebx<br>call fcn.004079c0<br>add esp, 0x10<br>cmp bl, 0x4c<br>jne 0x406c00<br>cmp byte[esp+0x2c], 0<br>jne 0x406d39<br>mov al, byte[0x4c64b5]<br>cmp al, 0x40<br>je 0x406b17<br>cmp al, 0x80<br>je 0x406b17<br>cmp al, 0xc0<br>jne 0x406d39<br>cmp byte[0x4c92ca], 0<br>je 0x406d39<br>push 0x100<br>push ebp<br>push 0x4c64d8<br>mov dword[0x4c53c8], ebp<br>mov byte[0x4c64b7], 0<br>mov byte[0x4c64b6], 0<br>mov byte[0x4c64b5], 0<br>call fcn.00495c20<br>add esp, 0xc<br>push ebp<br>push str.32771<br>mov byte[0x4c53ce], 0<br>mov byte[0x4c53cd], 0<br>mov byte[0x4c53cc], 0<br>mov byte[0x4c53c7], 0<br>call dword[sym.imp.USER32.dll_FindWindowW]<br>test eax, eax<br>setne al<br>mov byte[0x4c53c6], al<br>xor eax, eax<br>xor ecx, ecx<br>mov dword[0x4c53a4], eax<br>mov dword[0x4c53a8], eax<br>mov dword[0x4c53ac], eax<br>mov dword[0x4c53b0], eax<br>mov dword[0x4c53b4], eax<br>mov word[0x4c53b8], ax<br>mov word[0x4c5208], cx<br>mov dword[0x4c5204], ebp<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>xor edx, edx<br>mov dword[0x4c5200], eax<br>mov byte[0x4c53c3], 0<br>mov byte[0x4c53c2], 0<br>mov word[0x4c53c4], dx<br>mov byte[0x4c53c1], dl<br>mov byte[0x4c53c0], dl<br>mov dword[0x4c53bc], ebp<br>mov byte[0x4c53bb], dl<br>mov byte[0x4c53ba], dl<br>mov byte[0x4c52c7], dl<br>jmp 0x406d39<br>cmp bl, 0x2e<br>je 0x406c0e<br>cmp bl, 0x6e<br>jne 0x406d10<br>cmp byte[esp+0x2c], 0<br>jne 0x406d10<br>mov al, byte[0x4c64b7]<br>test al, 3<br>je 0x406d10<br>test al, 0xc<br>je 0x406d10<br>test al, 0x30<br>jne 0x406d10<br>push 0x100<br>push ebp<br>push 0x4c64d8<br>mov dword[0x4c53c8], ebp<br>mov byte[0x4c64b7], 0<br>mov byte[0x4c64b6], 0<br>mov byte[0x4c64b5], 0<br>call fcn.00495c20<br>add esp, 0xc<br>push ebp<br>push str.32771<br>mov byte[0x4c53ce], 0<br>mov byte[0x4c53cd], 0<br>mov byte[0x4c53cc], 0<br>mov byte[0x4c53c7], 0<br>call dword[sym.imp.USER32.dll_FindWindowW]<br>test eax, eax<br>setne al<br>mov byte[0x4c53c6], al<br>xor eax, eax<br>xor ecx, ecx<br>mov dword[0x4c53a4], eax<br>mov dword[0x4c53a8], eax<br>mov dword[0x4c53ac], eax<br>mov dword[0x4c53b0], eax<br>mov dword[0x4c53b4], eax<br>mov word[0x4c53b8], ax<br>mov word[0x4c5208], cx<br>mov dword[0x4c5204], ebp<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>xor edx, edx<br>mov dword[0x4c5200], eax<br>mov byte[0x4c53c3], 0<br>mov byte[0x4c53c2], 0<br>mov word[0x4c53c4], dx<br>mov byte[0x4c53c1], dl<br>mov byte[0x4c53c0], dl<br>mov dword[0x4c53bc], ebp<br>mov byte[0x4c53bb], dl<br>mov byte[0x4c53ba], dl<br>mov byte[0x4c52c7], dl<br>lea esp, [esp]<br>cmp bl, 9<br>jne 0x406d39<br>cmp byte[esp+0x2c], 0<br>jne 0x406d39<br>cmp byte[0x4c53c6], 0<br>jne 0x406d39<br>mov al, byte[0x4c64b5]<br>test al, 0xc<br>je 0x406d39<br>test al, 3<br>jne 0x406d39<br>mov byte[0x4c53c6], 1<br>mov ecx, dword[0x4c6eec]<br>movzx eax, bl<br>lea eax, [eax+eax*8]<br>shl eax, 5<br>cmp byte[eax+ecx+4], 0<br>je 0x406e05<br>cmp byte[0x4c53c6], 0<br>je 0x406d92<br>cmp byte[esp+0x2c], 0<br>je 0x406d74<br>cmp bl, 0xa4<br>je 0x406d79<br>cmp bl, 0xa5<br>je 0x406d79<br>cmp bl, 0x12<br>je 0x406d79<br>jmp 0x406d92<br>cmp bl, 0x1b<br>jne 0x406d92<br>mov edx, dword[esp+0x30]<br>movzx eax, word[edx+4]<br>cmp eax, 0x68<br>je 0x406d92<br>cmp eax, 0x73<br>je 0x406d92<br>mov byte[0x4c53c6], 0<br>cmp bl, 0x5b<br>je 0x406da1<br>mov byte[esp+0x13], 0<br>cmp bl, 0x5c<br>jne 0x406da6<br>mov byte[esp+0x13], 1<br>cmp byte[esp+0x38], 0<br>je 0x406e05<br>cmp byte[esp+0x2c], 0<br>je 0x406e05<br>cmp byte[esp+0x13], 0<br>jne 0x406dd3<br>cmp bl, 0x12<br>je 0x406dd3<br>cmp bl, 0xa4<br>je 0x406dd3<br>cmp bl, 0xa5<br>jne 0x406e05<br>call fcn.00411ed0<br>test al, al<br>jne 0x406e05<br>mov al, byte[0x4c64b5]<br>test al, 3<br>jne 0x406e05<br>cmp byte[esp+0x13], 0<br>je 0x406de7<br>test al, 0x3c<br>jne 0x406e05<br>movzx eax, byte[0x4c2385]<br>push 0xffc3d44d<br>push ebp<br>push ebp<br>push ebp<br>push eax<br>push 2<br>call fcn.0040f3b0<br>add esp, 0x18<br>jmp 0x406e05<br>xor ebp, ebp<br>cmp byte[0x4c28e2], 0<br>je 0x406e27<br>cmp bl, 1<br>je 0x406e18<br>cmp bl, 2<br>jne 0x406e27<br>xor ecx, ecx<br>mov word[0x4c5208], cx<br>mov dword[0x4c5204], ebp<br>mov edx, dword[esp+0x28]<br>mov eax, dword[esp+0x24]<br>mov ecx, dword[esp+0x20]<br>push edi<br>push edx<br>push eax<br>push ecx<br>call dword[sym.imp.USER32.dll_CallNextHookEx]<br>mov ebx, dword[esp+0x34]<br>mov esi, dword[sym.imp.USER32.dll_PostMessageW]<br>mov edi, eax<br>cmp ebx, 0x3fff<br>je 0x406e9c<br>mov ebp, dword[esp+0x30]<br>movzx edx, word[ebp+2]<br>mov eax, dword[0x4c64b8]<br>push edx<br>push ebx<br>push 0x400<br>push eax<br>call esi<br>cmp byte[esp+0x2c], 0<br>je 0x406e9c<br>mov ecx, dword[0x4c6ee8]<br>and ebx, 0x3fff<br>movzx eax, word[ecx+ebx*2]<br>mov edx, 0x3fff<br>cmp ax, dx<br>je 0x406e9c<br>movzx ecx, word[ebp+2]<br>push ecx<br>push eax<br>mov eax, dword[0x4c64b8]<br>push 0x400<br>push eax<br>call esi<br>mov eax, dword[esp+0x14]<br>cmp eax, 0x7fffffff<br>je 0x406ebb<br>mov ecx, dword[esp+0x18]<br>mov edx, dword[0x4c64b8]<br>push ecx<br>push eax<br>push 0x401<br>push edx<br>call esi<br>mov eax, edi<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0xc<br>ret <br><eoc> ', 'point { fill-color: #e0440e; }'],
[81.61139678955078, -183.23020935058594, '<b><a href="/report/fcn.00406ed0@4fe6510221c33bf023f6abed461fc13f">fcn.00406ed0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>mov ecx, dword[0x4c6eec]<br>sub esp, 0x120<br>push ebx<br>mov bl, byte[esp+0x12c]<br>push ebp<br>mov bp, word[esp+0x134]<br>push edi<br>mov edi, dword[0x4c8600]<br>cmp edi, 1<br>jne 0x406f16<br>cmp byte[0x4c8630], 0<br>jne 0x406f16<br>movzx eax, bl<br>lea eax, [eax+eax*8]<br>shl eax, 5<br>cmp dword[eax+ecx], 0<br>mov byte[esp+0xe], 0<br>je 0x406f1b<br>mov byte[esp+0xe], 1<br>cmp byte[esp+0x13c], 0<br>je 0x406f49<br>movzx eax, bl<br>lea edx, [eax+eax*8]<br>shl edx, 5<br>cmp byte[edx+ecx+4], 0<br>mov al, 1<br>jne 0x407920<br>mov al, byte[esp+0xe]<br>pop edi<br>pop ebp<br>pop ebx<br>add esp, 0x120<br>ret <br>cmp dword[0x4c7eb4], 0<br>je 0x406f61<br>test dl, dl<br>jne 0x406f61<br>mov byte[esp+0xf], 1<br>cmp byte[esp+0xe], dl<br>jne 0x406f66<br>mov byte[esp+0xf], 0<br>mov al, byte[0x4c64b5]<br>push esi<br>cmp edi, 1<br>jne 0x407048<br>cmp byte[0x4c862e], 0<br>je 0x406f86<br>test dl, dl<br>jne 0x407048<br>mov byte[esp+0x14], 1<br>cmp bl, 0xe7<br>je 0x407027<br>mov edx, dword[0x4c8604]<br>mov esi, dword[0x4c8608]<br>movzx ecx, bl<br>mov cl, byte[ecx+edx]<br>test cl, cl<br>jne 0x406fb4<br>movzx ecx, bp<br>mov cl, byte[ecx+esi]<br>test cl, cl<br>je 0x407027<br>mov dl, cl<br>shr cl, 2<br>shr dl, 1<br>and cl, 1<br>and dl, 1<br>je 0x40704f<br>test cl, cl<br>jne 0x406fd7<br>test al, 0x30<br>jne 0x406fd7<br>test cl, cl<br>je 0x407027<br>test al, 0x30<br>jne 0x407027<br>movzx ecx, bp<br>mov edi, 4<br>mov dword[0x4c8600], edi<br>cmp byte[ecx+esi], 0<br>mov byte[0x4c8610], bl<br>setne cl<br>mov byte[0x4c8616], cl<br>xor ecx, ecx<br>mov word[0x4c8612], bp<br>mov word[0x4c8614], cx<br>test dl, dl<br>je 0x407017<br>mov byte[0x4c8617], 1<br>test al, 0x30<br>jne 0x40701d<br>mov byte[0x4c8617], cl<br>cmp byte[esp+0x13], cl<br>je 0x40791b<br>movzx ebx, byte[esp+0x138]<br>lea ecx, [ebx-0x21]<br>cmp ecx, 0x84<br>ja case.0x407041.41<br>movzx edx, byte[ecx+0x407938]<br>jmp dword[edx*4+0x40792c]<br>mov byte[esp+0x14], 0<br>jmp 0x407027<br>test cl, cl<br>je 0x406fd7<br>jmp 0x406fd3<br>pop esi<br>pop edi<br>pop ebp<br>mov al, 1<br>pop ebx<br>add esp, 0x120<br>ret <br>cmp byte[esp+0x13], 0<br>je case.0x407041.41<br>mov ecx, dword[0x4c5204]<br>test ecx, ecx<br>je 0x40708d<br>xor ecx, ecx<br>mov word[0x4c5208], cx<br>mov dword[0x4c5204], ecx<br>jmp 0x40708d<br>mov ecx, dword[0x4c5204]<br>test al, al<br>je 0x4070b7<br>cmp edi, 1<br>jne 0x40709f<br>cmp byte[0x4c862f], 0<br>jne 0x4070b7<br>cmp al, 0x10<br>je 0x4070b7<br>cmp al, 0x20<br>je 0x4070b7<br>test al, 0xc<br>je 0x40791b<br>test al, 3<br>je 0x40791b<br>cmp byte[esp+0x138], 8<br>jne 0x407132<br>test al, al<br>jne 0x407132<br>cmp byte[esp+0x14], al<br>je 0x4070f3<br>cmp edi, 1<br>jne 0x4070f3<br>cmp byte[0x4c862c], al<br>je 0x4070f3<br>mov eax, dword[0x4c8638]<br>test eax, eax<br>je 0x4070f3<br>mov esi, dword[0x4c8634]<br>dec eax<br>xor edx, edx<br>mov dword[0x4c8638], eax<br>mov word[esi+eax*2], dx<br>cmp byte[esp+0x13], 0<br>je 0x40710f<br>test ecx, ecx<br>je 0x40710f<br>dec ecx<br>xor eax, eax<br>mov dword[0x4c5204], ecx<br>mov word[ecx*2+0x4c5208], ax<br>cmp byte[0x4c92f0], 0<br>je 0x40791b<br>mov al, byte[esp+0x12]<br>pop esi<br>pop edi<br>pop ebp<br>mov byte[0x4c92f0], 0<br>pop ebx<br>add esp, 0x120<br>ret <br>mov ecx, 0x40<br>mov esi, 0x4c64d8<br>lea edi, [esp+0x30]<br>rep movsd<br>lea ecx, [esp+0x30]<br>call fcn.00411a40<br>push 0x14<br>call dword[sym.imp.USER32.dll_GetKeyState]<br>test al, 1<br>je 0x40715e<br>or byte[esp+0x44], 1<br>jmp 0x407163<br>and byte[esp+0x44], 0xfe<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>mov ebp, eax<br>test ebp, ebp<br>je 0x40717a<br>push 0<br>push ebp<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>jmp 0x40717c<br>xor eax, eax<br>push eax<br>call dword[sym.imp.USER32.dll_GetKeyboardLayout]<br>cmp byte[esp+0x138], 0xe7<br>mov edi, dword[sym.imp.USER32.dll_ToUnicodeEx]<br>mov esi, eax<br>mov dword[esp+0x2c], esi<br>jne 0x4071b1<br>mov cx, word[esp+0x13c]<br>mov eax, 1<br>mov dword[esp+0x28], eax<br>mov word[esp+0x18], cx<br>jmp 0x4071e4<br>xor edx, edx<br>cmp dword[0x4c6648], edx<br>push esi<br>setne dl<br>lea eax, [esp+0x1c]<br>lea ecx, [esp+0x34]<br>push edx<br>mov edx, dword[esp+0x13c]<br>push 2<br>push eax<br>mov eax, dword[edx+4]<br>push ecx<br>push eax<br>push ebx<br>call edi<br>mov dword[esp+0x28], eax<br>test eax, eax<br>je 0x40791b<br>cmp byte[0x4c92f0], 0<br>mov cl, byte[esp+0x138]<br>je 0x407203<br>cmp cl, 9<br>je 0x407203<br>mov byte[esp+0x17], 1<br>cmp cl, 0x1b<br>jne 0x407208<br>mov byte[esp+0x17], 0<br>test eax, eax<br>jns 0x407288<br>cmp byte[esp+0x12], 0<br>je 0x40791b<br>mov al, byte[0x4c64b5]<br>test al, 0x30<br>mov byte[0x4c92f0], cl<br>mov cx, word[esp+0x13c]<br>setne dl<br>mov word[0x4c92f4], cx<br>mov byte[0x4c92f6], dl<br>test al, 3<br>je 0x40724b<br>mov byte[0x4c92f7], 1<br>test al, 0xc<br>jne 0x407252<br>mov byte[0x4c92f7], 0<br>xor eax, eax<br>cmp dword[0x4c6648], eax<br>push esi<br>setne al<br>lea ecx, [esp+0x1c]<br>lea edx, [esp+0x34]<br>push eax<br>mov eax, dword[esp+0x13c]<br>push 2<br>push ecx<br>mov ecx, dword[eax+4]<br>push edx<br>push ecx<br>push ebx<br>call edi<br>mov al, byte[esp+0x12]<br>pop esi<br>pop edi<br>pop ebp<br>pop ebx<br>add esp, 0x120<br>ret <br>test byte[0x4c64b5], 3<br>jne 0x4072b8<br>mov eax, 0xd<br>cmp word[esp+0x18], ax<br>jne 0x4072a7<br>mov edx, 0xa<br>mov word[esp+0x18], dx<br>cmp word[esp+0x1a], ax<br>jne 0x4072b8<br>mov eax, 0xa<br>mov word[esp+0x1a], ax<br>cmp byte[esp+0x13], 0<br>mov byte[esp+0x15], 0<br>je 0x407686<br>cmp ebp, dword[0x4c5200]<br>je 0x4072e1<br>xor ecx, ecx<br>mov dword[0x4c5200], ebp<br>mov word[0x4c5208], cx<br>jmp 0x407331<br>mov ecx, dword[0x4c5204]<br>mov edx, 0x5a<br>sub edx, ecx<br>cmp edx, 3<br>jge 0x407331<br>mov eax, 0x4c5262<br>lea edx, [eax+2]<br>jmp 0x407300<br>mov cx, word[eax]<br>add eax, 2<br>test cx, cx<br>jne 0x407300<br>sub eax, edx<br>sar eax, 1<br>mov dword[0x4c5204], eax<br>lea eax, [eax+eax+2]<br>push eax<br>push 0x4c5262<br>push 0x4c5208<br>call fcn.0048d7c0<br>mov ecx, dword[0x4c5204]<br>add esp, 0xc<br>mov dx, word[esp+0x18]<br>mov word[ecx*2+0x4c5208], dx<br>inc ecx<br>cmp dword[esp+0x28], 1<br>mov dword[0x4c5204], ecx<br>jle 0x407360<br>mov ax, word[esp+0x1a]<br>mov word[ecx*2+0x4c5208], ax<br>inc ecx<br>mov dword[0x4c5204], ecx<br>xor edx, edx<br>mov word[ecx*2+0x4c5208], dx<br>test ecx, ecx<br>je 0x407686<br>mov dword[esp+0x24], edx<br>cmp dword[0x4c7eb8], edx<br>jbe 0x407686<br>mov eax, dword[0x4c7eb4]<br>mov edx, dword[esp+0x24]<br>mov ebp, dword[eax+edx*4]<br>cmp byte[ebp+0x27], 0<br>jne 0x4074a2<br>cmp byte[ebp+0x2f], 0<br>je 0x4073d7<br>movzx eax, byte[ebp+0x26]<br>cmp ecx, eax<br>jle 0x4074a2<br>movzx eax, word[ecx*2+0x4c5206]<br>push eax<br>push 0x4c28f0<br>call fcn.0048db21<br>add esp, 8<br>test eax, eax<br>je 0x40749c<br>mov ecx, dword[0x4c5204]<br>lea edi, [ecx*2+0x4c5204]<br>jmp 0x4073ea<br>movzx edx, byte[ebp+0x26]<br>cmp ecx, edx<br>jl 0x4074a2<br>lea edi, [ecx*2+0x4c5206]<br>cmp byte[ebp+0x2a], 0<br>movzx edx, byte[ebp+0x26]<br>mov eax, dword[ebp+4]<br>lea esi, [eax+edx*2-2]<br>je 0x407414<br>cmp esi, eax<br>jb 0x407450<br>nop <br>mov dx, word[edi]<br>cmp dx, word[esi]<br>jne 0x407450<br>sub esi, 2<br>sub edi, 2<br>cmp esi, eax<br>jae 0x407400<br>jmp 0x407450<br>cmp esi, eax<br>jb 0x407450<br>jmp 0x407420<br>movzx eax, word[esi]<br>mov ebx, dword[sym.imp.USER32.dll_CharLowerW]<br>push eax<br>call ebx<br>movzx ecx, word[edi]<br>push ecx<br>mov dword[esp+0x24], eax<br>call ebx<br>mov ecx, dword[esp+0x20]<br>cmp ax, cx<br>jne 0x40744a<br>sub esi, 2<br>sub edi, 2<br>cmp esi, dword[ebp+4]<br>jae 0x407420<br>mov ecx, dword[0x4c5204]<br>cmp esi, dword[ebp+4]<br>jae 0x4074a2<br>cmp byte[ebp+0x30], 0<br>jne 0x407471<br>cmp edi, 0x4c5208<br>jb 0x407471<br>movzx edx, word[edi]<br>push edx<br>call dword[sym.imp.USER32.dll_IsCharAlphaNumericW]<br>test eax, eax<br>jne 0x40749c<br>mov eax, dword[ebp]<br>test eax, eax<br>je 0x40747d<br>mov eax, dword[eax+4]<br>jmp 0x407482<br>mov eax, 0x4ab02c<br>mov edx, dword[ebp+0xc]<br>mov bl, byte[ebp+0x24]<br>push eax<br>mov eax, dword[ebp+0x1c]<br>push eax<br>mov eax, dword[ebp+0x10]<br>call fcn.00409920<br>add esp, 8<br>test eax, eax<br>jne 0x4074bc<br>mov ecx, dword[0x4c5204]<br>mov eax, dword[esp+0x24]<br>inc eax<br>mov dword[esp+0x24], eax<br>cmp eax, dword[0x4c7eb8]<br>jb 0x407382<br>jmp 0x407686<br>movzx edx, byte[ebp+0x25]<br>mov ecx, dword[esp+0x144]<br>mov eax, dword[esp+0x134]<br>mov eax, dword[eax+0x10]<br>add ecx, 4<br>push edx<br>call fcn.0040a400<br>add esp, 4<br>test al, al<br>je 0x407686<br>xor edi, edi<br>cmp byte[ebp+0x2b], 0<br>je 0x4075cd<br>cmp byte[ebp+0x2f], 0<br>mov ebx, dword[0x4c5204]<br>lea ebx, [ebx*2+0x4c5208]<br>je 0x407507<br>sub ebx, 2<br>movzx ecx, byte[ebp+0x26]<br>add ecx, ecx<br>mov esi, ebx<br>sub esi, ecx<br>mov dword[esp+0x20], edi<br>mov byte[esp+0x16], 0<br>mov byte[esp+0x13], 0<br>cmp esi, ebx<br>jae 0x407576<br>mov edi, dword[sym.imp.USER32.dll_IsCharUpperW]<br>lea esp, [esp]<br>movzx edx, word[esi]<br>push edx<br>call dword[sym.imp.USER32.dll_IsCharLowerW]<br>test eax, eax<br>jne 0x407548<br>movzx eax, word[esi]<br>push eax<br>call edi<br>test eax, eax<br>je 0x407567<br>cmp byte[esp+0x16], 0<br>jne 0x407563<br>movzx ecx, word[esi]<br>push ecx<br>mov byte[esp+0x1a], 1<br>call edi<br>test eax, eax<br>je 0x407563<br>mov byte[esp+0x13], 1<br>inc dword[esp+0x20]<br>add esi, 2<br>cmp esi, ebx<br>jb 0x407530<br>mov eax, dword[esp+0x20]<br>test eax, eax<br>jne 0x40757a<br>xor edi, edi<br>jmp 0x4075cd<br>cmp eax, 1<br>jne 0x40758d<br>movzx edi, byte[esp+0x13]<br>neg edi<br>sbb edi, edi<br>and edi, 2<br>jmp 0x4075cd<br>cmp byte[esp+0x13], 0<br>jne 0x407598<br>xor edi, edi<br>jmp 0x4075cd<br>movzx edx, byte[ebp+0x26]<br>add edx, edx<br>mov esi, ebx<br>sub esi, edx<br>mov edi, 2<br>cmp esi, ebx<br>jae 0x4075c6<br>jmp 0x4075b0<br>movzx eax, word[esi]<br>push eax<br>call dword[sym.imp.USER32.dll_IsCharLowerW]<br>test eax, eax<br>jne 0x4075c4<br>add esi, edi<br>cmp esi, ebx<br>jb 0x4075b0<br>cmp esi, ebx<br>jne 0x4075cd<br>mov edi, 1<br>mov dl, byte[ebp+0x2c]<br>test dl, dl<br>jne 0x4075d9<br>cmp byte[ebp+0x2d], dl<br>je 0x4075e3<br>mov byte[esp+0x12], 0<br>mov byte[esp+0x15], 1<br>mov eax, dword[esp+0x24]<br>mov ecx, dword[esp+0x148]<br>mov dword[ecx], eax<br>mov al, byte[ebp+0x2f]<br>test al, al<br>je 0x407607<br>mov ecx, dword[0x4c5204]<br>movzx ecx, word[ecx*2+0x4c5206]<br>jmp 0x407609<br>xor ecx, ecx<br>movzx esi, di<br>movzx ecx, cx<br>shl esi, 0x10<br>or esi, ecx<br>mov ecx, dword[esp+0x14c]<br>mov dword[ecx], esi<br>mov esi, dword[ebp+8]<br>xor ecx, ecx<br>cmp word[esi], cx<br>je 0x407653<br>test al, al<br>je 0x40764b<br>mov edx, dword[0x4c5204]<br>mov ax, word[edx*2+0x4c5206]<br>mov word[0x4c5208], ax<br>mov dword[0x4c5204], 1<br>jmp 0x40766b<br>mov dword[0x4c5204], ecx<br>jmp 0x40766b<br>test dl, dl<br>je 0x40766b<br>movzx edx, byte[ebp+0x26]<br>sub dword[0x4c5204], edx<br>test al, al<br>je 0x40766b<br>dec dword[0x4c5204]<br>cmp byte[ebp+0x31], cl<br>je 0x407676<br>mov dword[0x4c5204], ecx<br>mov ecx, dword[0x4c5204]<br>xor eax, eax<br>mov word[ecx*2+0x4c5208], ax<br>cmp byte[esp+0x17], 0<br>je 0x4076f9<br>cmp byte[esp+0x12], 0<br>mov bl, byte[0x4c92f0]<br>mov byte[0x4c92f0], 0<br>je 0x4076f9<br>push 0x100<br>lea edx, [esp+0x34]<br>push 0<br>push edx<br>call fcn.00495c20<br>mov al, byte[0x4c92f6]<br>mov cl, byte[0x4c92f7]<br>add esp, 0xc<br>neg al<br>sbb al, al<br>and al, 0x20<br>neg cl<br>sbb cl, cl<br>and cl, 9<br>or al, cl<br>lea ecx, [esp+0x30]<br>call fcn.00411a40<br>mov edx, dword[esp+0x2c]<br>push edx<br>movzx edx, word[0x4c92f4]<br>push 0<br>push 2<br>lea eax, [esp+0x38]<br>push eax<br>push ecx<br>movzx eax, bl<br>push edx<br>push eax<br>call dword[sym.imp.USER32.dll_ToUnicodeEx]<br>cmp byte[esp+0x14], 0<br>je 0x40791b<br>cmp dword[0x4c8600], 1<br>jne 0x40791b<br>cmp byte[esp+0x15], 0<br>jne 0x40791b<br>mov edi, dword[esp+0x28]<br>xor esi, esi<br>test edi, edi<br>jle 0x40779a<br>jmp 0x407730<br>cmp byte[0x4c862d], 0<br>mov ecx, dword[0x4c860c]<br>je 0x407750<br>movzx eax, word[esp+esi*2+0x18]<br>push eax<br>push ecx<br>call fcn.0048db21<br>add esp, 8<br>jmp 0x40775a<br>mov ax, word[esp+esi*2+0x18]<br>call fcn.00473ef0<br>test eax, eax<br>jne 0x4077ea<br>mov eax, dword[0x4c8638]<br>cmp eax, dword[0x4c863c]<br>je 0x40779a<br>mov dx, word[esp+esi*2+0x18]<br>mov ecx, dword[0x4c8634]<br>mov word[ecx+eax*2], dx<br>mov eax, dword[0x4c8638]<br>mov ecx, dword[0x4c8634]<br>inc eax<br>xor edx, edx<br>inc esi<br>mov dword[0x4c8638], eax<br>mov word[ecx+eax*2], dx<br>cmp esi, edi<br>jl 0x407730<br>xor esi, esi<br>cmp byte[0x4c8631], 0<br>je 0x407869<br>cmp byte[0x4c862d], 0<br>je 0x407828<br>cmp dword[0x4c861c], esi<br>jbe 0x407903<br>mov edi, edi<br>mov eax, dword[0x4c8618]<br>mov eax, dword[eax+esi*4]<br>mov ecx, dword[0x4c8634]<br>push eax<br>push ecx<br>call fcn.0048db48<br>add esp, 8<br>test eax, eax<br>jne 0x40780f<br>inc esi<br>cmp esi, dword[0x4c861c]<br>jb 0x4077c0<br>jmp 0x407903<br>mov dx, word[esp+esi*2+0x18]<br>mov al, byte[esp+0x12]<br>pop esi<br>pop edi<br>pop ebp<br>mov dword[0x4c8600], 4<br>mov word[0x4c8614], dx<br>pop ebx<br>add esp, 0x120<br>ret <br>mov al, byte[esp+0x12]<br>pop esi<br>pop edi<br>pop ebp<br>mov dword[0x4c8600], 3<br>pop ebx<br>add esp, 0x120<br>ret <br>cmp dword[0x4c861c], esi<br>jbe 0x407903<br>jmp 0x407840<br>mov edx, dword[0x4c8634]<br>mov eax, dword[0x4c8618]<br>mov eax, dword[eax+esi*4]<br>push edx<br>call fcn.00473f40<br>add esp, 4<br>test eax, eax<br>jne 0x40780f<br>inc esi<br>cmp esi, dword[0x4c861c]<br>jb 0x407840<br>jmp 0x407903<br>cmp byte[0x4c862d], 0<br>je 0x4078cf<br>mov ebp, dword[0x4c861c]<br>test ebp, ebp<br>je 0x407903<br>mov edi, dword[0x4c8634]<br>mov ebx, dword[0x4c8618]<br>lea esp, [esp]<br>mov ecx, dword[ebx+esi*4]<br>mov eax, edi<br>mov dx, word[eax]<br>cmp dx, word[ecx]<br>jne 0x4078bb<br>test dx, dx<br>je 0x4078b7<br>mov dx, word[eax+2]<br>cmp dx, word[ecx+2]<br>jne 0x4078bb<br>add eax, 4<br>add ecx, 4<br>test dx, dx<br>jne 0x407895<br>xor eax, eax<br>jmp 0x4078c0<br>sbb eax, eax<br>sbb eax, 0xffffffff<br>test eax, eax<br>je 0x40780f<br>inc esi<br>cmp esi, ebp<br>jb 0x407890<br>jmp 0x407903<br>cmp dword[0x4c861c], esi<br>jbe 0x407903<br>mov edi, dword[sym.imp.KERNEL32.dll_lstrcmpiW]<br>lea ecx, [ecx]<br>mov ecx, dword[0x4c8618]<br>mov edx, dword[ecx+esi*4]<br>mov eax, dword[0x4c8634]<br>push edx<br>push eax<br>call edi<br>test eax, eax<br>je 0x40780f<br>inc esi<br>cmp esi, dword[0x4c861c]<br>jb 0x4078e0<br>mov ecx, dword[0x4c863c]<br>cmp dword[0x4c8638], ecx<br>jl 0x40791b<br>mov dword[0x4c8600], 5<br>mov al, byte[esp+0x12]<br>pop esi<br>pop edi<br>pop ebp<br>pop ebx<br>add esp, 0x120<br>ret <br><eoc> ', 'null'],
[-19.219606399536133, -320.54608154296875, '<b><a href="/report/fcn.004102e0@4fe6510221c33bf023f6abed461fc13f">fcn.004102e0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>sub esp, 0x18<br>push ebx<br>push ebp<br>push esi<br>mov esi, dword[esp+0x28]<br>push edi<br>mov edi, dword[esp+0x30]<br>mov bl, al<br>cmp esi, 0x80000000<br>jne 0x410303<br>cmp edi, esi<br>jne 0x410699<br>jmp 0x41030f<br>cmp edi, 0x80000000<br>je 0x410699<br>cmp dword[esp+0x34], 1<br>jl 0x410699<br>xor eax, eax<br>mov dword[esp+0x14], eax<br>cmp esi, 0x80000000<br>je 0x410357<br>cmp edi, 0x80000000<br>je 0x410357<br>mov eax, dword[esp+0x3c]<br>push eax<br>push ecx<br>lea edx, [esp+0x38]<br>push edx<br>lea ecx, [esp+0x20]<br>lea eax, [esp+0x38]<br>call fcn.004106d0<br>mov edi, dword[esp+0x3c]<br>mov esi, dword[esp+0x38]<br>mov eax, dword[esp+0x20]<br>add esp, 0xc<br>movzx ecx, bl<br>add ecx, 0xffffff64<br>cmp ecx, 3<br>ja case.default.0x410365<br>jmp dword[ecx*4+0x4106a4]<br>mov edx, dword[esp+0x34]<br>mov ecx, edx<br>shl ecx, 4<br>sub ecx, edx<br>add ecx, ecx<br>add ecx, ecx<br>add ecx, ecx<br>or eax, 0x800<br>push eax<br>mov edx, edi<br>mov eax, esi<br>call fcn.004108c0<br>add esp, 4<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0x18<br>ret <br>mov ecx, dword[esp+0x34]<br>imul ecx, ecx, 0xffffff88<br>jmp 0x41037d<br>mov ecx, dword[esp+0x34]<br>imul ecx, ecx, 0xffffff88<br>or eax, 0x1000<br>jmp 0x410382<br>mov edx, dword[esp+0x34]<br>mov ecx, edx<br>shl ecx, 4<br>sub ecx, edx<br>add ecx, ecx<br>add ecx, ecx<br>add ecx, ecx<br>or eax, 0x1000<br>jmp 0x410382<br>xor ebp, ebp<br>mov dword[esp+0x2c], ebp<br>cmp bl, 0x9a<br>jne 0x4103ee<br>cmp dword[0x4c7f18], 2<br>je 0x4103ea<br>push 0x17<br>call dword[sym.imp.USER32.dll_GetSystemMetrics]<br>test eax, eax<br>mov eax, dword[esp+0x14]<br>jne 0x41040e<br>mov bl, 1<br>jmp 0x410410<br>cmp bl, 0x9b<br>jne 0x410410<br>cmp dword[0x4c7f18], 2<br>je 0x41040e<br>push 0x17<br>call dword[sym.imp.USER32.dll_GetSystemMetrics]<br>test eax, eax<br>mov eax, dword[esp+0x14]<br>mov bl, 1<br>jne 0x410410<br>mov bl, 2<br>movzx ecx, bl<br>dec ecx<br>cmp ecx, 5<br>ja case.0x41041d.3<br>jmp dword[ecx*4+0x4106b4]<br>cmp dword[0x4c7f18], ebp<br>je 0x410438<br>cmp dword[0x4c53e8], ebp<br>jne 0x41053f<br>mov ecx, dword[esp+0x38]<br>test ecx, ecx<br>je 0x410456<br>cmp ecx, 1<br>jne 0x41053f<br>cmp byte[0x4c9304], 0<br>je 0x41053f<br>lea eax, [esp+0x20]<br>push eax<br>call dword[sym.imp.USER32.dll_GetCursorPos]<br>mov ecx, dword[esp+0x24]<br>mov edx, dword[esp+0x20]<br>push ecx<br>push edx<br>call dword[sym.imp.USER32.dll_WindowFromPoint]<br>test eax, eax<br>je 0x41053b<br>call fcn.004784d0<br>mov ebp, eax<br>test ebp, ebp<br>je 0x410537<br>push 0<br>push ebp<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>cmp eax, dword[0x4c85cc]<br>jne 0x410537<br>movzx eax, word[esp+0x24]<br>movzx ecx, word[esp+0x20]<br>shl eax, 0x10<br>or eax, ecx<br>push eax<br>push 0<br>push 0x84<br>push ebp<br>call dword[sym.imp.USER32.dll_SendMessageW]<br>cmp bl, 1<br>jne 0x4104f1<br>cmp eax, 0x14<br>je 0x410500<br>cmp eax, 9<br>je 0x410500<br>cmp eax, 8<br>je 0x410500<br>cmp eax, 0x15<br>je 0x410500<br>mov ebp, dword[esp+0x2c]<br>mov eax, dword[esp+0x14]<br>mov dword[esp+0x18], 2<br>mov dword[esp+0x1c], 4<br>jmp case.0x41041d.3<br>cmp bl, 2<br>jne 0x410537<br>cmp eax, 2<br>je 0x410500<br>cmp eax, 3<br>jne 0x410556<br>cmp dword[esp+0x38], 0<br>jne 0x410521<br>mov dword[0x4c9bf0], eax<br>mov eax, ebp<br>mov byte[0x4c9304], bl<br>call fcn.00477480<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0x18<br>ret <br>mov ebp, dword[esp+0x2c]<br>cmp dword[0x4c9bf0], eax<br>jne 0x41053b<br>mov dword[esp+0x38], 2<br>jmp 0x41053b<br>mov ebp, dword[esp+0x2c]<br>mov eax, dword[esp+0x14]<br>cmp bl, 1<br>jne 0x41055e<br>mov dword[esp+0x18], 2<br>mov dword[esp+0x1c], 4<br>jmp case.0x41041d.3<br>mov ebp, dword[esp+0x2c]<br>mov eax, dword[esp+0x14]<br>mov dword[esp+0x18], 8<br>mov dword[esp+0x1c], 0x10<br>jmp case.0x41041d.3<br>mov dword[esp+0x18], 0x20<br>mov dword[esp+0x1c], 0x40<br>jmp case.0x41041d.3<br>xor edx, edx<br>cmp bl, 5<br>setne dl<br>mov dword[esp+0x18], 0x80<br>mov dword[esp+0x1c], 0x100<br>inc edx<br>mov dword[esp+0x2c], edx<br>mov ebp, edx<br>mov ecx, dword[esp+0x34]<br>test ecx, ecx<br>jle 0x410692<br>mov dword[esp+0x2c], ecx<br>mov ecx, 1<br>cmp dword[esp+0x38], ecx<br>je 0x410620<br>mov ebx, dword[esp+0x18]<br>or ebx, eax<br>cmp dword[0x4c7f18], 0<br>je 0x4105d8<br>push ebp<br>mov eax, esi<br>call fcn.00410a90<br>add esp, 4<br>jmp 0x41060e<br>mov eax, dword[0x4c28ec]<br>movzx ecx, byte[eax+0xf2]<br>mov edx, 0xffc3d44d<br>sub edx, ecx<br>lea eax, [edi-0x80000000]<br>neg eax<br>sbb eax, eax<br>push edx<br>and eax, edi<br>lea ecx, [esi-0x80000000]<br>neg ecx<br>push ebp<br>sbb ecx, ecx<br>push eax<br>and ecx, esi<br>push ecx<br>push ebx<br>call dword[sym.imp.USER32.dll_mouse_event]<br>cmp byte[0x4c9304], 0<br>jne 0x41061c<br>call fcn.00410f20<br>mov eax, dword[esp+0x14]<br>cmp dword[esp+0x38], 0<br>je 0x410683<br>mov ebx, dword[esp+0x1c]<br>or ebx, eax<br>cmp dword[0x4c7f18], 0<br>je 0x410643<br>push ebp<br>mov eax, esi<br>call fcn.00410a90<br>add esp, 4<br>jmp 0x41067a<br>mov edx, dword[0x4c28ec]<br>movzx eax, byte[edx+0xf2]<br>mov ecx, 0xffc3d44d<br>sub ecx, eax<br>lea edx, [edi-0x80000000]<br>neg edx<br>sbb edx, edx<br>push ecx<br>and edx, edi<br>lea eax, [esi-0x80000000]<br>neg eax<br>push ebp<br>sbb eax, eax<br>push edx<br>and eax, esi<br>push eax<br>push ebx<br>call dword[sym.imp.USER32.dll_mouse_event]<br>call fcn.00410f20<br>mov eax, dword[esp+0x14]<br>mov ecx, 1<br>sub dword[esp+0x2c], ecx<br>jne 0x4105b6<br>mov byte[0x4c9304], 0<br>pop edi<br>pop esi<br>pop ebp<br>pop ebx<br>add esp, 0x18<br>ret <br><eoc> ', 'null'],
[-156.5224151611328, -219.697265625, '<b><a href="/report/fcn.0040f3b0@4fe6510221c33bf023f6abed461fc13f">fcn.0040f3b0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>push ebp<br>mov ebp, esp<br>and esp, 0xfffffff8<br>movzx eax, byte[ebp+0xc]<br>sub esp, 0x11c<br>push ebx<br>mov ebx, dword[ebp+0x10]<br>or ax, bx<br>push esi<br>push edi<br>je 0x40f9c7<br>cmp dword[ebp+0x1c], 0<br>jne 0x40f3dc<br>mov dword[ebp+0x1c], 0xffc3d44d<br>call dword[sym.imp.KERNEL32.dll_GetCurrentThreadId]<br>cmp eax, dword[0x4c53a0]<br>mov eax, dword[0x4c7f18]<br>sete byte[esp+0x11]<br>test eax, eax<br>je 0x40f402<br>cmp byte[esp+0x11], 0<br>mov byte[esp+0x12], 1<br>je 0x40f407<br>mov byte[esp+0x12], 0<br>cmp eax, 1<br>je 0x40f413<br>cmp byte[esp+0x11], 0<br>je 0x40f417<br>mov byte[ebp+0x18], 0<br>cmp byte[ebp+0xc], 0<br>jne 0x40f429<br>mov ecx, ebx<br>call fcn.00412980<br>mov byte[ebp+0xc], al<br>jmp 0x40f442<br>test bx, bx<br>jne 0x40f442<br>mov ecx, dword[ebp+0xc]<br>push ecx<br>xor bl, bl<br>call fcn.00412700<br>movzx ebx, ax<br>add esp, 4<br>mov dword[ebp+0x10], ebx<br>mov edx, ebx<br>xor eax, eax<br>shr edx, 8<br>test dl, dl<br>setne al<br>cmp dword[0x4c7f18], 2<br>mov dword[esp+0x1c], eax<br>jne case.default.0x40f469<br>movzx eax, byte[ebp+0xc]<br>add eax, 0xffffff60<br>cmp eax, 5<br>ja case.default.0x40f469<br>jmp dword[eax*4+0x40f9d0]<br>mov byte[ebp+0xc], 0x11<br>jmp case.default.0x40f469<br>mov byte[ebp+0xc], 0x10<br>jmp case.default.0x40f469<br>mov byte[ebp+0xc], 0x12<br>cmp dword[ebp+0x14], 0<br>mov al, byte[ebp+0xc]<br>je 0x40f5b5<br>xor ecx, ecx<br>mov edx, ebx<br>call fcn.00411b10<br>mov ebx, dword[ebp+8]<br>test al, al<br>je 0x40f54b<br>lea ecx, [esp+0x28]<br>push ecx<br>call dword[sym.imp.USER32.dll_GetKeyboardState]<br>mov cl, 0x80<br>mov dl, 0x7f<br>test ebx, ebx<br>jne 0x40f4c2<br>movzx eax, byte[ebp+0xc]<br>or byte[esp+eax+0x28], cl<br>lea eax, [esp+eax+0x28]<br>jmp 0x40f4d3<br>cmp ebx, 1<br>jne 0x40f4d3<br>movzx eax, byte[ebp+0xc]<br>and byte[esp+eax+0x28], dl<br>lea eax, [esp+eax+0x28]<br>movzx eax, byte[ebp+0xc]<br>add eax, 0xffffff60<br>cmp eax, 5<br>ja case.default.0x40f4e1<br>jmp dword[eax*4+0x40f9e8]<br>test byte[esp+0xca], cl<br>jne 0x40f500<br>test byte[esp+0xcb], cl<br>jne 0x40f500<br>and byte[esp+0x39], dl<br>jmp case.default.0x40f4e1<br>or byte[esp+0x39], cl<br>jmp case.default.0x40f4e1<br>test byte[esp+0xc8], cl<br>jne 0x40f51e<br>test byte[esp+0xc9], cl<br>jne 0x40f51e<br>and byte[esp+0x38], dl<br>jmp case.default.0x40f4e1<br>or byte[esp+0x38], cl<br>jmp case.default.0x40f4e1<br>test byte[esp+0xcc], cl<br>jne 0x40f53c<br>test byte[esp+0xcd], cl<br>jne 0x40f53c<br>and byte[esp+0x3a], dl<br>jmp case.default.0x40f4e1<br>or byte[esp+0x3a], cl<br>lea edx, [esp+0x28]<br>push edx<br>call dword[sym.imp.USER32.dll_SetKeyboardState]<br>movzx esi, word[ebp+0x10]<br>mov edi, dword[sym.imp.USER32.dll_PostMessageW]<br>shl esi, 0x10<br>cmp ebx, 1<br>je 0x40f573<br>movzx ecx, byte[ebp+0xc]<br>mov edx, dword[ebp+0x14]<br>mov eax, esi<br>or eax, 1<br>push eax<br>push ecx<br>push 0x100<br>push edx<br>call edi<br>cmp byte[ebp+0x18], 0<br>je 0x40f591<br>cmp ebx, 2<br>jne 0x40f591<br>mov eax, dword[0x4c28ec]<br>mov ecx, dword[eax+0x64]<br>push ecx<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40f599<br>test ebx, ebx<br>je 0x40f98e<br>movzx edx, byte[ebp+0xc]<br>mov eax, dword[ebp+0x14]<br>or esi, 0xc0000001<br>push esi<br>push edx<br>push 0x101<br>push eax<br>call edi<br>jmp 0x40f98e<br>cmp byte[0x4c6ec4], 0<br>mov ecx, dword[ebp+8]<br>mov dword[0x4c53f8], ecx<br>mov byte[0x4c6eff], al<br>je 0x40f612<br>cmp al, 0x12<br>je 0x40f5d8<br>cmp al, 0xa4<br>je 0x40f5d8<br>cmp al, 0xa5<br>jne 0x40f612<br>cmp byte[esp+0x11], 0<br>jne 0x40f612<br>test byte[0x4c9b80], 1<br>mov byte[esp+0x16], 1<br>jne 0x40f643<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>jmp 0x40f648<br>cmp byte[esp+0x11], 0<br>mov byte[esp+0x16], 0<br>lea esi, [esp+0x24]<br>jne 0x40f627<br>mov esi, 0x4c53f0<br>mov dword[esp+0x18], esi<br>cmp al, 0xa5<br>jne 0x40f65c<br>cmp byte[esp+0x12], 0<br>jne 0x40f65c<br>cmp dword[0x4c65e8], 0<br>je 0x40f65c<br>mov al, 1<br>jmp 0x40f65e<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x40f650<br>push 0<br>call eax<br>mov al, byte[ebp+0xc]<br>mov byte[0x4c6ec4], 0<br>jmp 0x40f622<br>xor al, al<br>mov byte[esp+0x14], al<br>mov byte[esp+0x13], al<br>test al, al<br>je 0x40f6d6<br>cmp byte[esp+0x11], 0<br>jne 0x40f679<br>mov edi, dword[0x4c53f4]<br>jmp 0x40f6a6<br>call dword[sym.imp.USER32.dll_GetForegroundWindow]<br>test eax, eax<br>je 0x40f68e<br>push 0<br>push eax<br>call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]<br>jmp 0x40f690<br>xor eax, eax<br>push eax<br>call dword[sym.imp.USER32.dll_GetKeyboardLayout]<br>mov edi, eax<br>push edi<br>xor eax, eax<br>call fcn.00411f10<br>add esp, 4<br>mov dword[esi], eax<br>cmp dword[esi], 0<br>je 0x40f6b2<br>mov byte[esp+0x13], 0<br>jmp 0x40f6da<br>push 0xa2<br>mov byte[esp+0x19], 0xa2<br>call dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>mov edx, dword[ebp+0x1c]<br>mov dword[0x4c65dc], edx<br>shr eax, 0xf<br>and al, 1<br>mov byte[esp+0x17], al<br>jmp 0x40f6da<br>mov edi, dword[esp+0x24]<br>cmp byte[esp+0x12], 0<br>je 0x40f6f3<br>mov al, byte[ebp+0xc]<br>xor ecx, ecx<br>mov edx, ebx<br>call fcn.00411b10<br>mov byte[esp+0x20], al<br>jmp 0x40f6f8<br>mov byte[esp+0x20], 0<br>cmp byte[esp+0x11], 0<br>jne 0x40f71e<br>mov eax, dword[0x4c7f18]<br>cmp eax, 2<br>je 0x40f71e<br>cmp dword[0x4c65e8], 0<br>je 0x40f717<br>cmp eax, 1<br>jne 0x40f71e<br>mov byte[esp+0x11], 1<br>jmp 0x40f723<br>mov byte[esp+0x11], 0<br>cmp dword[ebp+8], 1<br>mov esi, dword[sym.imp.USER32.dll_keybd_event]<br>mov ebx, dword[esp+0x20]<br>je 0x40f812<br>cmp byte[esp+0x12], 0<br>je 0x40f75d<br>mov eax, dword[ebp+0x1c]<br>mov ecx, dword[esp+0x1c]<br>mov edx, dword[ebp+0x10]<br>push eax<br>mov eax, dword[ebp+0xc]<br>push ecx<br>push edx<br>push eax<br>push ebx<br>call fcn.00410920<br>add esp, 0x14<br>jmp 0x40f7f9<br>cmp byte[esp+0x14], 0<br>je 0x40f776<br>mov ecx, dword[esp+0x18]<br>cmp dword[ecx], 3<br>jne 0x40f776<br>mov edx, dword[ebp+0x1c]<br>mov dword[0x4c65e0], edx<br>mov eax, dword[ebp+0x1c]<br>mov ecx, dword[esp+0x1c]<br>mov edx, dword[ebp+0x10]<br>push eax<br>mov eax, dword[ebp+0xc]<br>push ecx<br>push edx<br>push eax<br>call esi<br>cmp byte[esp+0x13], 0<br>mov dword[0x4c65e0], 0<br>je 0x40f7f9<br>cmp dword[0x4c65dc], 0<br>mov byte[esp+0x13], 0<br>je 0x40f7c5<br>push edi<br>mov eax, 4<br>mov dword[0x4c65dc], 0<br>call fcn.00411f10<br>mov ecx, dword[esp+0x1c]<br>mov dword[ecx], eax<br>jmp 0x40f7f6<br>cmp byte[esp+0x17], 0<br>jne 0x40f7f9<br>movzx edx, byte[esp+0x15]<br>push edx<br>call dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>mov ecx, 0x8000<br>and ax, cx<br>movzx eax, ax<br>neg eax<br>sbb eax, eax<br>add eax, 4<br>push edi<br>call fcn.00411f10<br>mov edx, dword[esp+0x1c]<br>mov dword[edx], eax<br>add esp, 4<br>cmp byte[esp+0x11], 0<br>je 0x40f812<br>mov eax, dword[ebp+0x10]<br>mov ecx, dword[ebp+0xc]<br>push eax<br>push ecx<br>xor dl, dl<br>call fcn.00411010<br>add esp, 8<br>cmp byte[ebp+0x18], 0<br>je 0x40f851<br>mov eax, 2<br>cmp dword[ebp+8], eax<br>jne 0x40f851<br>cmp dword[0x4c7f18], eax<br>jne 0x40f83e<br>mov edx, dword[0x4c28ec]<br>mov eax, dword[edx+0x68]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40f85b<br>mov eax, dword[0x4c28ec]<br>mov eax, dword[eax+0x64]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>jmp 0x40f85b<br>cmp dword[ebp+8], 0<br>je 0x40f945<br>or dword[esp+0x1c], 2<br>cmp byte[esp+0x12], 0<br>je 0x40f889<br>mov ecx, dword[ebp+0x1c]<br>mov edx, dword[esp+0x1c]<br>mov eax, dword[ebp+0x10]<br>push ecx<br>mov ecx, dword[ebp+0xc]<br>push edx<br>push eax<br>push ecx<br>push ebx<br>call fcn.00410920<br>mov ebx, dword[ebp+0x10]<br>add esp, 0x14<br>jmp 0x40f915<br>cmp byte[esp+0x14], 0<br>je 0x40f8a1<br>mov edx, dword[esp+0x18]<br>cmp dword[edx], 3<br>jne 0x40f8a1<br>mov eax, dword[ebp+0x1c]<br>mov dword[0x4c65e4], eax<br>mov ecx, dword[ebp+0x1c]<br>mov edx, dword[esp+0x1c]<br>mov ebx, dword[ebp+0x10]<br>mov eax, dword[ebp+0xc]<br>push ecx<br>push edx<br>push ebx<br>push eax<br>call esi<br>xor eax, eax<br>mov dword[0x4c65e4], eax<br>cmp byte[esp+0x13], al<br>je 0x40f915<br>cmp dword[0x4c65dc], eax<br>je 0x40f8e1<br>mov dword[0x4c65dc], eax<br>push edi<br>mov eax, 4<br>call fcn.00411f10<br>mov ecx, dword[esp+0x1c]<br>mov dword[ecx], eax<br>jmp 0x40f912<br>cmp byte[esp+0x17], al<br>je 0x40f915<br>movzx edx, byte[esp+0x15]<br>push edx<br>call dword[sym.imp.USER32.dll_GetAsyncKeyState]<br>mov ecx, 0x8000<br>test cx, ax<br>mov eax, 0<br>setne al<br>push edi<br>add eax, 3<br>call fcn.00411f10<br>mov edx, dword[esp+0x1c]<br>mov dword[edx], eax<br>add esp, 4<br>mov eax, dword[esp+0x18]<br>cmp dword[eax], 0<br>je 0x40f92f<br>mov ecx, 0x138<br>cmp bx, cx<br>jne 0x40f92f<br>and byte[0x4c53d7], 0xfe<br>cmp byte[esp+0x11], 0<br>je 0x40f945<br>mov edx, dword[ebp+0xc]<br>push ebx<br>push edx<br>mov dl, 1<br>call fcn.00411010<br>add esp, 8<br>cmp byte[esp+0x16], 0<br>je 0x40f98e<br>test byte[0x4c9b80], 1<br>jne 0x40f97a<br>or dword[0x4c9b80], 1<br>push str.BlockInput<br>push str.user32<br>call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]<br>push eax<br>call dword[sym.imp.KERNEL32.dll_GetProcAddress]<br>mov dword[0x4c9b7c], eax<br>jmp 0x40f97f<br>mov eax, dword[0x4c9b7c]<br>test eax, eax<br>je 0x40f987<br>push 1<br>call eax<br>mov byte[0x4c6ec4], 1<br>cmp byte[ebp+0x18], 0<br>je 0x40f9c7<br>cmp dword[0x4c7f18], 2<br>jne 0x40f9b5<br>mov eax, dword[0x4c28ec]<br>mov eax, dword[eax+0x60]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret <br>mov ecx, dword[0x4c28ec]<br>mov eax, dword[ecx+0x5c]<br>push eax<br>call fcn.00410e40<br>add esp, 4<br>pop edi<br>pop esi<br>pop ebx<br>mov esp, ebp<br>pop ebp<br>ret <br><eoc> ', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

sub esp, 0xc
push ebx
push ebp
push esi
mov ebx, ecx
mov ecx, dword[esp+0x1c]
push edi
mov esi, eax
mov edi, edx
mov dword[esp+0x14], 0x7fffffff
cmp ecx, dword[0x4c65ec]
je 0x406e03
mov eax, dword[edi+0x10]
cmp eax, 0xffc3d44f
je 0x406a64
cmp eax, 0xffc3d44e
je 0x406a64
cmp eax, 0xffc3d44d
je 0x406a64
mov ebp, dword[0x4c6eec]
movzx eax, bl
lea eax, [eax+eax*8]
shl eax, 5
mov eax, dword[eax+ebp]
xor ebp, ebp
xor dl, dl
cmp eax, ebp
je 0x406a68
cmp dword[eax], 7
je 0x406a68
mov edx, dword[esp+0x34]
mov eax, dword[esp+0x2c]
push ebp
push 0x7fffffff
push edx
push eax
push esi
push ebx
mov ebx, dword[esp+0x48]
mov eax, edi
call fcn.004068b0
add esp, 0x18
pop edi
pop esi
pop ebp
pop ebx
add esp, 0xc
ret
mov dl, 1
xor ebp, ebp
cmp byte[0x4c6efe], 0
je 0x406a75
test dl, dl
je 0x406a8b
cmp dword[0x4c8600], 1
jne 0x406ade
cmp byte[0x4c862e], 0
je 0x406a8b
test dl, dl
jne 0x406ade
lea ecx, [esp+0x18]
push ecx
mov ecx, dword[esp+0x34]
lea eax, [esp+0x18]
push eax
mov eax, dword[esp+0x34]
push ecx
push eax
push esi
push ebx
push edi
call fcn.00406ed0
add esp, 0x1c
test al, al
jne 0x406ade
mov ecx, dword[esp+0x18]
mov edx, dword[esp+0x14]
mov eax, dword[esp+0x34]
push ecx
mov ecx, dword[esp+0x30]
push edx
push eax
push ecx
mov ecx, dword[esp+0x30]
push esi
push ebx
mov ebx, dword[esp+0x48]
mov eax, edi
call fcn.004068b0
add esp, 0x18
pop edi
pop esi
pop ebp
pop ebx
add esp, 0xc
ret
mov edx, dword[esp+0x2c]
push ebp
push edx
push esi
push ebx
call fcn.004079c0
add esp, 0x10
cmp bl, 0x4c
jne 0x406c00
cmp byte[esp+0x2c], 0
jne 0x406d39
mov al, byte[0x4c64b5]
cmp al, 0x40
je 0x406b17
cmp al, 0x80
je 0x406b17
cmp al, 0xc0
jne 0x406d39
cmp byte[0x4c92ca], 0
je 0x406d39
push 0x100
push ebp
push 0x4c64d8
mov dword[0x4c53c8], ebp
mov byte[0x4c64b7], 0
mov byte[0x4c64b6], 0
mov byte[0x4c64b5], 0
call fcn.00495c20
add esp, 0xc
push ebp
push str.32771
mov byte[0x4c53ce], 0
mov byte[0x4c53cd], 0
mov byte[0x4c53cc], 0
mov byte[0x4c53c7], 0
call dword[sym.imp.USER32.dll_FindWindowW]
test eax, eax
setne al
mov byte[0x4c53c6], al
xor eax, eax
xor ecx, ecx
mov dword[0x4c53a4], eax
mov dword[0x4c53a8], eax
mov dword[0x4c53ac], eax
mov dword[0x4c53b0], eax
mov dword[0x4c53b4], eax
mov word[0x4c53b8], ax
mov word[0x4c5208], cx
mov dword[0x4c5204], ebp
call dword[sym.imp.USER32.dll_GetForegroundWindow]
xor edx, edx
mov dword[0x4c5200], eax
mov byte[0x4c53c3], 0
mov byte[0x4c53c2], 0
mov word[0x4c53c4], dx
mov byte[0x4c53c1], dl
mov byte[0x4c53c0], dl
mov dword[0x4c53bc], ebp
mov byte[0x4c53bb], dl
mov byte[0x4c53ba], dl
mov byte[0x4c52c7], dl
jmp 0x406d39
cmp bl, 0x2e
je 0x406c0e
cmp bl, 0x6e
jne 0x406d10
cmp byte[esp+0x2c], 0
jne 0x406d10
mov al, byte[0x4c64b7]
test al, 3
je 0x406d10
test al, 0xc
je 0x406d10
test al, 0x30
jne 0x406d10
push 0x100
push ebp
push 0x4c64d8
mov dword[0x4c53c8], ebp
mov byte[0x4c64b7], 0
mov byte[0x4c64b6], 0
mov byte[0x4c64b5], 0
call fcn.00495c20
add esp, 0xc
push ebp
push str.32771
mov byte[0x4c53ce], 0
mov byte[0x4c53cd], 0
mov byte[0x4c53cc], 0
mov byte[0x4c53c7], 0
call dword[sym.imp.USER32.dll_FindWindowW]
test eax, eax
setne al
mov byte[0x4c53c6], al
xor eax, eax
xor ecx, ecx
mov dword[0x4c53a4], eax
mov dword[0x4c53a8], eax
mov dword[0x4c53ac], eax
mov dword[0x4c53b0], eax
mov dword[0x4c53b4], eax
mov word[0x4c53b8], ax
mov word[0x4c5208], cx
mov dword[0x4c5204], ebp
call dword[sym.imp.USER32.dll_GetForegroundWindow]
xor edx, edx
mov dword[0x4c5200], eax
mov byte[0x4c53c3], 0
mov byte[0x4c53c2], 0
mov word[0x4c53c4], dx
mov byte[0x4c53c1], dl
mov byte[0x4c53c0], dl
mov dword[0x4c53bc], ebp
mov byte[0x4c53bb], dl
mov byte[0x4c53ba], dl
mov byte[0x4c52c7], dl
lea esp, [esp]
cmp bl, 9
jne 0x406d39
cmp byte[esp+0x2c], 0
jne 0x406d39
cmp byte[0x4c53c6], 0
jne 0x406d39
mov al, byte[0x4c64b5]
test al, 0xc
je 0x406d39
test al, 3
jne 0x406d39
mov byte[0x4c53c6], 1
mov ecx, dword[0x4c6eec]
movzx eax, bl
lea eax, [eax+eax*8]
shl eax, 5
cmp byte[eax+ecx+4], 0
je 0x406e05
cmp byte[0x4c53c6], 0
je 0x406d92
cmp byte[esp+0x2c], 0
je 0x406d74
cmp bl, 0xa4
je 0x406d79
cmp bl, 0xa5
je 0x406d79
cmp bl, 0x12
je 0x406d79
jmp 0x406d92
cmp bl, 0x1b
jne 0x406d92
mov edx, dword[esp+0x30]
movzx eax, word[edx+4]
cmp eax, 0x68
je 0x406d92
cmp eax, 0x73
je 0x406d92
mov byte[0x4c53c6], 0
cmp bl, 0x5b
je 0x406da1
mov byte[esp+0x13], 0
cmp bl, 0x5c
jne 0x406da6
mov byte[esp+0x13], 1
cmp byte[esp+0x38], 0
je 0x406e05
cmp byte[esp+0x2c], 0
je 0x406e05
cmp byte[esp+0x13], 0
jne 0x406dd3
cmp bl, 0x12
je 0x406dd3
cmp bl, 0xa4
je 0x406dd3
cmp bl, 0xa5
jne 0x406e05
call fcn.00411ed0
test al, al
jne 0x406e05
mov al, byte[0x4c64b5]
test al, 3
jne 0x406e05
cmp byte[esp+0x13], 0
je 0x406de7
test al, 0x3c
jne 0x406e05
movzx eax, byte[0x4c2385]
push 0xffc3d44d
push ebp
push ebp
push ebp
push eax
push 2
call fcn.0040f3b0
add esp, 0x18
jmp 0x406e05
xor ebp, ebp
cmp byte[0x4c28e2], 0
je 0x406e27
cmp bl, 1
je 0x406e18
cmp bl, 2
jne 0x406e27
xor ecx, ecx
mov word[0x4c5208], cx
mov dword[0x4c5204], ebp
mov edx, dword[esp+0x28]
mov eax, dword[esp+0x24]
mov ecx, dword[esp+0x20]
push edi
push edx
push eax
push ecx
call dword[sym.imp.USER32.dll_CallNextHookEx]
mov ebx, dword[esp+0x34]
mov esi, dword[sym.imp.USER32.dll_PostMessageW]
mov edi, eax
cmp ebx, 0x3fff
je 0x406e9c
mov ebp, dword[esp+0x30]
movzx edx, word[ebp+2]
mov eax, dword[0x4c64b8]
push edx
push ebx
push 0x400
push eax
call esi
cmp byte[esp+0x2c], 0
je 0x406e9c
mov ecx, dword[0x4c6ee8]
and ebx, 0x3fff
movzx eax, word[ecx+ebx*2]
mov edx, 0x3fff
cmp ax, dx
je 0x406e9c
movzx ecx, word[ebp+2]
push ecx
push eax
mov eax, dword[0x4c64b8]
push 0x400
push eax
call esi
mov eax, dword[esp+0x14]
cmp eax, 0x7fffffff
je 0x406ebb
mov ecx, dword[esp+0x18]
mov edx, dword[0x4c64b8]
push ecx
push eax
push 0x401
push edx
call esi
mov eax, edi
pop edi
pop esi
pop ebp
pop ebx
add esp, 0xc
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f