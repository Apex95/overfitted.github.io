---
layout: post
title:  "fcn.0041fd5c @ 3aa98225e51cbcae2d334c8b6b4ed9fd"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0041fd5c
- **Origin (md5):** 3aa98225e51cbcae2d334c8b6b4ed9fd
- **VirusTotal:** [virustotal.com/gui/file/3aa98225e51cbcae2d334c8b6b4ed9fd][virustotal_ref]

# Code Tags
<span class="tag" id="FILE">FILE</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [2.7450942993164062, -40.97763442993164, '<b><a href="/report/fcn.0041fd5c@3aa98225e51cbcae2d334c8b6b4ed9fd">fcn.0041fd5c</a><br>@3aa98225e51cbcae2d334c8b6b4ed9fd</b><br>', 'point { fill-color: #e0440e; }'],
[-80.21086120605469, -4.81144380569458, '<b><a href="/report/fcn.004fe554@e2ba7f10eb234338a49853c34d7d9c56">fcn.004fe554</a><br>@e2ba7f10eb234338a49853c34d7d9c56</b><br>', 'null'],
[120.84003448486328, -10.324236869812012, '<b><a href="/report/fcn.101109f6@89dc67d2f980e8488f97b1bf8cb24258">fcn.101109f6</a><br>@89dc67d2f980e8488f97b1bf8cb24258</b><br>', 'null'],
[-26.283323287963867, 5.1109185218811035, '<b><a href="/report/fcn.0041fd5c@3d7f25d788af3e7f7707a736ac852465">fcn.0041fd5c</a><br>@3d7f25d788af3e7f7707a736ac852465</b><br>', 'null'],
[-113.888916015625, -48.1322135925293, '<b><a href="/report/fcn.0041fd5c@e83552e81a6f265fd7baa50402d3d47d">fcn.0041fd5c</a><br>@e83552e81a6f265fd7baa50402d3d47d</b><br>', 'null'],
[-46.25398254394531, -121.70018768310547, '<b><a href="/report/fcn.00499a34@4fe6510221c33bf023f6abed461fc13f">fcn.00499a34</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>', 'null'],
[1.9322309494018555, -95.6419906616211, '<b><a href="/report/fcn.0041fd5c@7307643b343733b7fbd7b4b4fb482515">fcn.0041fd5c</a><br>@7307643b343733b7fbd7b4b4fb482515</b><br>', 'null'],
[-97.18173217773438, -100.99517059326172, '<b><a href="/report/fcn.0041fd5c@9571c7458fae91969aaed3955e433f49">fcn.0041fd5c</a><br>@9571c7458fae91969aaed3955e433f49</b><br>', 'null'],
[127.69672393798828, -61.429481506347656, '<b><a href="/report/fcn.00575f48@c60344b51fa39a329b92557d24ff7670">fcn.00575f48</a><br>@c60344b51fa39a329b92557d24ff7670</b><br>', 'null'],
[-52.12971878051758, -58.95192337036133, '<b><a href="/report/fcn.004200bc@96a869ae624ddb4834a1d5a829f85469">fcn.004200bc</a><br>@96a869ae624ddb4834a1d5a829f85469</b><br>', 'null'],
[167.1658935546875, -30.0894832611084, '<b><a href="/report/fcn.004a50c8@279a61b1e76da49531f1f16fd1102a2d">fcn.004a50c8</a><br>@279a61b1e76da49531f1f16fd1102a2d</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

mov edi, edi
push ebp
mov ebp, esp
sub esp, 0x1c
mov edx, dword[ebp+0x10]
push esi
mov esi, dword[ebp+8]
push 0xfffffffffffffffe
pop eax
mov dword[ebp-0x14], eax
mov dword[ebp-0x1c], edx
cmp esi, eax
jne off.b55
call fcn.00414b0a
and dword[eax], 0
call fcn.00414af7
mov dword[eax], 9
or eax, 0xffffffff
jmp off.b1460
push ebx
xor ebx, ebx
cmp esi, ebx
jl off.b70
cmp esi, dword[0x479788]
jb off.b101
call fcn.00414b0a
mov dword[eax], ebx
call fcn.00414af7
mov dword[eax], 9
call fcn.00414aa5
or eax, 0xffffffff
jmp off.b1459
mov eax, esi
sar eax, 5
push edi
and esi, 0x1f
lea edi, [eax*4+0x4797a0]
mov eax, dword[edi]
shl esi, 6
mov cl, byte[eax+esi+4]
test cl, 1
jne off.b151
call fcn.00414b0a
mov dword[eax], ebx
call fcn.00414af7
mov dword[eax], 9
jmp off.b255
cmp edx, 0x7fffffff
ja off.b237
mov dword[ebp-0xc], ebx
cmp edx, ebx
je off.b1456
test cl, 2
jne off.b1456
cmp dword[ebp+0xc], ebx
je off.b237
mov al, byte[eax+esi+0x24]
add al, al
sar al, 1
mov byte[ebp-2], al
movsx eax, al
dec eax
push 4
pop ecx
je off.b229
dec eax
jne off.b221
mov eax, edx
not eax
test al, 1
je off.b237
and edx, 0xfffffffe
mov dword[ebp+0x10], edx
mov ebx, dword[ebp+0xc]
mov dword[ebp-0x10], ebx
jmp off.b351
mov eax, edx
not eax
test al, 1
jne off.b262
call fcn.00414b0a
mov dword[eax], ebx
call fcn.00414af7
mov dword[eax], 0x16
call fcn.00414aa5
jmp off.b316
mov eax, edx
shr eax, 1
mov dword[ebp+0x10], ecx
cmp eax, ecx
jb off.b276
mov dword[ebp+0x10], eax
push dword[ebp+0x10]
call fcn.00414412
mov ebx, eax
pop ecx
mov dword[ebp-0x10], ebx
test ebx, ebx
jne off.b324
call fcn.00414af7
mov dword[eax], 0xc
call fcn.00414b0a
mov dword[eax], 8
or eax, 0xffffffff
jmp off.b1458
push 1
push 0
push 0
push dword[ebp+8]
call fcn.0041c015
mov ecx, dword[edi]
mov dword[esi+ecx+0x28], eax
add esp, 0x10
mov dword[esi+ecx+0x2c], edx
mov ecx, dword[edi]
add ecx, esi
test byte[ecx+4], 0x48
mov eax, ebx
je off.b485
mov cl, byte[ecx+5]
cmp cl, 0xa
je off.b485
cmp dword[ebp+0x10], 0
je off.b485
dec dword[ebp+0x10]
cmp byte[ebp-2], 0
mov byte[ebx], cl
mov ecx, dword[edi]
lea eax, [ebx+1]
mov dword[ebp-0xc], 1
mov byte[esi+ecx+5], 0xa
je off.b485
mov ecx, dword[edi]
mov cl, byte[esi+ecx+0x25]
cmp cl, 0xa
je off.b485
cmp dword[ebp+0x10], 0
je off.b485
mov byte[eax], cl
mov ecx, dword[edi]
inc eax
dec dword[ebp+0x10]
cmp byte[ebp-2], 1
mov dword[ebp-0xc], 2
mov byte[esi+ecx+0x25], 0xa
jne off.b485
mov ecx, dword[edi]
mov cl, byte[esi+ecx+0x26]
cmp cl, 0xa
je off.b485
cmp dword[ebp+0x10], 0
je off.b485
mov byte[eax], cl
mov ecx, dword[edi]
inc eax
dec dword[ebp+0x10]
mov dword[ebp-0xc], 3
mov byte[esi+ecx+0x26], 0xa
push 0
lea ecx, [ebp-0x18]
push ecx
push dword[ebp+0x10]
push eax
mov eax, dword[edi]
push dword[esi+eax]
call dword[sym.imp.KERNEL32.dll_ReadFile]
test eax, eax
je off.b1402
mov ecx, dword[ebp-0x18]
test ecx, ecx
js off.b1402
cmp ecx, dword[ebp+0x10]
ja off.b1402
mov eax, dword[edi]
add dword[ebp-0xc], ecx
lea eax, [esi+eax+4]
test byte[eax], 0x80
je off.b1036
cmp byte[ebp-2], 2
je off.b1094
test ecx, ecx
je off.b576
cmp byte[ebx], 0xa
jne off.b576
or byte[eax], 4
jmp off.b579
and byte[eax], 0xfb
mov ebx, dword[ebp-0x10]
mov eax, dword[ebp-0xc]
add eax, ebx
mov dword[ebp+0x10], ebx
mov dword[ebp-0xc], eax
cmp ebx, eax
jae off.b810
mov ecx, dword[ebp+0x10]
mov al, byte[ecx]
cmp al, 0x1a
je off.b789
cmp al, 0xd
je off.b630
mov byte[ebx], al
inc ebx
inc ecx
mov dword[ebp+0x10], ecx
jmp off.b775
mov eax, dword[ebp-0xc]
dec eax
cmp ecx, eax
jae off.b662
lea eax, [ecx+1]
cmp byte[eax], 0xa
jne off.b657
add ecx, 2
mov dword[ebp+0x10], ecx
mov byte[ebx], 0xa
jmp off.b774
mov dword[ebp+0x10], eax
jmp off.b771
inc dword[ebp+0x10]
push 0
lea eax, [ebp-0x18]
push eax
push 1
lea eax, [ebp-1]
push eax
mov eax, dword[edi]
push dword[esi+eax]
call dword[sym.imp.KERNEL32.dll_ReadFile]
test eax, eax
jne off.b702
call dword[sym.imp.KERNEL32.dll_GetLastError]
test eax, eax
jne off.b771
cmp dword[ebp-0x18], 0
je off.b771
mov eax, dword[edi]
test byte[esi+eax+4], 0x48
je off.b737
cmp byte[ebp-1], 0xa
je off.b652
mov byte[ebx], 0xd
mov eax, dword[edi]
mov cl, byte[ebp-1]
mov byte[esi+eax+5], cl
jmp off.b774
cmp ebx, dword[ebp-0x10]
jne off.b748
cmp byte[ebp-1], 0xa
je off.b652
push 1
push 0xffffffffffffffff
push 0xffffffffffffffff
push dword[ebp+8]
call fcn.0041c015
add esp, 0x10
cmp byte[ebp-1], 0xa
je off.b775
mov byte[ebx], 0xd
inc ebx
mov eax, dword[ebp-0xc]
cmp dword[ebp+0x10], eax
jb off.b601
jmp off.b810
mov eax, dword[edi]
lea eax, [esi+eax+4]
test byte[eax], 0x40
jne off.b805
or byte[eax], 2
jmp off.b810
mov al, byte[ecx]
mov byte[ebx], al
inc ebx
mov eax, ebx
sub eax, dword[ebp-0x10]
cmp byte[ebp-2], 1
mov dword[ebp-0xc], eax
jne off.b1036
test eax, eax
je off.b1036
dec ebx
mov cl, byte[ebx]
test cl, cl
js off.b849
inc ebx
jmp off.b983
xor eax, eax
inc eax
movzx ecx, cl
jmp off.b872
cmp eax, 4
jg off.b881
cmp ebx, dword[ebp-0x10]
jb off.b881
dec ebx
movzx ecx, byte[ebx]
inc eax
cmp byte[ecx+0x475e20], 0
je off.b857
mov dl, byte[ebx]
movzx ecx, dl
movsx ecx, byte[ecx+0x475e20]
test ecx, ecx
jne off.b910
call fcn.00414af7
mov dword[eax], 0x2a
jmp off.b1032
inc ecx
cmp ecx, eax
jne off.b919
add ebx, eax
jmp off.b983
mov ecx, dword[edi]
test byte[ecx+esi+4], 0x48
je off.b965
inc ebx
mov byte[ecx+esi+5], dl
cmp eax, 2
jl off.b947
mov dl, byte[ebx]
mov ecx, dword[edi]
mov byte[esi+ecx+0x25], dl
inc ebx
cmp eax, 3
jne off.b961
mov dl, byte[ebx]
mov ecx, dword[edi]
mov byte[esi+ecx+0x26], dl
inc ebx
sub ebx, eax
jmp off.b983
neg eax
cdq
push 1
push edx
push eax
push dword[ebp+8]
call fcn.0041c015
add esp, 0x10
mov eax, dword[ebp-0x1c]
sub ebx, dword[ebp-0x10]
shr eax, 1
push eax
push dword[ebp+0xc]
push ebx
push dword[ebp-0x10]
push 0
push 0xfde9
call dword[sym.imp.KERNEL32.dll_MultiByteToWideChar]
mov dword[ebp-0xc], eax
test eax, eax
jne off.b1071
call dword[sym.imp.KERNEL32.dll_GetLastError]
push eax
call fcn.00414b1d
pop ecx
or dword[ebp-0x14], 0xffffffff
mov eax, dword[ebp-0x10]
cmp eax, dword[ebp+0xc]
je off.b1051
push eax
call fcn.00412cdc
pop ecx
mov eax, dword[ebp-0x14]
cmp eax, 0xfffffffe
jne off.b1458
mov eax, dword[ebp-0xc]
jmp off.b1458
mov eax, dword[ebp-0xc]
mov edx, dword[edi]
xor ecx, ecx
cmp eax, ebx
setne cl
add eax, eax
mov dword[ebp-0xc], eax
mov dword[esi+edx+0x30], ecx
jmp off.b1036
test ecx, ecx
je off.b1109
cmp word[ebx], 0xa
jne off.b1109
or byte[eax], 4
jmp off.b1112
and byte[eax], 0xfb
mov ebx, dword[ebp-0x10]
mov eax, dword[ebp-0xc]
add eax, ebx
mov dword[ebp+0x10], ebx
mov dword[ebp-0xc], eax
cmp ebx, eax
jae off.b1391
mov eax, dword[ebp+0x10]
movzx ecx, word[eax]
cmp ecx, 0x1a
je off.b1366
cmp ecx, 0xd
je off.b1171
mov word[ebx], cx
add ebx, 2
add eax, 2
mov dword[ebp+0x10], eax
jmp off.b1352
mov ecx, dword[ebp-0xc]
add ecx, 0xfffffffe
cmp eax, ecx
jae off.b1211
lea ecx, [eax+2]
cmp word[ecx], 0xa
jne off.b1203
add eax, 4
mov dword[ebp+0x10], eax
push 0xa
jmp off.b1345
mov dword[ebp+0x10], ecx
jmp off.b1343
add dword[ebp+0x10], 2
push 0
lea eax, [ebp-0x18]
push eax
push 2
lea eax, [ebp-8]
push eax
mov eax, dword[edi]
push dword[esi+eax]
call dword[sym.imp.KERNEL32.dll_ReadFile]
test eax, eax
jne off.b1252
call dword[sym.imp.KERNEL32.dll_GetLastError]
test eax, eax
jne off.b1343
cmp dword[ebp-0x18], 0
je off.b1343
mov eax, dword[edi]
test byte[esi+eax+4], 0x48
je off.b1307
cmp word[ebp-8], 0xa
je off.b1196
push 0xd
pop eax
mov word[ebx], ax
mov eax, dword[edi]
mov cl, byte[ebp-8]
mov byte[esi+eax+5], cl
mov eax, dword[edi]
mov cl, byte[ebp-7]
mov byte[esi+eax+0x25], cl
mov eax, dword[edi]
mov byte[esi+eax+0x26], 0xa
jmp off.b1349
cmp ebx, dword[ebp-0x10]
jne off.b1319
cmp word[ebp-8], 0xa
je off.b1196
push 1
push 0xffffffffffffffff
push 0xfffffffffffffffe
push dword[ebp+8]
call fcn.0041c015
add esp, 0x10
cmp word[ebp-8], 0xa
je off.b1352
push 0xd
pop eax
mov word[ebx], ax
add ebx, 2
mov eax, dword[ebp-0xc]
cmp dword[ebp+0x10], eax
jb off.b1134
jmp off.b1391
mov ecx, dword[edi]
lea esi, [esi+ecx+4]
test byte[esi], 0x40
jne off.b1382
or byte[esi], 2
jmp off.b1391
mov ax, word[eax]
mov word[ebx], ax
add ebx, 2
sub ebx, dword[ebp-0x10]
mov dword[ebp-0xc], ebx
jmp off.b1036
call dword[sym.imp.KERNEL32.dll_GetLastError]
push 5
pop esi
cmp eax, esi
jne off.b1438
call fcn.00414af7
mov dword[eax], 9
call fcn.00414b0a
mov dword[eax], esi
jmp off.b1032
cmp eax, 0x6d
jne off.b1025
and dword[ebp-0x14], 0
jmp off.b1036
xor eax, eax
pop edi
pop ebx
pop esi
leave
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/3aa98225e51cbcae2d334c8b6b4ed9fd