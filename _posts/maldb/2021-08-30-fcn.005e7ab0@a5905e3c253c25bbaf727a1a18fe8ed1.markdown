---
layout: post
title:  "fcn.005e7ab0 @ a5905e3c253c25bbaf727a1a18fe8ed1"
date:   2021-08-30 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.005e7ab0
- **Origin (md5):** a5905e3c253c25bbaf727a1a18fe8ed1
- **VirusTotal:** [virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1][virustotal_ref]

# Code Tags
<span class="tag" id="SOCKET">SOCKET</span>
<span class="tag" id="THREAD">THREAD</span>


# Similar Functions

1. [fcn.005e56b0][similar_1_ref] (sim.: 0.9576707184469968)
2. [fcn.005cbe30][similar_2_ref] (sim.: 0.9545899853377972)
3. [fcn.005ba960][similar_3_ref] (sim.: 0.9461289035191539)
4. [fcn.00671da0][similar_4_ref] (sim.: 0.9449238067606567)
5. [fcn.0069ed20][similar_5_ref] (sim.: 0.9434387149348713)


# Disassembled Code

{% highlight nasm %}
push r15
push r14
push r13
push r12
push rbp
push rdi
push rsi
push rbx
sub rsp,0x98
mov rcx,qword[0x00a7d790]
call fcn.006362d0
mov rcx,qword[0x00a7d760]
call fcn.006870a0
mov rsi,qword[0x00a7d720]
mov rbx,qword[sym.imp.KERNEL32.dll_ReleaseSemaphore]
mov eax,dword[rsi+0xcc]
mov byte[rsi+0xc8],1
test eax,eax
je 0x5e7b0b
mov rcx,qword[rsi+0xc0]
xor r8d,r8d
mov edx,1
call rbx
mov rcx,qword[rsi+0xc0]
xor r8d,r8d
mov edx,1
call rbx
mov rcx,qword[rsi+0x68]
lea rbp,[rsi+0x178]
cmp rcx,0xffffffffffffffff
je 0x5e7b4a
mov edx,0xffffffff
call qword[sym.imp.KERNEL32.dll_WaitForSingleObject]
mov rcx,qword[rsi+0x68]
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov qword[rsi+0x68],0xffffffffffffffff
mov rax,qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
lea r12,[rbp+4]
mov qword[rsp+0x38],rax
call rax
mov r13d,eax
xor eax,eax
lock cmpxchg dword[r12],eax
cmp r13d,eax
je 0x5e8d8c
lea rdi,[rbp+8]
mov ebx,dword[rbp+8]
jmp 0x5e7b82
mov ebx,eax
mov edx,ebx
mov r8d,ebx
mov rcx,rdi
or edx,0x80000000
call fcn.008eebc0
cmp ebx,eax
jne 0x5e7b80
test ebx,ebx
js 0x5e8eea
xchg dword[r12],r13d
mov dword[rbp],1
lea rcx,[rsi+0x100]
call fcn.0060e990
mov eax,dword[rbp]
sub eax,1
test eax,eax
mov dword[rbp],eax
je 0x5e8e27
mov rcx,qword[0x00a7d830]
call fcn.0067de20
mov rcx,qword[0x00a7d860]
call fcn.005d8db0
mov rcx,qword[0x00a7d730]
call fcn.00615580
mov rcx,qword[0x00a7d7d0]
mov edx,2
call fcn.0061d9d0
mov rcx,qword[0x00a7d700]
call fcn.0060b270
mov rbx,qword[0x00b3d0b0]
mov rsi,qword[sym.imp.KERNEL32.dll_Sleep]
jmp 0x5e7c27
mov ecx,0x64
call rsi
mov eax,dword[rbx]
test eax,eax
jg 0x5e7c20
mov rcx,qword[0x00a7d7f0]
call fcn.005f9860
mov rcx,qword[0x00a7d7c0]
call fcn.006b00c0
mov rcx,qword[0x00a7d740]
mov edx,1
call fcn.0063f9c0
mov rcx,qword[0x00a7d770]
call fcn.005d0d40
lea rax,[rsp+0x50]
mov rdi,qword[0x00a7d820]
mov qword[rsp+0x28],rax
lea rax,[rsp+0x60]
mov qword[rsp+0x50],rax
mov rax,qword[0x00b3d230]
mov rsi,qword[rax+0x20]
mov rbx,qword[rax+0x28]
mov rax,rsi
add rax,rbx
je 0x5e7ca5
test rsi,rsi
jne 0x5e7ca5
lea rcx,[0x00aabc60]
call fcn.00a4f4e0
cmp rbx,0xf
mov qword[rsp+0x48],rbx
ja 0x5e8d4e
cmp rbx,1
je 0x5e8dfe
mov rax,qword[rsp+0x28]
add rax,0x10
test rbx,rbx
jne 0x5e8d6f
mov qword[rsp+0x58],rbx
mov byte[rax+rbx],0
movabs rax,0x7fffffffffffffff
sub rax,qword[rsp+0x58]
cmp rax,0xd
jbe 0x5e91e1
mov rsi,qword[rsp+0x28]
lea rdx,[0x00aabc9f]
mov r8d,0xe
mov rcx,rsi
call fcn.00a2de80
mov rdx,rsi
mov rcx,rdi
call fcn.00653920
mov rax,qword[rsp+0x28]
mov rcx,qword[rsp+0x50]
add rax,0x10
cmp rcx,rax
je 0x5e7d2f
call fcn.00a5af30
call fcn.0062cb90
mov rcx,qword[0x00a7d790]
test rcx,rcx
je 0x5e7d46
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d7c0]
mov qword[0x00a7d790],0
test rcx,rcx
je 0x5e7d63
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d850]
mov qword[0x00a7d7c0],0
test rcx,rcx
je 0x5e7d80
mov rax,qword[rcx]
call qword[rax+8]
mov rbx,qword[0x00a7d700]
mov qword[0x00a7d850],0
test rbx,rbx
je 0x5e7e01
mov rax,qword[rbx]
lea rdx,[0x00928d60]
mov rax,qword[rax+8]
cmp rax,rdx
jne 0x5e8eb2
mov rsi,qword[rbx+0x10]
lea rax,[0x00b6e9f0]
mov qword[rbx],rax
test rsi,rsi
je 0x5e7dd6
mov rcx,rsi
call fcn.00607540
mov edx,0x78
mov rcx,rsi
call fcn.00a5af40
mov rsi,qword[rbx+8]
test rsi,rsi
je 0x5e7df4
mov rcx,rsi
call fcn.00607540
mov edx,0x78
mov rcx,rsi
call fcn.00a5af40
mov edx,0x18
mov rcx,rbx
call fcn.00a5af40
mov rsi,qword[0x00a7d7d0]
mov qword[0x00a7d700],0
test rsi,rsi
je 0x5e7f3b
mov rax,qword[rsi]
lea rdx,[0x009316a0]
mov rax,qword[rax+8]
cmp rax,rdx
jne 0x5e8ea8
mov rax,qword[0x00b3dcc0]
mov rcx,qword[rsi+0x68]
lea rdx,[rax+0x10]
mov qword[rsi],rdx
lea rdx,[rax+0x40]
add rax,0x68
test rcx,rcx
mov qword[rsi+0x20],rax
mov qword[rsi+8],rdx
je 0x5e7e60
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[rsi+0x60]
test rcx,rcx
je 0x5e7e6f
mov rax,qword[rcx]
call qword[rax+8]
mov rdi,qword[rsi+0x48]
mov rbx,qword[rsi+0x40]
cmp rdi,rbx
je 0x5e7eb6
nop dword[rax]
mov rax,qword[rbx+0x30]
test rax,rax
je 0x5e7e98
lea rcx,[rbx+0x20]
mov r8d,3
mov rdx,rcx
call rax
mov rcx,qword[rbx]
lea rax,[rbx+0x10]
cmp rcx,rax
je 0x5e7ea9
call fcn.00a5af30
add rbx,0x40
cmp rdi,rbx
jne 0x5e7e80
mov rbx,qword[rsi+0x40]
test rbx,rbx
je 0x5e7ec3
mov rcx,rbx
call fcn.00a5af30
mov rdi,qword[rsi+0x30]
mov rbx,qword[rsi+0x28]
cmp rdi,rbx
je 0x5e7f06
mov rax,qword[rbx+0x30]
test rax,rax
je 0x5e7ee8
lea rcx,[rbx+0x20]
mov r8d,3
mov rdx,rcx
call rax
mov rcx,qword[rbx]
lea rax,[rbx+0x10]
cmp rcx,rax
je 0x5e7ef9
call fcn.00a5af30
add rbx,0x40
cmp rdi,rbx
jne 0x5e7ed0
mov rbx,qword[rsi+0x28]
test rbx,rbx
je 0x5e7f13
mov rcx,rbx
call fcn.00a5af30
mov rcx,qword[rsi+0x10]
lea rax,[0x00b70f00]
mov qword[rsi+8],rax
cmp rcx,0xffffffffffffffff
je 0x5e7f2e
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov edx,0x78
mov rcx,rsi
call fcn.00a5af40
mov rbx,qword[0x00a7d870]
mov qword[0x00a7d7d0],0
test rbx,rbx
je 0x5e809d
mov rax,qword[rbx]
lea rdx,[0x00935900]
mov rax,qword[rax+8]
cmp rax,rdx
jne 0x5e8e9e
lea rax,[0x00b706e0]
xor ecx,ecx
mov qword[rbx],rax
lea rax,[0x00b70700]
mov qword[rbx+8],rax
xchg qword[rbx+0xe8],rcx
test rcx,rcx
je 0x5e7f96
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rsi,qword[rbx+0xb0]
lea rdi,[0x00aabdb0]
test rsi,rsi
je 0x5e7fe7
mov eax,dword[rsi+0x10]
mov rbp,qword[rsi]
cdq
xor eax,edx
cmp eax,0x13
ja case.0x5e7fbe.3
movsxd rax,dword[rdi+rax*4]
add rax,rdi
jmp rax
call sub.msvcrt.dll_abort
mov rcx,qword[rsi+0x18]
lea rax,[rsi+0x28]
cmp rcx,rax
je case.0x5e7fbe.0
call fcn.00a5af30
mov rcx,rsi
mov rsi,rbp
call fcn.00a5af30
test rbp,rbp
jne 0x5e7fa9
mov r8,qword[rbx+0xa8]
mov rcx,qword[rbx+0xa0]
xor edx,edx
shl r8,3
call sub.msvcrt.dll_memset
mov rcx,qword[rbx+0xa0]
lea rax,[rbx+0xd0]
mov qword[rbx+0xb8],0
mov qword[rbx+0xb0],0
cmp rcx,rax
je 0x5e802e
call fcn.00a5af30
mov rcx,qword[rbx+0x80]
lea rax,[rbx+0x90]
cmp rcx,rax
je 0x5e8046
call fcn.00a5af30
mov rcx,qword[rbx+0x60]
lea rax,[rbx+0x70]
cmp rcx,rax
je 0x5e8058
call fcn.00a5af30
lea rax,[0x00b71310]
xor ecx,ecx
mov qword[rbx+8],rax
xchg qword[rbx+0x50],rcx
test rcx,rcx
je 0x5e8074
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,qword[rbx+0x28]
test rcx,rcx
je 0x5e8082
call fcn.00a5af30
mov rcx,qword[rbx+0x10]
test rcx,rcx
je 0x5e8090
call fcn.00a5af30
mov edx,0xf0
mov rcx,rbx
call fcn.00a5af40
mov rcx,qword[0x00a7d840]
mov qword[0x00a7d870],0
test rcx,rcx
je 0x5e80ba
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d800]
mov qword[0x00a7d840],0
test rcx,rcx
je 0x5e80d7
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d730]
mov qword[0x00a7d800],0
test rcx,rcx
je 0x5e80f4
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d750]
mov qword[0x00a7d730],0
test rcx,rcx
je 0x5e8111
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d780]
mov qword[0x00a7d750],0
test rcx,rcx
je 0x5e812e
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d830]
mov qword[0x00a7d780],0
test rcx,rcx
je 0x5e814b
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d7e0]
mov qword[0x00a7d830],0
test rcx,rcx
je 0x5e8168
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d7b0]
mov qword[0x00a7d7e0],0
test rcx,rcx
je 0x5e8185
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d740]
mov qword[0x00a7d7b0],0
test rcx,rcx
je 0x5e81a2
mov rax,qword[rcx]
call qword[rax+8]
mov rdi,qword[0x00a7d860]
mov qword[0x00a7d740],0
test rdi,rdi
je 0x5e876f
mov rax,qword[rdi]
lea rdx,[0x00934e40]
mov rax,qword[rax+8]
cmp rax,rdx
jne 0x5e8ec5
mov rax,qword[0x00b3dd10]
mov rcx,rdi
lea rdx,[rax+0x10]
mov qword[rdi],rdx
lea rdx,[rax+0x98]
mov qword[rdi+8],rdx
lea rdx,[rax+0xb8]
add rax,0xe8
mov qword[rdi+0x60],rax
mov qword[rdi+0x58],rdx
call fcn.005d8db0
mov rbx,qword[rdi+0x1e8]
test rbx,rbx
je 0x5e8317
mov rax,qword[rbx]
lea rdx,[0x00934c60]
mov rax,qword[rax+8]
cmp rax,rdx
jne 0x5e8e13
mov rax,qword[0x00b3dd00]
mov rcx,qword[rbx+8]
mov byte[rbx+0xc1],1
add rax,0x10
cmp rcx,0xffffffffffffffff
mov qword[rbx],rax
je 0x5e826d
mov edx,0xffffffff
call qword[sym.imp.KERNEL32.dll_WaitForSingleObject]
mov rcx,qword[rbx+8]
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov qword[rbx+8],0xffffffffffffffff
mov rcx,qword[rbx+0xa0]
lea rax,[rbx+0xb0]
cmp rcx,rax
je 0x5e8285
call fcn.00a5af30
mov rax,qword[0x00b3dd30]
lea rcx,[rbx+0x90]
mov rdx,0xffffffffffffffff
add rax,0x10
mov qword[rbx+0x18],rax
call fcn.006708a0
lea rcx,[rbx+0x88]
mov rdx,0xffffffffffffffff
call fcn.006708a0
mov rcx,qword[rbx+0x60]
lea rax,[rbx+0x70]
cmp rcx,rax
je 0x5e82cc
call fcn.00a5af30
mov rcx,qword[rbx+0x40]
lea rax,[rbx+0x50]
cmp rcx,rax
je 0x5e82de
call fcn.00a5af30
mov rcx,qword[rbx+0x20]
lea rax,[rbx+0x30]
cmp rcx,rax
je 0x5e82f0
call fcn.00a5af30
mov rcx,qword[rbx+8]
lea rax,[0x00b70f00]
mov qword[rbx],rax
cmp rcx,0xffffffffffffffff
je 0x5e830a
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov edx,0xc8
mov rcx,rbx
call fcn.00a5af40
mov rbx,qword[rdi+0x1e0]
test rbx,rbx
je 0x5e8424
mov rax,qword[rbx]
lea rdx,[0x00934c60]
mov rax,qword[rax+8]
cmp rax,rdx
jne 0x5e8e1d
mov rax,qword[0x00b3dd00]
mov rcx,qword[rbx+8]
mov byte[rbx+0xc1],1
add rax,0x10
cmp rcx,0xffffffffffffffff
mov qword[rbx],rax
je 0x5e837a
mov edx,0xffffffff
call qword[sym.imp.KERNEL32.dll_WaitForSingleObject]
mov rcx,qword[rbx+8]
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov qword[rbx+8],0xffffffffffffffff
mov rcx,qword[rbx+0xa0]
lea rax,[rbx+0xb0]
cmp rcx,rax
je 0x5e8392
call fcn.00a5af30
mov rax,qword[0x00b3dd30]
lea rcx,[rbx+0x90]
mov rdx,0xffffffffffffffff
add rax,0x10
mov qword[rbx+0x18],rax
call fcn.006708a0
lea rcx,[rbx+0x88]
mov rdx,0xffffffffffffffff
call fcn.006708a0
mov rcx,qword[rbx+0x60]
lea rax,[rbx+0x70]
cmp rcx,rax
je 0x5e83d9
call fcn.00a5af30
mov rcx,qword[rbx+0x40]
lea rax,[rbx+0x50]
cmp rcx,rax
je 0x5e83eb
call fcn.00a5af30
mov rcx,qword[rbx+0x20]
lea rax,[rbx+0x30]
cmp rcx,rax
je 0x5e83fd
call fcn.00a5af30
mov rcx,qword[rbx+8]
lea rax,[0x00b70f00]
mov qword[rbx],rax
cmp rcx,0xffffffffffffffff
je 0x5e8417
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov edx,0xc8
mov rcx,rbx
call fcn.00a5af40
mov rbx,qword[rdi+0x1b8]
test rbx,rbx
je 0x5e8455
mov rcx,qword[rbx+8]
lea rax,[rbx+0x18]
mov rsi,qword[rbx]
cmp rcx,rax
je 0x5e8445
call fcn.00a5af30
mov rcx,rbx
mov rbx,rsi
call fcn.00a5af30
test rsi,rsi
jne 0x5e8430
mov r8,qword[rdi+0x1b0]
mov rcx,qword[rdi+0x1a8]
xor edx,edx
shl r8,3
call sub.msvcrt.dll_memset
mov rcx,qword[rdi+0x1a8]
lea rax,[rdi+0x1d8]
mov qword[rdi+0x1c0],0
mov qword[rdi+0x1b8],0
cmp rcx,rax
je 0x5e849c
call fcn.00a5af30
xor ecx,ecx
xchg qword[rdi+0x198],rcx
test rcx,rcx
je 0x5e84b0
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rbx,qword[rdi+0x160]
test rbx,rbx
je 0x5e8509
nop dword[rax]
mov rcx,qword[rbx+0x48]
lea rax,[rbx+0x58]
mov rsi,qword[rbx]
cmp rcx,rax
je 0x5e84d5
call fcn.00a5af30
mov rcx,qword[rbx+0x28]
lea rax,[rbx+0x38]
cmp rcx,rax
je 0x5e84e7
call fcn.00a5af30
mov rcx,qword[rbx+8]
lea rax,[rbx+0x18]
cmp rcx,rax
je 0x5e84f9
call fcn.00a5af30
mov rcx,rbx
mov rbx,rsi
call fcn.00a5af30
test rsi,rsi
jne 0x5e84c0
mov r8,qword[rdi+0x158]
mov rcx,qword[rdi+0x150]
xor edx,edx
shl r8,3
call sub.msvcrt.dll_memset
mov rcx,qword[rdi+0x150]
lea rax,[rdi+0x180]
mov qword[rdi+0x168],0
mov qword[rdi+0x160],0
cmp rcx,rax
je 0x5e8550
call fcn.00a5af30
mov rbx,qword[rdi+0x128]
test rbx,rbx
je 0x5e8585
nop dword[rax]
mov rcx,qword[rbx+8]
lea rax,[rbx+0x18]
mov rsi,qword[rbx]
cmp rcx,rax
je 0x5e8575
call fcn.00a5af30
mov rcx,rbx
mov rbx,rsi
call fcn.00a5af30
test rsi,rsi
jne 0x5e8560
mov r8,qword[rdi+0x120]
mov rcx,qword[rdi+0x118]
xor edx,edx
shl r8,3
call sub.msvcrt.dll_memset
mov rcx,qword[rdi+0x118]
lea rax,[rdi+0x148]
mov qword[rdi+0x130],0
mov qword[rdi+0x128],0
cmp rcx,rax
je 0x5e85cc
call fcn.00a5af30
mov rsi,qword[rdi+0x108]
mov rbx,qword[rdi+0x100]
cmp rsi,rbx
je 0x5e8601
nop
mov rcx,qword[rbx]
lea rax,[rbx+0x10]
cmp rcx,rax
je 0x5e85f1
call fcn.00a5af30
add rbx,0x20
cmp rsi,rbx
jne 0x5e85e0
mov rbx,qword[rdi+0x100]
test rbx,rbx
je 0x5e860e
mov rcx,rbx
call fcn.00a5af30
mov rsi,qword[rdi+0xf0]
mov rbx,qword[rdi+0xe8]
cmp rsi,rbx
je 0x5e8642
mov rcx,qword[rbx]
lea rax,[rbx+0x10]
cmp rcx,rax
je 0x5e8632
call fcn.00a5af30
add rbx,0x20
cmp rsi,rbx
jne 0x5e8621
mov rbx,qword[rdi+0xe8]
test rbx,rbx
je 0x5e864f
mov rcx,rbx
call fcn.00a5af30
mov rcx,qword[rdi+0xd0]
test rcx,rcx
je 0x5e8660
call fcn.00a5af30
lea rax,[rdi+0x80]
lea rsi,[rdi+0xc8]
mov qword[rsp+0x30],rax
mov rax,qword[sym.imp.KERNEL32.dll_Sleep]
mov qword[rsp+0x20],rax
nop
cmp rsi,qword[rsp+0x30]
je 0x5e8719
sub rsi,0x18
mov r15,qword[rsi]
mov rbx,qword[rsi+8]
mov r12d,1
mov r14,qword[0x00b3d090]
cmp rbx,r15
mov rcx,r15
je 0x5e8dcf
nop
mov rcx,qword[r15+0x40]
lea rax,[r15+0x50]
cmp rcx,rax
je 0x5e86c2
call fcn.00a5af30
mov r13,qword[r15+0x38]
test r13,r13
je 0x5e8dae
mov ebp,0xffffffff
lock xadd dword[r13],ebp
sub ebp,r12d
je 0x5e86e7
jmp 0x5e8dae
add ebp,1
mov ecx,r12d
xchg dword[r14],ecx
test ecx,ecx
je 0x5e8d95
cmp ebp,3
jbe 0x5e86e4
cmp ebp,0xf
jbe 0x5e8de2
cmp ebp,0x1f
jbe 0x5e8df0
mov ecx,1
call qword[sym.imp.KERNEL32.dll_Sleep]
jmp 0x5e86e4
xor ecx,ecx
xchg qword[rdi+0x78],rcx
test rcx,rcx
je 0x5e872a
call qword[sym.imp.KERNEL32.dll_CloseHandle]
lea rax,fcn.0093e640
xor ecx,ecx
mov qword[rdi+8],rax
xchg qword[rdi+0x50],rcx
test rcx,rcx
je 0x5e8746
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,qword[rdi+0x28]
test rcx,rcx
je 0x5e8754
call fcn.00a5af30
mov rcx,qword[rdi+0x10]
test rcx,rcx
je 0x5e8762
call fcn.00a5af30
mov edx,0x1f8
mov rcx,rdi
call fcn.00a5af40
mov rcx,qword[0x00a7d7a0]
mov qword[0x00a7d860],0
test rcx,rcx
je 0x5e878c
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d7f0]
mov qword[0x00a7d7a0],0
test rcx,rcx
je 0x5e87a9
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d770]
mov qword[0x00a7d7f0],0
test rcx,rcx
je 0x5e87c6
mov rax,qword[rcx]
call qword[rax+8]
mov rbp,qword[0x00a7d720]
mov qword[0x00a7d770],0
test rbp,rbp
je 0x5e8b1c
mov rax,qword[rbp]
lea rdx,[0x0092e4a0]
mov rax,qword[rax+8]
cmp rax,rdx
jne 0x5e8ee0
lea rax,[0x00b6eb30]
mov rsi,qword[0x00a7d760]
mov qword[rbp],rax
lea rax,[0x00b6eb58]
cmp rsi,0xffffffffffffffc8
mov qword[rbp+8],rax
lea rax,[0x00b6eb78]
mov qword[rbp+0x58],rax
lea rax,[rbp+0x58]
mov qword[rsp+0x48],rax
je 0x5e9164
lea r13,[rsi+0x3c]
mov rax,qword[rsp+0x38]
call rax
mov r14d,eax
xor eax,eax
lock cmpxchg dword[r13],eax
cmp r14d,eax
je 0x5e8ebc
lea rdi,[rsi+0x40]
mov ebx,dword[rsi+0x40]
jmp 0x5e8862
mov ebx,eax
mov edx,ebx
mov r8d,ebx
mov rcx,rdi
or edx,0x80000000
call fcn.008eebc0
cmp ebx,eax
jne 0x5e8860
test ebx,ebx
js 0x5e9047
xchg dword[r13],r14d
mov dword[rsi+0x38],1
mov rdx,qword[rsi+0x10]
mov rcx,qword[rsi+8]
lea r8,[rsp+0x48]
xor r9d,r9d
call fcn.00a54140
mov r9,qword[rsi+0x10]
cmp r9,rax
je 0x5e88d1
lea rdx,[rax+8]
cmp r9,rdx
je 0x5e88c9
mov r8,r9
sub r8,rdx
mov rcx,r8
sar rcx,3
test rcx,rcx
jne 0x5e8fb9
sub r9,8
mov qword[rsi+0x10],r9
mov eax,dword[rsi+0x38]
sub eax,1
test eax,eax
mov dword[rsi+0x38],eax
je 0x5e8fca
mov r13,qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,qword[rbp+0x68]
cmp rcx,0xffffffffffffffff
je 0x5e890d
mov edx,0xffffffff
call qword[sym.imp.KERNEL32.dll_WaitForSingleObject]
mov rcx,qword[rbp+0x68]
call r13
mov qword[rbp+0x68],0xffffffffffffffff
xor ecx,ecx
xchg qword[rbp+0x188],rcx
test rcx,rcx
je 0x5e891e
call r13
mov rcx,qword[rbp+0x148]
test rcx,rcx
je 0x5e8940
nop word[rax+rax]
mov rbx,qword[rcx]
call fcn.00a5af30
test rbx,rbx
mov rcx,rbx
jne 0x5e8930
mov r8,qword[rbp+0x140]
mov rcx,qword[rbp+0x138]
xor edx,edx
shl r8,3
call sub.msvcrt.dll_memset
mov rcx,qword[rbp+0x138]
lea rax,[rbp+0x168]
mov qword[rbp+0x150],0
mov qword[rbp+0x148],0
cmp rcx,rax
je 0x5e8987
call fcn.00a5af30
mov rdi,qword[rbp+0x110]
test rdi,rdi
je 0x5e89f0
mov rsi,qword[rdi+0x30]
mov rbx,qword[rdi+0x28]
mov r12,qword[rdi]
cmp rsi,rbx
je 0x5e89c1
mov rcx,qword[rbx]
lea rax,[rbx+0x10]
cmp rcx,rax
je 0x5e89b4
call fcn.00a5af30
add rbx,0x40
cmp rsi,rbx
jne 0x5e89a3
mov rbx,qword[rdi+0x28]
test rbx,rbx
je 0x5e89ce
mov rcx,rbx
call fcn.00a5af30
mov rcx,qword[rdi+8]
lea rax,[rdi+0x18]
cmp rcx,rax
je 0x5e89e0
call fcn.00a5af30
mov rcx,rdi
mov rdi,r12
call fcn.00a5af30
test r12,r12
jne 0x5e8993
mov r8,qword[rbp+0x108]
mov rcx,qword[rbp+0x100]
xor edx,edx
shl r8,3
call sub.msvcrt.dll_memset
mov rcx,qword[rbp+0x100]
lea rax,[rbp+0x130]
mov qword[rbp+0x118],0
mov qword[rbp+0x110],0
cmp rcx,rax
je 0x5e8a37
call fcn.00a5af30
mov rax,qword[0x00b3dcb0]
mov rcx,qword[rbp+0xd8]
add rax,0x10
mov qword[rbp+0x60],rax
lea rax,[rbp+0xe8]
cmp rcx,rax
je 0x5e8a5e
call fcn.00a5af30
mov rcx,qword[rbp+0xc0]
call r13
xor ecx,ecx
xchg qword[rbp+0xb8],rcx
test rcx,rcx
je 0x5e8a79
call r13
mov rbx,qword[rbp+0x88]
lea rdi,[rbp+0x78]
test rbx,rbx
je 0x5e8ac2
nop dword[rax]
mov rdx,qword[rbx+0x18]
mov rcx,rdi
call fcn.00a44f30
mov rcx,qword[rbx+0x20]
lea rax,[rbx+0x30]
mov rsi,qword[rbx+0x10]
cmp rcx,rax
je 0x5e8ab2
call fcn.00a5af30
mov rcx,rbx
mov rbx,rsi
call fcn.00a5af30
test rsi,rsi
jne 0x5e8a90
mov rcx,qword[rbp+0x68]
lea rax,[0x00b70f00]
mov qword[rbp+0x60],rax
cmp rcx,0xffffffffffffffff
je 0x5e8ada
call r13
lea rax,fcn.0093d5d0
xor ecx,ecx
mov qword[rbp+8],rax
xchg qword[rbp+0x50],rcx
test rcx,rcx
je 0x5e8af3
call r13
mov rcx,qword[rbp+0x28]
test rcx,rcx
je 0x5e8b01
call fcn.00a5af30
mov rcx,qword[rbp+0x10]
test rcx,rcx
je 0x5e8b0f
call fcn.00a5af30
mov edx,0x190
mov rcx,rbp
call fcn.00a5af40
mov rcx,qword[0x00a7d710]
mov qword[0x00a7d720],0
test rcx,rcx
je 0x5e8b39
mov rax,qword[rcx]
call qword[rax+8]
mov rbp,qword[0x00a7d820]
mov qword[0x00a7d710],0
test rbp,rbp
je 0x5e8cd3
mov rax,qword[rbp]
lea rdx,[0x00933b40]
mov rax,qword[rax+8]
cmp rax,rdx
jne 0x5e8ed6
lea rax,[0x00b700b0]
mov rdi,qword[rbp+0x1a70]
mov qword[rbp],rax
lea rax,[0x00b700d0]
test rdi,rdi
mov qword[rbp+8],rax
je 0x5e8bed
nop
mov rsi,qword[rdi+0x30]
mov rbx,qword[rdi+0x28]
mov r12,qword[rdi]
cmp rsi,rbx
je 0x5e8bbe
mov rcx,qword[rbx]
lea rax,[rbx+0x10]
cmp rcx,rax
je 0x5e8bb1
call fcn.00a5af30
add rbx,0x20
cmp rsi,rbx
jne 0x5e8ba0
mov rbx,qword[rdi+0x28]
test rbx,rbx
je 0x5e8bcb
mov rcx,rbx
call fcn.00a5af30
mov rcx,qword[rdi+8]
lea rax,[rdi+0x18]
cmp rcx,rax
je 0x5e8bdd
call fcn.00a5af30
mov rcx,rdi
mov rdi,r12
call fcn.00a5af30
test r12,r12
jne 0x5e8b90
mov r8,qword[rbp+0x1a68]
mov rcx,qword[rbp+0x1a60]
xor edx,edx
shl r8,3
call sub.msvcrt.dll_memset
mov rcx,qword[rbp+0x1a60]
lea rax,[rbp+0x1a90]
mov qword[rbp+0x1a78],0
mov qword[rbp+0x1a70],0
cmp rcx,rax
je 0x5e8c34
call fcn.00a5af30
lea rsi,[rbp+0xcc8]
lea rax,[rbp+0x1728]
mov rcx,qword[rax-0x20]
lea rbx,[rax-0x20]
sub rax,0x10
cmp rcx,rax
je 0x5e8c58
call fcn.00a5af30
cmp rsi,rbx
mov rax,rbx
jne 0x5e8c42
lea rsi,[rbp+0x58]
lea rax,[rbp+0xab8]
nop dword[rax+rax]
mov rcx,qword[rax-0x20]
lea rbx,[rax-0x20]
sub rax,0x10
cmp rcx,rax
je 0x5e8c86
call fcn.00a5af30
cmp rsi,rbx
mov rax,rbx
jne 0x5e8c70
lea rax,fcn.0093e490
xor ecx,ecx
mov qword[rbp+8],rax
xchg qword[rbp+0x50],rcx
test rcx,rcx
je 0x5e8caa
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,qword[rbp+0x28]
test rcx,rcx
je 0x5e8cb8
call fcn.00a5af30
mov rcx,qword[rbp+0x10]
test rcx,rcx
je 0x5e8cc6
call fcn.00a5af30
mov edx,0x1a98
mov rcx,rbp
call fcn.00a5af40
mov rcx,qword[0x00a7d760]
mov qword[0x00a7d820],0
test rcx,rcx
je 0x5e8cf0
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[0x00a7d810]
mov qword[0x00a7d760],0
test rcx,rcx
je 0x5e8d28
mov rax,qword[rcx]
lea rdx,[0x00933a70]
mov rax,qword[rax+8]
cmp rax,rdx
jne 0x5e8ecf
mov edx,0x10
call fcn.00a5af40
mov qword[0x00a7d810],0
call qword[sym.imp.WS2_32.dll_WSACleanup]
nop
add rsp,0x98
pop rbx
pop rsi
pop rdi
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov rcx,qword[rsp+0x28]
lea rdx,[rsp+0x48]
xor r8d,r8d
call fcn.00a2dfc0
mov rdx,qword[rsp+0x48]
mov qword[rsp+0x50],rax
mov qword[rsp+0x60],rdx
mov r8,rbx
mov rdx,rsi
mov rcx,rax
call sub.msvcrt.dll_memcpy
mov rbx,qword[rsp+0x48]
mov rax,qword[rsp+0x50]
jmp 0x5e7cd0
add dword[rbp],1
jmp 0x5e7bac
mov rax,qword[0x00a7d6e0]
mov qword[r13],rax
mov qword[0x00a7d6e0],r13
mov dword[r14],0
mov rcx,qword[r15]
lea rax,[r15+0x10]
cmp rcx,rax
je 0x5e8dbf
call fcn.00a5af30
add r15,0x60
cmp rbx,r15
jne 0x5e86b0
mov rcx,qword[rsi]
test rcx,rcx
je 0x5e8680
call fcn.00a5af30
jmp 0x5e8680
pause
jmp 0x5e86e4
xor ecx,ecx
mov rax,qword[rsp+0x20]
call rax
jmp 0x5e86e4
movzx eax,byte[rsi]
mov byte[rsp+0x60],al
mov rax,qword[rsp+0x28]
add rax,0x10
jmp 0x5e7cd0
mov rcx,rbx
call rax
jmp 0x5e8317
mov rcx,rbx
call rax
jmp 0x5e8424
xchg dword[r12],eax
mov eax,0x80000000
lea rsi,[rbp+8]
lock xadd dword[rsi],eax
test eax,0x40000000
jne 0x5e7bc9
cmp eax,0x80000000
je 0x5e7bc9
mov ebx,dword[rbp+8]
jmp 0x5e8e55
mov ebx,eax
mov edx,ebx
mov r8d,ebx
mov rcx,rsi
or edx,0x40000000
call fcn.008eebc0
cmp ebx,eax
jne 0x5e8e53
and ebx,0x40000000
jne 0x5e7bc9
add rbp,0x10
xor eax,eax
lock cmpxchg qword[rbp],rax
test rax,rax
mov rbx,rax
mov rcx,rax
je 0x5e91ef
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5e7bc9
mov rcx,rbx
call rax
jmp 0x5e809d
mov rcx,rsi
call rax
jmp 0x5e7f3b
mov rcx,rbx
call rax
jmp 0x5e7e01
add dword[rsi+0x38],1
jmp 0x5e888c
mov rcx,rdi
call rax
jmp 0x5e876f
call rax
jmp 0x5e8d28
mov rcx,rbp
call rax
jmp 0x5e8cd3
mov rcx,rbp
call rax
jmp 0x5e8b1c
mov edx,dword[rbp+8]
jmp 0x5e8ef1
mov edx,eax
lea eax,[rdx+1]
mov ebx,edx
or ebx,0x80000000
test edx,edx
cmovs ebx,eax
mov eax,edx
lock cmpxchg dword[rdi],ebx
cmp eax,edx
jne 0x5e8eef
mov eax,ebx
shr eax,0x1f
test al,al
je 0x5e7ba1
shr edx,0x1f
test dl,dl
je 0x5e7ba1
lea r11,[rbp+0x10]
xor eax,eax
lock cmpxchg qword[r11],rax
test rax,rax
mov r14,rax
mov r10,rax
je 0x5e930f
mov r9,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov r14d,0xffffffff
xor r8d,r8d
mov edx,r14d
mov rcx,r10
mov qword[rsp+0x28],r10
mov qword[rsp+0x20],r9
call r9
mov edx,ebx
mov r9,qword[rsp+0x20]
mov r10,qword[rsp+0x28]
and edx,0x7fffffff
or edx,0x40000000
test edx,edx
js 0x5e8fa1
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov ebx,eax
je 0x5e7ba1
mov edx,ebx
test edx,edx
jns 0x5e8f7c
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov ebx,eax
je 0x5e8f4a
mov edx,ebx
jmp 0x5e8f9d
mov rcx,rax
call sub.msvcrt.dll_memmove
mov r9,qword[rsi+0x10]
jmp 0x5e88c9
xchg dword[r13],eax
mov eax,0x80000000
lea rdi,[rsi+0x40]
lock xadd dword[rdi],eax
test eax,0x40000000
jne 0x5e88e2
cmp eax,0x80000000
je 0x5e88e2
mov ebx,dword[rsi+0x40]
jmp 0x5e8ff8
mov ebx,eax
mov edx,ebx
mov r8d,ebx
mov rcx,rdi
or edx,0x40000000
call fcn.008eebc0
cmp ebx,eax
jne 0x5e8ff6
and ebx,0x40000000
mov r13,qword[sym.imp.KERNEL32.dll_CloseHandle]
jne 0x5e88e9
add rsi,0x48
xor eax,eax
lock cmpxchg qword[rsi],rax
test rax,rax
mov rbx,rax
mov rcx,rax
je 0x5e9356
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5e88e9
mov edx,dword[rsi+0x40]
jmp 0x5e9052
mov edx,eax
lea eax,[rdx+1]
mov r15d,edx
or r15d,0x80000000
test edx,edx
cmovs r15d,eax
mov eax,edx
lock cmpxchg dword[rdi],r15d
cmp eax,edx
jne 0x5e9050
shr edx,0x1f
test dl,dl
je 0x5e8881
mov eax,r15d
shr eax,0x1f
test al,al
je 0x5e8881
lea r11,[rsi+0x48]
xor eax,eax
lock cmpxchg qword[r11],rax
test rax,rax
mov rbx,rax
mov r10,rax
je 0x5e9119
mov r9,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov ebx,0xffffffff
mov edx,ebx
mov rcx,r10
mov qword[rsp+0x30],r10
mov qword[rsp+0x20],r9
xor r8d,r8d
call r9
mov edx,r15d
mov r9,qword[rsp+0x20]
mov r10,qword[rsp+0x30]
and edx,0x7fffffff
or edx,0x40000000
jmp 0x5e90fe
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov r15d,eax
je 0x5e8881
mov edx,r15d
test edx,edx
jns 0x5e90db
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov r15d,eax
jne 0x5e90fb
jmp 0x5e90ab
mov qword[rsp+0x20],r11
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r10,rax
mov r11,qword[rsp+0x20]
je 0x5e922a
mov rax,rbx
lock cmpxchg qword[r11],r10
test rax,rax
mov rbx,rax
je 0x5e909f
mov rcx,r10
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r10,rbx
jmp 0x5e909f
call fcn.006ea660
mov rdi,qword[rsp+0x28]
lea rdx,[0x00aabd38]
mov rbx,rax
mov rcx,rdi
call fcn.009de540
mov rax,rdi
mov rcx,rdi
mov dword[rsp+0x60],1
add rax,0x30
mov qword[rsp+0x68],rbx
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b714e0]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.009472d0
mov r12,qword[rsp+0x28]
mov rcx,qword[rsp+0x50]
mov rbx,rax
add r12,0x10
cmp rcx,r12
je 0x5e91d9
call fcn.00a5af30
mov rcx,rbx
call fcn.008da260
lea rcx,[0x00aabc8a]
call fcn.00a4f830
jmp 0x5e91be
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x5e9284
mov rax,rbx
lock cmpxchg qword[rbp],rcx
test rax,rax
mov rbx,rax
je 0x5e8e93
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rbx
jmp 0x5e8e93
call fcn.006ea660
mov rdi,qword[rsp+0x28]
lea rdx,[0x00aabd1a]
mov rbx,rax
mov rcx,rdi
call fcn.009de540
mov rax,rdi
mov rcx,rdi
mov dword[rsp+0x60],0xb
add rax,0x30
mov qword[rsp+0x68],rbx
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00aabd1a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
mov rcx,qword[rsp+0x28]
lea rax,[0x00b72450]
mov qword[rsp+0x50],rax
call fcn.00962490
call fcn.00a55e20
lea rax,[0x00b72450]
mov rcx,rbx
mov qword[rsp+0x50],rax
call fcn.00962490
call fcn.00a55e20
mov qword[rsp+0x20],r11
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r10,rax
mov r11,qword[rsp+0x20]
je 0x5e938d
mov rax,r14
lock cmpxchg qword[r11],r10
test rax,rax
mov r14,rax
je 0x5e8f3d
mov rcx,r10
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r10,r14
jmp 0x5e8f3d
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x5e93e4
mov rax,rbx
lock cmpxchg qword[rsi],rcx
test rax,rax
mov rbx,rax
je 0x5e903c
call r13
mov rcx,rbx
jmp 0x5e903c
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00aabd1a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
call fcn.006ea660
mov rdi,qword[rsp+0x28]
lea rdx,[0x00aabd1a]
mov rbx,rax
mov rcx,rdi
call fcn.009de540
mov rax,rdi
mov rcx,rdi
mov dword[rsp+0x60],0xb
add rax,0x30
mov qword[rsp+0x68],rbx
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
mov rsi,rax
lea rax,[0x00b72450]
mov rcx,rbx
mov qword[rsp+0x50],rax
call fcn.00962490
mov rcx,rsi
call fcn.008da260
jmp 0x5e92db
{% endhighlight %}


[similar_1_ref]: /report/fcn.005e56b0@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_2_ref]: /report/fcn.005cbe30@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_3_ref]: /report/fcn.005ba960@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_4_ref]: /report/fcn.00671da0@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_5_ref]: /report/fcn.0069ed20@a5905e3c253c25bbaf727a1a18fe8ed1
[virustotal_ref]: https://www.virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1