---
layout: post
title:  "fcn.005c1310 @ a5905e3c253c25bbaf727a1a18fe8ed1"
date:   2021-08-30 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.005c1310
- **Origin (md5):** a5905e3c253c25bbaf727a1a18fe8ed1
- **VirusTotal:** [virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1][virustotal_ref]

# Code Tags
<span class="tag" id="THREAD">THREAD</span>


# Similar Functions

1. [fcn.007d71f0][similar_1_ref] (sim.: 0.942262067811542)
2. [fcn.00675520][similar_2_ref] (sim.: 0.941608086684887)
3. [fcn.004815b0][similar_3_ref] (sim.: 0.9414274898427702)
4. [fcn.0067e2f0][similar_4_ref] (sim.: 0.9397340487881779)
5. [fcn.005bc600][similar_5_ref] (sim.: 0.9397308234210698)


# Disassembled Code

{% highlight nasm %}
push r15
push r14
push r13
push r12
push rbp
push rdi
push rsi
push rbx
sub rsp,0x98
cmp qword[rcx+0x160],0
mov rdi,rcx
mov rbx,rdx
mov rsi,r8
je 0x5c1725
lea r15,[rdi+0x6c]
call qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
mov r12d,eax
xor eax,eax
lock cmpxchg dword[r15],eax
cmp r12d,eax
je 0x5c1740
lea rbp,[rdi+0x70]
mov r13d,dword[rdi+0x70]
jmp 0x5c1364
mov r13d,eax
mov edx,r13d
mov r8d,r13d
mov rcx,rbp
or edx,0x80000000
call fcn.008eebc0
cmp r13d,eax
jne 0x5c1361
test r13d,r13d
js 0x5c1cb0
xchg dword[r15],r12d
mov dword[rdi+0x68],1
mov rbp,qword[rdi+0x138]
cmp rbp,qword[rdi+0x130]
je 0x5c1c20
test rsi,rsi
je 0x5c16c7
mov rax,qword[rdi+0x140]
mov r12,rsi
sub rax,rbp
cmp rsi,rax
ja 0x5c1750
test rsi,rsi
jle 0x5c16bd
lea rax,[rbx+0x10]
cmp rbp,rax
lea rax,[rbp+0x10]
setae dl
cmp rbx,rax
setae al
or dl,al
je 0x5c1b33
cmp rsi,0x14
jbe 0x5c1b33
mov rcx,rbx
neg rcx
and ecx,0xf
je 0x5c1b24
movzx eax,byte[rbx]
cmp rcx,1
lea rdx,[rbx+1]
lea r14,[rsi-1]
mov byte[rbp],al
lea rax,[rbp+1]
je 0x5c1c15
movzx eax,byte[rbx+1]
cmp rcx,2
lea rdx,[rbx+2]
lea r12,[rsi-2]
mov byte[rbp+1],al
lea rax,[rbp+2]
je 0x5c1595
movzx eax,byte[rbx+2]
cmp rcx,3
lea rdx,[rbx+3]
lea r12,[rsi-3]
mov byte[rbp+2],al
lea rax,[rbp+3]
je 0x5c1595
movzx eax,byte[rbx+3]
cmp rcx,4
lea rdx,[rbx+4]
lea r12,[rsi-4]
mov byte[rbp+3],al
lea rax,[rbp+4]
je 0x5c1595
movzx eax,byte[rbx+4]
cmp rcx,5
lea rdx,[rbx+5]
lea r12,[rsi-5]
mov byte[rbp+4],al
lea rax,[rbp+5]
je 0x5c1595
movzx eax,byte[rbx+5]
cmp rcx,6
lea rdx,[rbx+6]
lea r12,[rsi-6]
mov byte[rbp+5],al
lea rax,[rbp+6]
je 0x5c1595
movzx eax,byte[rbx+6]
cmp rcx,7
lea rdx,[rbx+7]
lea r12,[rsi-7]
mov byte[rbp+6],al
lea rax,[rbp+7]
je 0x5c1595
movzx eax,byte[rbx+7]
cmp rcx,8
lea rdx,[rbx+8]
lea r12,[rsi-8]
mov byte[rbp+7],al
lea rax,[rbp+8]
je 0x5c1595
movzx eax,byte[rbx+8]
cmp rcx,9
lea rdx,[rbx+9]
lea r12,[rsi-9]
mov byte[rbp+8],al
lea rax,[rbp+9]
je 0x5c1595
movzx eax,byte[rbx+9]
cmp rcx,0xa
lea rdx,[rbx+0xa]
lea r12,[rsi-0xa]
mov byte[rbp+9],al
lea rax,[rbp+0xa]
je 0x5c1595
movzx eax,byte[rbx+0xa]
cmp rcx,0xb
lea rdx,[rbx+0xb]
lea r12,[rsi-0xb]
mov byte[rbp+0xa],al
lea rax,[rbp+0xb]
je 0x5c1595
movzx eax,byte[rbx+0xb]
cmp rcx,0xc
lea rdx,[rbx+0xc]
lea r12,[rsi-0xc]
mov byte[rbp+0xb],al
lea rax,[rbp+0xc]
je 0x5c1595
movzx eax,byte[rbx+0xc]
cmp rcx,0xd
lea rdx,[rbx+0xd]
lea r12,[rsi-0xd]
mov byte[rbp+0xc],al
lea rax,[rbp+0xd]
je 0x5c1595
movzx eax,byte[rbx+0xd]
cmp rcx,0xe
lea rdx,[rbx+0xe]
lea r12,[rsi-0xe]
mov byte[rbp+0xd],al
lea rax,[rbp+0xe]
je 0x5c1595
movzx eax,byte[rbx+0xe]
lea rdx,[rbx+0xf]
lea r12,[rsi-0xf]
mov byte[rbp+0xe],al
lea rax,[rbp+0xf]
mov r9,rsi
sub r14,rcx
sub r9,rcx
lea r8,[r9-0x10]
shr r8,4
add r8,1
mov r10,r8
shl r10,4
cmp r14,0xe
jbe 0x5c15eb
add rbx,rcx
add rbp,rcx
xor r11d,r11d
xor ecx,ecx
movdqa xmm0,xmmword[rbx+rcx]
add r11,1
movups xmmword[rbp+rcx],xmm0
add rcx,0x10
cmp r8,r11
ja 0x5c15c2
sub r12,r10
add rdx,r10
add rax,r10
cmp r10,r9
je 0x5c16b6
movzx ecx,byte[rdx]
cmp r12,1
mov byte[rax],cl
je 0x5c16b6
movzx ecx,byte[rdx+1]
cmp r12,2
mov byte[rax+1],cl
je 0x5c16b6
movzx ecx,byte[rdx+2]
cmp r12,3
mov byte[rax+2],cl
je 0x5c16b6
movzx ecx,byte[rdx+3]
cmp r12,4
mov byte[rax+3],cl
je 0x5c16b6
movzx ecx,byte[rdx+4]
cmp r12,5
mov byte[rax+4],cl
je 0x5c16b6
movzx ecx,byte[rdx+5]
cmp r12,6
mov byte[rax+5],cl
je 0x5c16b6
movzx ecx,byte[rdx+6]
cmp r12,7
mov byte[rax+6],cl
je 0x5c16b6
movzx ecx,byte[rdx+7]
cmp r12,8
mov byte[rax+7],cl
je 0x5c16b6
movzx ecx,byte[rdx+8]
cmp r12,9
mov byte[rax+8],cl
je 0x5c16b6
movzx ecx,byte[rdx+9]
cmp r12,0xa
mov byte[rax+9],cl
je 0x5c16b6
movzx ecx,byte[rdx+0xa]
cmp r12,0xb
mov byte[rax+0xa],cl
je 0x5c16b6
movzx ecx,byte[rdx+0xb]
cmp r12,0xc
mov byte[rax+0xb],cl
je 0x5c16b6
movzx ecx,byte[rdx+0xc]
cmp r12,0xd
mov byte[rax+0xc],cl
je 0x5c16b6
movzx ecx,byte[rdx+0xd]
cmp r12,0xe
mov byte[rax+0xd],cl
je 0x5c16b6
movzx edx,byte[rdx+0xe]
mov byte[rax+0xe],dl
mov rbp,qword[rdi+0x138]
add rsi,rbp
mov qword[rdi+0x138],rsi
mov eax,dword[rdi+0x68]
sub eax,1
test eax,eax
mov dword[rdi+0x68],eax
jne 0x5c1725
xchg dword[r15],eax
mov eax,0x80000000
lea rsi,[rdi+0x70]
lock xadd dword[rsi],eax
test eax,0x40000000
jne 0x5c1725
cmp eax,0x80000000
je 0x5c1725
mov ebx,dword[rdi+0x70]
jmp 0x5c1702
mov ebx,eax
mov edx,ebx
mov r8d,ebx
mov rcx,rsi
or edx,0x40000000
call fcn.008eebc0
cmp ebx,eax
jne 0x5c1700
and ebx,0x40000000
je 0x5c1bf0
add rsp,0x98
pop rbx
pop rsi
pop rdi
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
add dword[rdi+0x68],1
jmp 0x5c1390
mov r11,qword[rdi+0x130]
mov r13,rbp
sub r13,r11
mov rax,r13
not rax
cmp rsi,rax
ja 0x5c1e38
cmp rsi,r13
mov r14,r13
cmovae r14,rsi
add r14,r13
jb 0x5c1bb1
test r14,r14
jne 0x5c1bb5
mov qword[rsp+0x40],0
mov qword[rsp+0x30],0
mov qword[rsp+0x38],0
mov qword[rsp+0x28],0
test r13,r13
jne 0x5c1b92
mov rax,qword[rsp+0x28]
test rsi,rsi
lea r9,[rax+r13]
jle 0x5c1adf
mov rcx,rbx
neg rcx
and ecx,0xf
cmp rcx,rsi
cmova rcx,rsi
cmp rsi,0x10
ja 0x5c1b50
mov rcx,rsi
movzx eax,byte[rbx]
cmp rcx,1
lea rdx,[rbx+1]
lea r14,[rsi-1]
mov byte[r9],al
lea rax,[r9+1]
je 0x5c1d7a
movzx eax,byte[rbx+1]
cmp rcx,2
lea rdx,[rbx+2]
lea r12,[rsi-2]
mov byte[r9+1],al
lea rax,[r9+2]
je 0x5c19a4
movzx eax,byte[rbx+2]
cmp rcx,3
lea rdx,[rbx+3]
lea r12,[rsi-3]
mov byte[r9+2],al
lea rax,[r9+3]
je 0x5c19a4
movzx eax,byte[rbx+3]
cmp rcx,4
lea rdx,[rbx+4]
lea r12,[rsi-4]
mov byte[r9+3],al
lea rax,[r9+4]
je 0x5c19a4
movzx eax,byte[rbx+4]
cmp rcx,5
lea rdx,[rbx+5]
lea r12,[rsi-5]
mov byte[r9+4],al
lea rax,[r9+5]
je 0x5c19a4
movzx eax,byte[rbx+5]
cmp rcx,6
lea rdx,[rbx+6]
lea r12,[rsi-6]
mov byte[r9+5],al
lea rax,[r9+6]
je 0x5c19a4
movzx eax,byte[rbx+6]
cmp rcx,7
lea rdx,[rbx+7]
lea r12,[rsi-7]
mov byte[r9+6],al
lea rax,[r9+7]
je 0x5c19a4
movzx eax,byte[rbx+7]
cmp rcx,8
lea rdx,[rbx+8]
lea r12,[rsi-8]
mov byte[r9+7],al
lea rax,[r9+8]
je 0x5c19a4
movzx eax,byte[rbx+8]
cmp rcx,9
lea rdx,[rbx+9]
lea r12,[rsi-9]
mov byte[r9+8],al
lea rax,[r9+9]
je 0x5c19a4
movzx eax,byte[rbx+9]
cmp rcx,0xa
lea rdx,[rbx+0xa]
lea r12,[rsi-0xa]
mov byte[r9+9],al
lea rax,[r9+0xa]
je 0x5c19a4
movzx eax,byte[rbx+0xa]
cmp rcx,0xb
lea rdx,[rbx+0xb]
lea r12,[rsi-0xb]
mov byte[r9+0xa],al
lea rax,[r9+0xb]
je 0x5c19a4
movzx eax,byte[rbx+0xb]
cmp rcx,0xc
lea rdx,[rbx+0xc]
lea r12,[rsi-0xc]
mov byte[r9+0xb],al
lea rax,[r9+0xc]
je 0x5c19a4
movzx eax,byte[rbx+0xc]
cmp rcx,0xd
lea rdx,[rbx+0xd]
lea r12,[rsi-0xd]
mov byte[r9+0xc],al
lea rax,[r9+0xd]
je 0x5c19a4
movzx eax,byte[rbx+0xd]
cmp rcx,0xe
lea rdx,[rbx+0xe]
lea r12,[rsi-0xe]
mov byte[r9+0xd],al
lea rax,[r9+0xe]
je 0x5c19a4
movzx eax,byte[rbx+0xe]
cmp rcx,0xf
lea rdx,[rbx+0xf]
lea r12,[rsi-0xf]
mov byte[r9+0xe],al
lea rax,[r9+0xf]
je 0x5c19a4
movzx eax,byte[rbx+0xf]
lea rdx,[rbx+0x10]
lea r12,[rsi-0x10]
mov byte[r9+0xf],al
lea rax,[r9+0x10]
cmp rsi,rcx
je 0x5c1adc
mov r10,rsi
sub r14,rcx
sub r10,rcx
lea r8,[r10-0x10]
mov qword[rsp+0x48],r10
shr r8,4
add r8,1
mov r10,r8
shl r10,4
cmp r14,0xe
jbe 0x5c1a11
add rbx,rcx
add rcx,r13
add rcx,qword[rsp+0x28]
xor r13d,r13d
xor r14d,r14d
movdqa xmm0,xmmword[rbx+r13]
add r14,1
movups xmmword[rcx+r13],xmm0
add r13,0x10
cmp r8,r14
ja 0x5c19e5
sub r12,r10
add rdx,r10
add rax,r10
cmp r10,qword[rsp+0x48]
je 0x5c1adc
movzx ecx,byte[rdx]
cmp r12,1
mov byte[rax],cl
je 0x5c1adc
movzx ecx,byte[rdx+1]
cmp r12,2
mov byte[rax+1],cl
je 0x5c1adc
movzx ecx,byte[rdx+2]
cmp r12,3
mov byte[rax+2],cl
je 0x5c1adc
movzx ecx,byte[rdx+3]
cmp r12,4
mov byte[rax+3],cl
je 0x5c1adc
movzx ecx,byte[rdx+4]
cmp r12,5
mov byte[rax+4],cl
je 0x5c1adc
movzx ecx,byte[rdx+5]
cmp r12,6
mov byte[rax+5],cl
je 0x5c1adc
movzx ecx,byte[rdx+6]
cmp r12,7
mov byte[rax+6],cl
je 0x5c1adc
movzx ecx,byte[rdx+7]
cmp r12,8
mov byte[rax+7],cl
je 0x5c1adc
movzx ecx,byte[rdx+8]
cmp r12,9
mov byte[rax+8],cl
je 0x5c1adc
movzx ecx,byte[rdx+9]
cmp r12,0xa
mov byte[rax+9],cl
je 0x5c1adc
movzx ecx,byte[rdx+0xa]
cmp r12,0xb
mov byte[rax+0xa],cl
je 0x5c1adc
movzx ecx,byte[rdx+0xb]
cmp r12,0xc
mov byte[rax+0xb],cl
je 0x5c1adc
movzx ecx,byte[rdx+0xc]
cmp r12,0xd
mov byte[rax+0xc],cl
je 0x5c1adc
movzx ecx,byte[rdx+0xd]
cmp r12,0xe
mov byte[rax+0xd],cl
je 0x5c1adc
movzx edx,byte[rdx+0xe]
mov byte[rax+0xe],dl
add r9,rsi
cmp qword[rsp+0x38],0
jne 0x5c1b70
mov rbx,qword[rsp+0x30]
add rbx,r9
test r11,r11
je 0x5c1b00
mov rcx,r11
call fcn.00a5af30
mov rax,qword[rsp+0x28]
mov qword[rdi+0x138],rbx
mov qword[rdi+0x130],rax
mov rax,qword[rsp+0x40]
mov qword[rdi+0x140],rax
jmp 0x5c16c7
mov rax,rbp
mov rdx,rbx
lea r14,[rsi-1]
jmp 0x5c1595
xor eax,eax
movzx edx,byte[rbx+rax]
mov byte[rbp+rax],dl
add rax,1
cmp rsi,rax
jne 0x5c1b35
jmp 0x5c16b6
test rcx,rcx
jne 0x5c17e4
mov rax,r9
mov rdx,rbx
lea r14,[rsi-1]
jmp 0x5c19ad
mov r8,qword[rsp+0x30]
mov rcx,r9
mov rdx,rbp
mov qword[rsp+0x38],r11
call sub.msvcrt.dll_memmove
mov r11,qword[rsp+0x38]
mov r9,rax
jmp 0x5c1aeb
mov rcx,qword[rsp+0x28]
mov rdx,r11
mov r8,r13
mov qword[rsp+0x48],r11
call sub.msvcrt.dll_memmove
mov r11,qword[rsp+0x48]
jmp 0x5c17b5
or r14,0xffffffffffffffff
mov rcx,r14
mov r13,rbp
call fcn.00a5af70
mov rcx,qword[rdi+0x138]
mov r11,qword[rdi+0x130]
add r14,rax
mov qword[rsp+0x28],rax
mov qword[rsp+0x40],r14
sub rcx,rbp
sub r13,r11
mov qword[rsp+0x38],rcx
mov qword[rsp+0x30],rcx
jmp 0x5c17ac
add rdi,0x78
xor eax,eax
lock cmpxchg qword[rdi],rax
test rax,rax
mov rbx,rax
je 0x5c1db1
mov rcx,rbx
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5c1725
mov r12,r14
jmp 0x5c1595
mov rcx,qword[rdi+0xc8]
mov rax,qword[rdi+0xb8]
mov dword[rsp+0x50],2
mov qword[rsp+0x58],0
lea rdx,[rcx-0x10]
cmp rax,rdx
je 0x5c1d96
test rax,rax
je 0x5c1d8f
mov rdx,qword[rsp+0x58]
mov dword[rax],2
mov qword[rsp+0x58],0
mov qword[rax+8],rdx
mov rcx,qword[rsp+0x58]
add rax,0x10
mov qword[rdi+0xb8],rax
test rcx,rcx
je 0x5c1c88
mov rax,qword[rcx]
call qword[rax+8]
mov rcx,qword[rdi+0x80]
xor r8d,r8d
mov edx,1
call qword[sym.imp.KERNEL32.dll_ReleaseSemaphore]
mov rbp,qword[rdi+0x138]
jmp 0x5c13a4
mov ecx,dword[rdi+0x70]
jmp 0x5c1cb7
mov ecx,eax
lea eax,[rcx+1]
mov r13d,ecx
or r13d,0x80000000
test ecx,ecx
cmovs r13d,eax
mov eax,ecx
lock cmpxchg dword[rbp],r13d
cmp eax,ecx
jne 0x5c1cb5
mov eax,r13d
shr eax,0x1f
test al,al
je 0x5c1386
shr ecx,0x1f
test cl,cl
je 0x5c1386
lea r10,[rdi+0x78]
xor eax,eax
lock cmpxchg qword[r10],rax
test rax,rax
mov r14,rax
mov rcx,rax
je 0x5c1de8
mov r14,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov qword[rsp+0xe8],rbx
mov rbx,rbp
mov rbp,rcx
nop
and r13d,0x7fffffff
mov edx,0xffffffff
xor r8d,r8d
mov rcx,rbp
call r14
mov edx,r13d
or edx,0x40000000
jmp 0x5c1d5f
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rbx],ecx
cmp eax,edx
mov r13d,eax
je 0x5c1d82
mov edx,r13d
test edx,edx
jns 0x5c1d40
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rbx],ecx
cmp eax,edx
mov r13d,eax
jne 0x5c1d5c
jmp 0x5c1d20
mov r12,r14
jmp 0x5c19a4
mov rbx,qword[rsp+0xe8]
jmp 0x5c1386
xor ecx,ecx
jmp 0x5c1c72
lea rdx,[rsp+0x50]
lea rcx,[rdi+0x88]
call fcn.00a07580
mov rcx,qword[rsp+0x58]
jmp 0x5c1c7d
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x5c1e59
mov rax,rbx
lock cmpxchg qword[rdi],rcx
test rax,rax
mov rbx,rax
je 0x5c1e30
call qword[sym.imp.KERNEL32.dll_CloseHandle]
jmp 0x5c1c07
xor ecx,ecx
mov qword[rsp+0x28],r10
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
mov r10,qword[rsp+0x28]
je 0x5c1eb0
mov rax,r14
lock cmpxchg qword[r10],rcx
test rax,rax
mov r14,rax
je 0x5c1d09
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,r14
jmp 0x5c1d09
mov rbx,rcx
jmp 0x5c1c07
lea rcx,[0x00aa94fd]
call fcn.00a4f830
mov rcx,qword[rsp+0x58]
test rcx,rcx
je 0x5c1e54
mov rax,qword[rcx]
call qword[rax+8]
call fcn.00a55e20
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
lea rbx,[rsp+0x50]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0x60],0xb
mov qword[rsp+0x68],rsi
mov qword[rsp+0x78],0
mov qword[rsp+0x70],rax
lea rax,[0x00b72480]
mov byte[rsp+0x80],0
mov qword[rsp+0x50],rax
call fcn.00947760
lea rax,[0x00b72450]
mov rcx,rbx
mov qword[rsp+0x50],rax
call fcn.00962490
jmp 0x5c1e54
{% endhighlight %}


[similar_1_ref]: /report/fcn.007d71f0@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_2_ref]: /report/fcn.00675520@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_3_ref]: /report/fcn.004815b0@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_4_ref]: /report/fcn.0067e2f0@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_5_ref]: /report/fcn.005bc600@a5905e3c253c25bbaf727a1a18fe8ed1
[virustotal_ref]: https://www.virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1