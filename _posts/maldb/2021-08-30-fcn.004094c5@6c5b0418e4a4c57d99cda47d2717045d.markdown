---
layout: post
title:  "fcn.004094c5 @ 6c5b0418e4a4c57d99cda47d2717045d"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.004094c5
- **Origin (md5):** 6c5b0418e4a4c57d99cda47d2717045d
- **VirusTotal:** [virustotal.com/gui/file/6c5b0418e4a4c57d99cda47d2717045d][virustotal_ref]

# Code Tags
<span class="tag" id="FILE">FILE</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [-593.4979248046875, 58.89888000488281, '<b><a href="/report/fcn.004094c5@6c5b0418e4a4c57d99cda47d2717045d">fcn.004094c5</a><br>@6c5b0418e4a4c57d99cda47d2717045d</b><br>', 'point { fill-color: #e0440e; }'],
[593.4979248046875, -58.89888000488281, '<b><a href="/report/fcn.0042dc02@de21a548b66aa6c0b17491b6a31e14fa">fcn.0042dc02</a><br>@de21a548b66aa6c0b17491b6a31e14fa</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
mov ebp, esp
sub esp, 0x1c
mov edx, dword[ebp+0x10]
push esi
mov esi, dword[ebp+8]
push 0xfffffffffffffffe
pop eax
cmp esi, eax
mov dword[ebp-0x14], eax
mov dword[ebp-0x1c], edx
jne off.b53
call fcn.0040e00a
and dword[eax], 0
call fcn.0040dff7
mov dword[eax], 9
or eax, 0xffffffff
jmp off.b1470
push ebx
xor ebx, ebx
cmp esi, ebx
jl off.b68
cmp esi, dword[0x439c68]
jb off.b107
call fcn.0040e00a
mov dword[eax], ebx
call fcn.0040dff7
push ebx
push ebx
push ebx
push ebx
push ebx
mov dword[eax], 9
call fcn.00408d56
add esp, 0x14
or eax, 0xffffffff
jmp off.b1469
mov eax, esi
sar eax, 5
push edi
lea edi, [eax*4+0x439c80]
mov eax, dword[edi]
and esi, 0x1f
shl esi, 6
add eax, esi
mov cl, byte[eax+4]
test cl, 1
jne off.b158
call fcn.0040e00a
mov dword[eax], ebx
call fcn.0040dff7
mov dword[eax], 9
jmp off.b264
cmp edx, 0x7fffffff
ja off.b246
cmp edx, ebx
mov dword[ebp-0x10], ebx
je off.b1466
test cl, 2
jne off.b1466
cmp dword[ebp+0xc], ebx
je off.b246
mov al, byte[eax+0x24]
add al, al
sar al, 1
mov byte[ebp-2], al
movsx eax, al
dec eax
push 4
pop ecx
je off.b238
dec eax
jne off.b227
mov eax, edx
not eax
test al, 1
je off.b246
and edx, 0xfffffffe
mov dword[ebp+0x10], edx
mov eax, dword[ebp+0xc]
mov dword[ebp-0xc], eax
jmp off.b367
mov eax, edx
not eax
test al, 1
jne off.b279
call fcn.0040e00a
mov dword[eax], ebx
call fcn.0040dff7
mov dword[eax], 0x16
push ebx
push ebx
push ebx
push ebx
push ebx
call fcn.00408d56
add esp, 0x14
jmp off.b331
mov eax, edx
shr eax, 1
cmp eax, ecx
mov dword[ebp+0x10], ecx
jb off.b293
mov dword[ebp+0x10], eax
push dword[ebp+0x10]
call fcn.00412591
cmp eax, ebx
pop ecx
mov dword[ebp-0xc], eax
jne off.b339
call fcn.0040dff7
mov dword[eax], 0xc
call fcn.0040e00a
mov dword[eax], 8
or eax, 0xffffffff
jmp off.b1468
push 1
push ebx
push ebx
push dword[ebp+8]
call fcn.00414a2e
mov ecx, dword[edi]
mov dword[esi+ecx+0x28], eax
mov eax, dword[ebp-0xc]
add esp, 0x10
mov dword[esi+ecx+0x2c], edx
mov ecx, dword[edi]
add ecx, esi
test byte[ecx+4], 0x48
je off.b493
mov cl, byte[ecx+5]
cmp cl, 0xa
je off.b493
cmp dword[ebp+0x10], ebx
je off.b493
mov byte[eax], cl
mov ecx, dword[edi]
inc eax
dec dword[ebp+0x10]
cmp byte[ebp-2], bl
mov dword[ebp-0x10], 1
mov byte[esi+ecx+5], 0xa
je off.b493
mov ecx, dword[edi]
mov cl, byte[esi+ecx+0x25]
cmp cl, 0xa
je off.b493
cmp dword[ebp+0x10], ebx
je off.b493
mov byte[eax], cl
mov ecx, dword[edi]
inc eax
dec dword[ebp+0x10]
cmp byte[ebp-2], 1
mov dword[ebp-0x10], 2
mov byte[esi+ecx+0x25], 0xa
jne off.b493
mov ecx, dword[edi]
mov cl, byte[esi+ecx+0x26]
cmp cl, 0xa
je off.b493
cmp dword[ebp+0x10], ebx
je off.b493
mov byte[eax], cl
mov ecx, dword[edi]
inc eax
dec dword[ebp+0x10]
mov dword[ebp-0x10], 3
mov byte[esi+ecx+0x26], 0xa
push ebx
lea ecx, [ebp-0x18]
push ecx
push dword[ebp+0x10]
push eax
mov eax, dword[edi]
push dword[esi+eax]
call dword[sym.imp.KERNEL32.dll_ReadFile]
test eax, eax
je off.b1413
mov ecx, dword[ebp-0x18]
cmp ecx, ebx
jl off.b1413
cmp ecx, dword[ebp+0x10]
ja off.b1413
mov eax, dword[edi]
add dword[ebp-0x10], ecx
lea eax, [esi+eax+4]
test byte[eax], 0x80
je off.b1045
cmp byte[ebp-2], 2
je off.b1103
cmp ecx, ebx
je off.b586
mov ecx, dword[ebp-0xc]
cmp byte[ecx], 0xa
jne off.b586
or byte[eax], 4
jmp off.b589
and byte[eax], 0xfb
mov ebx, dword[ebp-0xc]
mov eax, dword[ebp-0x10]
add eax, ebx
cmp ebx, eax
mov dword[ebp+0x10], ebx
mov dword[ebp-0x10], eax
jae off.b819
mov ecx, dword[ebp+0x10]
mov al, byte[ecx]
cmp al, 0x1a
je off.b798
cmp al, 0xd
je off.b640
mov byte[ebx], al
inc ebx
inc ecx
mov dword[ebp+0x10], ecx
jmp off.b784
mov eax, dword[ebp-0x10]
dec eax
cmp ecx, eax
jae off.b671
lea eax, [ecx+1]
cmp byte[eax], 0xa
jne off.b666
inc ecx
inc ecx
mov dword[ebp+0x10], ecx
mov byte[ebx], 0xa
jmp off.b783
mov dword[ebp+0x10], eax
jmp off.b780
inc dword[ebp+0x10]
push 0
lea eax, [ebp-0x18]
push eax
push 1
lea eax, [ebp-1]
push eax
mov eax, dword[edi]
push dword[esi+eax]
call dword[sym.imp.KERNEL32.dll_ReadFile]
test eax, eax
jne off.b711
call dword[sym.imp.KERNEL32.dll_GetLastError]
test eax, eax
jne off.b780
cmp dword[ebp-0x18], 0
je off.b780
mov eax, dword[edi]
test byte[esi+eax+4], 0x48
je off.b746
cmp byte[ebp-1], 0xa
je off.b661
mov byte[ebx], 0xd
mov eax, dword[edi]
mov cl, byte[ebp-1]
mov byte[esi+eax+5], cl
jmp off.b783
cmp ebx, dword[ebp-0xc]
jne off.b757
cmp byte[ebp-1], 0xa
je off.b661
push 1
push 0xffffffffffffffff
push 0xffffffffffffffff
push dword[ebp+8]
call fcn.00414a2e
add esp, 0x10
cmp byte[ebp-1], 0xa
je off.b784
mov byte[ebx], 0xd
inc ebx
mov eax, dword[ebp-0x10]
cmp dword[ebp+0x10], eax
jb off.b611
jmp off.b819
mov eax, dword[edi]
lea eax, [esi+eax+4]
test byte[eax], 0x40
jne off.b814
or byte[eax], 2
jmp off.b819
mov al, byte[ecx]
mov byte[ebx], al
inc ebx
mov eax, ebx
sub eax, dword[ebp-0xc]
cmp byte[ebp-2], 1
mov dword[ebp-0x10], eax
jne off.b1045
test eax, eax
je off.b1045
dec ebx
mov cl, byte[ebx]
test cl, cl
js off.b858
inc ebx
jmp off.b992
xor eax, eax
inc eax
movzx ecx, cl
jmp off.b881
cmp eax, 4
jg off.b890
cmp ebx, dword[ebp-0xc]
jb off.b890
dec ebx
movzx ecx, byte[ebx]
inc eax
cmp byte[ecx+0x437220], 0
je off.b866
mov dl, byte[ebx]
movzx ecx, dl
movsx ecx, byte[ecx+0x437220]
test ecx, ecx
jne off.b919
call fcn.0040dff7
mov dword[eax], 0x2a
jmp off.b1041
inc ecx
cmp ecx, eax
jne off.b928
add ebx, eax
jmp off.b992
mov ecx, dword[edi]
add ecx, esi
test byte[ecx+4], 0x48
je off.b974
inc ebx
cmp eax, 2
mov byte[ecx+5], dl
jl off.b956
mov dl, byte[ebx]
mov ecx, dword[edi]
mov byte[esi+ecx+0x25], dl
inc ebx
cmp eax, 3
jne off.b970
mov dl, byte[ebx]
mov ecx, dword[edi]
mov byte[esi+ecx+0x26], dl
inc ebx
sub ebx, eax
jmp off.b992
neg eax
cdq
push 1
push edx
push eax
push dword[ebp+8]
call fcn.00414a2e
add esp, 0x10
mov eax, dword[ebp-0x1c]
sub ebx, dword[ebp-0xc]
shr eax, 1
push eax
push dword[ebp+0xc]
push ebx
push dword[ebp-0xc]
push 0
push 0xfde9
call dword[sym.imp.KERNEL32.dll_MultiByteToWideChar]
test eax, eax
mov dword[ebp-0x10], eax
jne off.b1080
call dword[sym.imp.KERNEL32.dll_GetLastError]
push eax
call fcn.0040e01d
pop ecx
or dword[ebp-0x14], 0xffffffff
mov eax, dword[ebp-0xc]
cmp eax, dword[ebp+0xc]
je off.b1060
push eax
call fcn.00409437
pop ecx
mov eax, dword[ebp-0x14]
cmp eax, 0xfffffffe
jne off.b1468
mov eax, dword[ebp-0x10]
jmp off.b1468
mov eax, dword[ebp-0x10]
mov edx, dword[edi]
xor ecx, ecx
cmp eax, ebx
setne cl
add eax, eax
mov dword[ebp-0x10], eax
mov dword[esi+edx+0x30], ecx
jmp off.b1045
cmp ecx, ebx
je off.b1121
mov ecx, dword[ebp-0xc]
cmp word[ecx], 0xa
jne off.b1121
or byte[eax], 4
jmp off.b1124
and byte[eax], 0xfb
mov ebx, dword[ebp-0xc]
mov eax, dword[ebp-0x10]
add eax, ebx
cmp ebx, eax
mov dword[ebp+0x10], ebx
mov dword[ebp-0x10], eax
jae off.b1402
mov eax, dword[ebp+0x10]
movzx ecx, word[eax]
cmp cx, 0x1a
je off.b1378
cmp cx, 0xd
je off.b1183
mov word[ebx], cx
inc ebx
inc ebx
inc eax
inc eax
mov dword[ebp+0x10], eax
jmp off.b1364
mov ecx, dword[ebp-0x10]
add ecx, 0xfffffffe
cmp eax, ecx
jae off.b1226
lea ecx, [eax+2]
cmp word[ecx], 0xa
jne off.b1218
add eax, 4
mov dword[ebp+0x10], eax
mov word[ebx], 0xa
jmp off.b1362
mov dword[ebp+0x10], ecx
jmp off.b1357
add dword[ebp+0x10], 2
push 0
lea eax, [ebp-0x18]
push eax
push 2
lea eax, [ebp-8]
push eax
mov eax, dword[edi]
push dword[esi+eax]
call dword[sym.imp.KERNEL32.dll_ReadFile]
test eax, eax
jne off.b1267
call dword[sym.imp.KERNEL32.dll_GetLastError]
test eax, eax
jne off.b1357
cmp dword[ebp-0x18], 0
je off.b1357
mov eax, dword[edi]
test byte[esi+eax+4], 0x48
je off.b1321
cmp word[ebp-8], 0xa
je off.b1208
mov word[ebx], 0xd
mov eax, dword[edi]
mov cl, byte[ebp-8]
mov byte[esi+eax+5], cl
mov eax, dword[edi]
mov cl, byte[ebp-7]
mov byte[esi+eax+0x25], cl
mov eax, dword[edi]
mov byte[esi+eax+0x26], 0xa
jmp off.b1362
cmp ebx, dword[ebp-0xc]
jne off.b1333
cmp word[ebp-8], 0xa
je off.b1208
push 1
push 0xffffffffffffffff
push 0xfffffffffffffffe
push dword[ebp+8]
call fcn.00414a2e
add esp, 0x10
cmp word[ebp-8], 0xa
je off.b1364
mov word[ebx], 0xd
inc ebx
inc ebx
mov eax, dword[ebp-0x10]
cmp dword[ebp+0x10], eax
jb off.b1146
jmp off.b1402
mov ecx, dword[edi]
lea esi, [esi+ecx+4]
test byte[esi], 0x40
jne off.b1394
or byte[esi], 2
jmp off.b1402
mov ax, word[eax]
mov word[ebx], ax
inc ebx
inc ebx
sub ebx, dword[ebp-0xc]
mov dword[ebp-0x10], ebx
jmp off.b1045
call dword[sym.imp.KERNEL32.dll_GetLastError]
push 5
pop esi
cmp eax, esi
jne off.b1449
call fcn.0040dff7
mov dword[eax], 9
call fcn.0040e00a
mov dword[eax], esi
jmp off.b1041
cmp eax, 0x6d
jne off.b1034
mov dword[ebp-0x14], ebx
jmp off.b1045
xor eax, eax
pop edi
pop ebx
pop esi
leave
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/6c5b0418e4a4c57d99cda47d2717045d