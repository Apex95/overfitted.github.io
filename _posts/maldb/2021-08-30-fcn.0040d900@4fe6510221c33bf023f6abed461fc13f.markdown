---
layout: post
title:  "fcn.0040d900 @ 4fe6510221c33bf023f6abed461fc13f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0040d900
- **Origin (md5):** 4fe6510221c33bf023f6abed461fc13f
- **VirusTotal:** [virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f][virustotal_ref]

# Code Tags
<span class="tag" id="PROCESS">PROCESS</span>
<span class="tag" id="SCREEN">SCREEN</span>
<span class="tag" id="THREAD">THREAD</span>
<span class="tag" id="LINKING">LINKING</span>


# Behaviour Tags
<span class="bhv-tag" id="SCREENSHOTS_FOREGROUND_WINDOW">SCREENSHOTS_FOREGROUND_WINDOW / 0.23111051298301138</span><span class="bhv-tag" id="CREATES_SOCKET_LISTENER">CREATES_SOCKET_LISTENER / 0.030772270329797194</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [1564.7098388671875, -674.1392822265625, '<b><a href="/report/fcn.0040d900@4fe6510221c33bf023f6abed461fc13f">fcn.0040d900</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>', 'point { fill-color: #e0440e; }'],
[-1564.7100830078125, 674.1392822265625, '<b><a href="/report/fcn.0040f3b0@4fe6510221c33bf023f6abed461fc13f">fcn.0040f3b0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
mov ebp, esp
sub esp, 0x94
push ebx
push esi
push edi
mov edi, dword[ebp+8]
cmp word[edi], 0
je 0x40ea6c
mov bl, byte[ebp+0xc]
mov esi, dword[0x4c28ec]
mov dword[ebp-0x38], esi
test bl, bl
jne 0x40d99c
push 7
push str.Blind
push edi
call fcn.0048d597
add esp, 0xc
test eax, eax
jne 0x40d99c
add edi, 0xe
mov byte[0x4c53cf], 1
mov dword[ebp+8], edi
mov edi, dword[ebp+0x10]
mov eax, dword[esi+0x5c]
mov ecx, dword[esi+0x64]
mov dword[ebp-0x5c], eax
mov dword[ebp-0x58], ecx
cmp edi, 1
je 0x40d963
cmp edi, 3
jne 0x40d9cf
cmp dword[0x4c92dc], 0
je 0x40d9a5
call fcn.00408e20
test al, al
jne 0x40d9a5
test bl, bl
jne 0x40d993
call fcn.00408e80
test al, al
je 0x40d993
mov ecx, dword[ebp+8]
mov eax, str.Click
call fcn.00473c80
test eax, eax
jne 0x40d9a5
mov dword[ebp+0x10], 1
jmp 0x40d9cf
mov byte[0x4c53cf], 0
jmp 0x40d94a
cmp edi, 3
jne 0x40d9b3
mov dword[ebp+0x10], 2
jmp 0x40d9cf
xor eax, eax
mov dword[ebp+0x10], eax
cmp dword[esi+0x5c], eax
jge 0x40d9c5
cmp dword[esi+0x64], eax
jge 0x40d9c5
or eax, 0xffffffff
mov dword[esi+0x64], eax
mov dword[esi+0x5c], 0xffffffff
xor edi, edi
mov byte[ebp-0xb], 0
cmp dword[ebp+0x14], edi
je 0x40da77
mov edx, dword[ebp+0x14]
push edi
push edx
call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]
mov ebx, eax
mov dword[ebp-0x54], ebx
test ebx, ebx
je 0x40da20
cmp ebx, dword[0x4c85cc]
je 0x40da20
mov esi, dword[ebp+0x14]
call fcn.00478540
test al, al
jne 0x40da1d
mov eax, dword[0x4c85cc]
push 1
push ebx
push eax
call dword[sym.imp.USER32.dll_AttachThreadInput]
test eax, eax
setne byte[ebp-0xb]
mov edi, ebx
mov esi, dword[ebp-0x38]
push edi
call dword[sym.imp.USER32.dll_GetKeyboardLayout]
mov dword[0x4c53f4], eax
push eax
xor eax, eax
call fcn.00411f10
add esp, 4
push 1
mov dword[0x4c53f0], eax
call fcn.00411940
add esp, 4
cmp dword[0x4c65e8], 0
mov bl, al
mov byte[ebp-4], bl
je 0x40db83
mov cl, byte[0x4c64b5]
mov dl, byte[0x4c64b7]
mov al, cl
not cl
and al, dl
and cl, dl
mov byte[ebp-2], dl
mov byte[ebp-0xa], cl
jmp 0x40dbae
test byte[0x4c90f2], 0xc0
je 0x40db65
call dword[sym.imp.KERNEL32.dll_GetTickCount]
sub eax, dword[0x4c90e8]
cmp eax, 0x32
jae 0x40db65
cmp dword[ebp+0x10], 2
je 0x40db65
cmp byte[0x4c53cf], 0
jne 0x40db65
cmp byte[0x4c92ce], 0
je 0x40db65
call dword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
cmp eax, dword[0x4c85cc]
jne 0x40db65
mov eax, dword[ebp+8]
test bl, bl
mov ebx, 0x4a3834
je 0x40db33
call fcn.004095d0
test eax, eax
setne al
test al, al
je 0x40db65
lea esp, [esp]
mov ebx, dword[sym.imp.USER32.dll_GetAsyncKeyState]
push 0x5b
call ebx
mov ecx, 0x8000
test cx, ax
jne 0x40db12
push 0x5c
call ebx
mov edx, 0x8000
test dx, ax
je 0x40db65
push 1
push 0x8000012f
mov dword[0x4c28b4], edi
call fcn.00401340
add esp, 8
mov dword[0x4c28b4], 1
jmp 0x40daf0
call fcn.004095d0
test eax, eax
je 0x40db65
lea esp, [esp]
add eax, 2
mov ebx, 0x4a383c
call fcn.004095d0
test eax, eax
je 0x40daf0
cmp word[eax], 0x7b
je 0x40daf0
mov ebx, 0x4a3834
call fcn.004095d0
test eax, eax
jne 0x40db40
call dword[sym.imp.USER32.dll_GetForegroundWindow]
test eax, eax
je 0x40da20
push 0
push eax
call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]
mov edi, eax
jmp 0x40da20
call dword[sym.imp.KERNEL32.dll_GetTickCount]
sub eax, dword[0x4c90e8]
cmp eax, dword[0x4c28ac]
jae 0x40dba3
mov al, byte[0x4c90f2]
and al, bl
mov byte[ebp-2], al
jmp 0x40dbaa
mov byte[ebp-2], 0
mov al, byte[ebp-2]
mov byte[ebp-0xa], 0
mov cl, byte[0x4c7ec1]
not al
and al, bl
and cl, al
mov al, byte[0x4c53cf]
mov byte[0x4c7ec1], cl
test al, al
je 0x40dbd5
not cl
and cl, bl
mov byte[ebp-3], cl
mov byte[ebp-8], bl
jmp 0x40dbdc
mov byte[ebp-3], 0
mov byte[ebp-8], cl
cmp byte[esi+0xef], 0
je 0x40dbfd
test al, al
jne 0x40dbfd
push 2
mov bl, 0x14
call fcn.00411130
mov bl, byte[ebp-4]
add esp, 4
mov dword[ebp-0x40], eax
jmp 0x40dc04
mov dword[ebp-0x40], 0
mov edi, dword[ebp+0x10]
mov dword[0x4c7f18], edi
test edi, edi
je 0x40dc76
cmp edi, 1
jne 0x40dc27
mov eax, 0x36b0
mov dword[0x4c53e4], 0x1f4
jmp 0x40dc36
mov eax, 0x2ee0
mov dword[0x4c53e4], 0x5dc
call fcn.00494320
mov eax, esp
mov dword[0x4c53ec], eax
mov eax, 0x80000000
mov byte[0x4c53d7], bl
mov dword[0x4c53d8], eax
mov dword[0x4c53dc], eax
mov byte[0x4c53d6], 0
mov dword[0x4c53e8], 0
mov byte[0x4c53d5], 0
mov byte[0x4c53d4], 1
mov al, byte[0x4c6ec4]
mov byte[ebp-0x25], al
mov eax, dword[0x4c29c8]
cmp eax, 8
je 0x40dc8d
cmp eax, 0xa
jne 0x40dcce
test edi, edi
jne 0x40dcce
cmp dword[ebp+0x14], edi
jne 0x40dcce
test byte[0x4c9b80], 1
mov byte[ebp-4], 1
jne 0x40dcd4
or dword[0x4c9b80], 1
push str.BlockInput
push str.user32
call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]
push eax
call dword[sym.imp.KERNEL32.dll_GetProcAddress]
mov edi, dword[0x4c7f18]
mov dword[0x4c9b7c], eax
jmp 0x40dcd9
mov byte[ebp-4], 0
jmp 0x40dcee
mov eax, dword[0x4c9b7c]
test eax, eax
je 0x40dce7
push 1
call eax
mov edi, dword[0x4c7f18]
mov byte[0x4c6ec4], 1
mov edx, dword[ebp+8]
xor ecx, ecx
mov word[ebp-0x2a], cx
mov byte[ebp-1], 0
cmp word[edx], cx
je 0x40e6e4
mov esi, edx
cmp dword[0x4c7f18], 0
mov byte[ebp-9], 0
jne 0x40dd6f
mov edi, dword[sym.imp.KERNEL32.dll_GetTickCount]
call edi
sub eax, dword[0x4c9124]
mov ecx, dword[0x4c28ec]
cmp eax, dword[ecx+0xd4]
jbe 0x40dd6f
push 0
push 0
push 0
push 0
lea edx, [ebp-0x90]
push edx
call dword[sym.imp.USER32.dll_PeekMessageW]
test eax, eax
je 0x40dd68
push 1
push 0xffffffffffffffff
mov dword[0x4c28b4], 0
call fcn.00401340
add esp, 8
mov dword[0x4c28b4], 1
call edi
mov dword[0x4c9124], eax
cmp byte[ebp+0xc], 0
jne 0x40e599
movzx eax, word[esi]
push eax
push str.^+!_{}
call fcn.0048db21
add esp, 8
test eax, eax
je 0x40e599
movzx eax, word[esi]
add eax, 0xffffffdf
cmp eax, 0x5c
ja case.0x40dda8.34
movzx ecx, byte[eax+0x40ea98]
jmp dword[ecx*4+0x40ea7c]
test byte[ebp-8], 3
jne case.0x40dda8.34
or byte[ebp-1], 1
jmp case.0x40dda8.34
test byte[ebp-8], 0x30
jne case.0x40dda8.34
or byte[ebp-1], 0x10
jmp case.0x40dda8.34
test byte[ebp-8], 0xc
jne case.0x40dda8.34
or byte[ebp-1], 4
jmp case.0x40dda8.34
test byte[ebp-8], 0xc0
jne case.0x40dda8.34
or byte[ebp-1], 0x40
jmp case.0x40dda8.34
lea ebx, [esi+2]
push 0x7d
push ebx
call fcn.0048db21
mov edi, eax
add esp, 8
mov dword[ebp-0x18], edi
test edi, edi
je case.0x40dda8.34
mov eax, ebx
call fcn.00409620
mov esi, eax
mov ebx, edi
sub ebx, esi
sar ebx, 1
mov dword[ebp+8], esi
mov dword[ebp-0x30], ebx
jne 0x40dea9
movzx ecx, word[edi+2]
lea eax, [edi+2]
cmp ecx, 0x7d
jne 0x40de45
mov dword[ebp-0x18], eax
mov dword[ebp-0x30], 1
jmp 0x40dea3
cmp ecx, 0x20
je 0x40de53
cmp ecx, 9
jne 0x40e58c
call fcn.00409620
push 4
mov edi, eax
push str.Down
push edi
call fcn.0048d597
add esp, 0xc
test eax, eax
je 0x40de86
push 2
push 0x4a0d58
push edi
call fcn.0048d597
add esp, 0xc
test eax, eax
jne 0x40e58c
push 0x7d
push edi
call fcn.0048db21
add esp, 8
mov dword[ebp-0x18], eax
test eax, eax
je case.0x40dda8.34
sub eax, esi
sar eax, 1
mov dword[ebp-0x30], eax
mov ebx, dword[ebp-0x30]
mov edi, dword[ebp-0x18]
push 5
push str.Click
push esi
call fcn.0048d597
add esp, 0xc
test eax, eax
jne 0x40df51
xor edx, edx
lea eax, [ebp-0x48]
push eax
mov word[edi], dx
lea ecx, [ebp-0x24]
push ecx
lea edx, [ebp-0x10]
push edx
lea eax, [ebp-0x1d]
push eax
lea ecx, [ebp-0x50]
push ecx
lea edx, [ebp-0x4c]
push edx
lea eax, [esi+0xa]
call fcn.00409620
call fcn.0040fa80
mov ecx, dword[ebp-0x24]
add esp, 0x18
mov eax, 0x7d
mov word[edi], ax
cmp ecx, 1
jge 0x40df2c
mov edx, dword[ebp-0x38]
movzx eax, byte[edx+0xeb]
mov ecx, dword[ebp-0x48]
push ecx
push eax
lea ecx, [ebp-0x50]
push ecx
lea ecx, [ebp-0x64]
lea eax, [ebp-0x4c]
call fcn.004106d0
mov edx, dword[ebp-0x18]
add esp, 0xc
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
mov edx, dword[ebp-0x48]
mov eax, dword[ebp-0x50]
push edx
mov edx, dword[ebp-0x4c]
push eax
mov eax, dword[ebp+0x14]
push edx
mov edx, dword[ebp-0x10]
push eax
mov eax, dword[ebp-8]
push 0
push edx
mov edx, dword[ebp-0x1d]
push eax
push 0
push edx
jmp 0x40e581
push 3
push 0x4a3854
push esi
call fcn.0048d597
add esp, 0xc
test eax, eax
jne 0x40df76
mov edx, dword[ebp-0x18]
mov byte[ebp+0xc], 1
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
mov ecx, dword[ebp-0x18]
xor eax, eax
mov word[ecx], ax
mov dword[ebp-0x44], ebx
mov ebx, 0x4a352c
mov eax, esi
mov dword[ebp-0x10], 2
mov dword[ebp-0x24], 1
call fcn.004095d0
mov edi, eax
test edi, edi
je 0x40e025
movzx edx, word[edi]
xor eax, eax
mov word[edi], ax
mov eax, edi
sub eax, dword[ebp+8]
mov dword[ebp-0x60], edx
sar eax, 1
mov dword[ebp-0x44], eax
lea eax, [edi+2]
call fcn.00409620
mov ecx, dword[ebp-0x18]
mov esi, eax
sub ecx, esi
sar ecx, 1
je 0x40e022
push 4
push str.Down
push esi
call fcn.0048d597
add esp, 0xc
test eax, eax
jne 0x40dfff
push 4
push str.Temp
add esi, 8
push esi
mov dword[ebp-0x10], eax
call fcn.0048d597
add esp, 0xc
test eax, eax
setne byte[ebp-0x19]
jmp 0x40e022
push 0x4a0d58
push esi
call fcn.0048cd49
add esp, 8
test eax, eax
jne 0x40e01a
mov dword[ebp-0x10], 1
jmp 0x40e022
call fcn.0040d260
mov dword[ebp-0x24], eax
mov esi, dword[ebp+8]
movzx eax, word[esi]
test ax, ax
je 0x40e06e
cmp word[esi+2], 0
jne 0x40e047
mov ecx, dword[0x4c53f4]
lea esi, [ebp-1]
call fcn.00412360
mov esi, dword[ebp+8]
jmp 0x40e070
mov ebx, dword[ebp+8]
xor esi, esi
lea esp, [esp]
mov edx, dword[esi*8+0x4c36f8]
push ebx
push edx
call fcn.0048cd49
add esp, 8
test eax, eax
je 0x40e085
inc esi
cmp esi, 0x6d
jl 0x40e050
mov esi, dword[ebp+8]
xor al, al
mov bl, al
mov byte[ebp-0x1d], bl
test al, al
je 0x40e091
mov dword[ebp-0x3c], 0
jmp 0x40e116
mov al, byte[esi*8+0x4c36fc]
mov esi, dword[ebp+8]
jmp 0x40e070
mov eax, esi
call fcn.00412200
movzx eax, ax
mov dword[ebp-0x3c], eax
test ax, ax
jne 0x40e116
mov ax, word[esi]
call fcn.004095a0
cmp ax, 0x56
jne 0x40e116
mov ax, word[esi+2]
call fcn.004095a0
cmp ax, 0x4b
jne 0x40e116
mov eax, dword[ebp+8]
add eax, 4
mov ebx, 0x4a3868
call fcn.004095d0
mov esi, eax
test esi, esi
je 0x40e0fb
mov ax, word[esi+2]
call fcn.004095a0
cmp ax, 0x43
jne 0x40e0fb
push 0x10
push 0
add esi, 4
push esi
call fcn.0048e37b
movzx eax, ax
add esp, 0xc
mov dword[ebp-0x3c], eax
mov eax, dword[ebp+8]
push 0x10
add eax, 4
push 0
push eax
call fcn.0048e37b
mov esi, dword[ebp+8]
mov bl, al
add esp, 0xc
mov byte[ebp-0x1d], bl
test edi, edi
je 0x40e121
mov cx, word[ebp-0x60]
mov word[edi], cx
cmp dword[ebp-0x24], 1
mov eax, dword[ebp-0x18]
mov edx, 0x7d
mov word[eax], dx
jl 0x40e58c
test bl, bl
jne 0x40e4ee
cmp word[ebp-0x3c], 0
jne 0x40e4ee
mov eax, 1
cmp dword[ebp-0x44], eax
jne 0x40e1a0
cmp dword[ebp-0x10], eax
je 0x40e58c
cmp dword[ebp+0x14], 0
je 0x40e184
movzx ecx, word[esi]
mov edx, dword[ebp+0x14]
push 0
push ecx
push 0x102
push edx
call dword[sym.imp.USER32.dll_PostMessageW]
mov edx, dword[ebp-0x18]
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
movzx eax, word[esi]
push eax
mov eax, dword[ebp-0x24]
call fcn.0040eea0
mov edx, dword[ebp-0x18]
add esp, 4
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
cmp dword[ebp+0x14], 0
mov esi, dword[ebp-0x30]
mov edi, dword[ebp+8]
lea ecx, [ebp-8]
push ecx
lea edx, [ebp-0x10]
sete bl
push edx
call fcn.004123e0
add esp, 8
mov byte[ebp-0x1d], al
test al, al
je 0x40e3a3
mov edi, dword[ebp+0x14]
test edi, edi
jne 0x40e1de
cmp dword[ebp-0x10], edi
jne 0x40e1d9
mov byte[ebp-9], al
jmp 0x40e1de
call fcn.0040d430
cmp dword[0x4c7f18], 0
je 0x40e1f2
mov bl, byte[0x4c53d7]
jmp 0x40e2e4
cmp dword[0x4c65e8], 0
je 0x40e206
mov bl, byte[0x4c64b5]
jmp 0x40e2e4
mov esi, dword[sym.imp.USER32.dll_GetAsyncKeyState]
push 0xa0
xor bl, bl
call esi
mov ecx, 0x8000
test cx, ax
je 0x40e221
mov bl, 0x10
push 0xa1
call esi
mov edx, 0x8000
test dx, ax
je 0x40e235
or bl, 0x20
push 0xa2
call esi
mov ecx, 0x8000
test cx, ax
je 0x40e249
or bl, 1
push 0xa3
call esi
mov edx, 0x8000
test dx, ax
je 0x40e25d
or bl, 2
push 0xa4
call esi
mov ecx, 0x8000
test cx, ax
je 0x40e271
or bl, 4
push 0xa5
call esi
mov edx, 0x8000
test dx, ax
je 0x40e285
or bl, 8
push 0x5b
call esi
mov ecx, 0x8000
test cx, ax
je 0x40e296
or bl, 0x40
push 0x5c
call esi
mov edx, 0x8000
test dx, ax
je 0x40e2a7
or bl, 0x80
cmp dword[0x4c65e8], 0
je 0x40e2e4
mov al, bl
not al
and al, byte[0x4c64b5]
je 0x40e2e4
mov cl, byte[0x4c64b7]
not al
and byte[0x4c64b5], al
and byte[0x4c64b6], al
and cl, al
mov al, cl
mov byte[0x4c64b7], cl
mov ecx, 0x4c64d8
call fcn.00411a40
mov eax, dword[ebp-8]
push 0
push 0
push edi
push ebx
push eax
mov esi, 0xffc3d44d
call fcn.00411240
mov eax, dword[ebp-0x24]
add esp, 0x14
test eax, eax
jle 0x40e58c
mov ebx, dword[ebp-0x1d]
mov edi, eax
jmp 0x40e310
mov ecx, dword[ebp+0x14]
mov edx, dword[ebp-0x10]
push 0xffc3d44d
push 1
push ecx
push 0
push ebx
push edx
call fcn.0040f3b0
add esp, 0x18
cmp dword[0x4c7f18], 0
jne 0x40e38f
mov esi, dword[sym.imp.KERNEL32.dll_GetTickCount]
call esi
sub eax, dword[0x4c9124]
mov ecx, dword[0x4c28ec]
cmp eax, dword[ecx+0xd4]
jbe 0x40e38f
push 0
push 0
push 0
push 0
lea edx, [ebp-0x90]
push edx
call dword[sym.imp.USER32.dll_PeekMessageW]
test eax, eax
je 0x40e388
push 1
push 0xffffffffffffffff
mov dword[0x4c28b4], 0
call fcn.00401340
add esp, 8
mov dword[0x4c28b4], 1
call esi
mov dword[0x4c9124], eax
dec edi
jne 0x40e310
mov edx, dword[ebp-0x18]
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
mov ebx, dword[ebp-0x30]
mov edi, dword[ebp+8]
cmp ebx, 4
jbe 0x40e41e
push 4
push str.ASC_
push edi
call fcn.0048d597
add esp, 0xc
test eax, eax
jne 0x40e41e
mov esi, dword[ebp+0x14]
test esi, esi
jne 0x40e421
lea eax, [edi+6]
call fcn.00409620
mov edi, eax
call fcn.0040efb0
cmp dword[0x4c7f18], 2
jne 0x40e3ff
mov eax, dword[0x4c28ec]
mov eax, dword[eax+0x60]
push eax
call fcn.00410e40
mov edx, dword[ebp-0x18]
add esp, 4
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
mov ecx, dword[0x4c28ec]
mov eax, dword[ecx+0x5c]
push eax
call fcn.00410e40
mov edx, dword[ebp-0x18]
add esp, 4
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
mov esi, dword[ebp+0x14]
cmp ebx, 2
jbe 0x40e58c
push 2
push 0x4a387c
push edi
call fcn.0048d597
add esp, 0xc
test eax, eax
jne 0x40e58c
push 0x10
push eax
add edi, 4
push edi
call fcn.0048e37b
add esp, 0xc
movzx ecx, ax
test esi, esi
je 0x40e469
push 0
push ecx
push 0x102
push esi
call dword[sym.imp.USER32.dll_PostMessageW]
jmp 0x40e4a7
cmp dword[0x4c7f18], 2
je 0x40e487
movzx edx, byte[ebp-8]
movzx eax, byte[ebp-1]
or eax, edx
push ecx
call fcn.0040d4b0
add esp, 4
jmp 0x40e4a7
push 0xa
lea edx, [ebp-0x72]
push edx
mov eax, 0x30
push ecx
mov word[ebp-0x74], ax
call fcn.0048cac5
add esp, 0xc
lea edi, [ebp-0x74]
call fcn.0040efb0
cmp dword[0x4c7f18], 2
jne 0x40e4cf
mov ecx, dword[0x4c28ec]
mov eax, dword[ecx+0x60]
push eax
call fcn.00410e40
mov edx, dword[ebp-0x18]
add esp, 4
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
mov edx, dword[0x4c28ec]
mov eax, dword[edx+0x5c]
push eax
call fcn.00410e40
mov edx, dword[ebp-0x18]
add esp, 4
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
mov esi, dword[ebp-0x3c]
xor ecx, ecx
mov edx, esi
mov al, bl
call fcn.00411b10
mov byte[ebp-0x14], al
test al, al
je 0x40e55d
cmp dword[ebp+0x14], 0
jne 0x40e55d
mov ecx, dword[ebp-0x10]
test ecx, ecx
jne 0x40e523
mov byte[ebp-9], bl
cmp byte[ebp-0x19], cl
je 0x40e51e
or byte[0x4c7ec1], al
or byte[ebp-8], al
jmp 0x40e55d
cmp ecx, 1
jne 0x40e55d
mov al, bl
call fcn.0040d430
mov al, byte[ebp-0x14]
mov cl, byte[0x4c7ec1]
not al
and byte[ebp-3], al
and cl, al
mov byte[0x4c7ec1], cl
cmp bl, 0xa5
jne 0x40e557
cmp dword[0x4c53f0], 3
jne 0x40e557
and byte[ebp-3], 0xfe
or cl, byte[ebp-3]
mov byte[ebp-8], cl
mov eax, dword[ebp+0x14]
mov ecx, dword[ebp-0x14]
mov edx, dword[ebp-0x10]
push 0
push 0x80000000
push 0x80000000
push eax
mov eax, dword[ebp-8]
push ecx
mov ecx, dword[ebp-0x1d]
push edx
push eax
push esi
push ecx
mov ecx, dword[ebp-0x24]
mov al, byte[ebp-1]
call fcn.0040eb00
add esp, 0x24
mov edx, dword[ebp-0x18]
mov dword[ebp+8], edx
mov esi, edx
jmp 0x40e6c2
mov ax, word[esi]
mov word[ebp-0x2c], ax
test ax, ax
je 0x40e651
cmp word[ebp-0x2a], 0
jne 0x40e5c9
mov ecx, dword[0x4c53f4]
mov eax, dword[ebp-0x2c]
lea esi, [ebp-1]
call fcn.00412360
mov esi, dword[ebp+8]
jmp 0x40e653
movzx esi, ax
test esi, 0xffffff80
jne 0x40e5e6
push 2
push esi
call fcn.0048df9e
add esp, 8
test eax, eax
je 0x40e5e6
and esi, 0xffffffdf
cmp si, 0x56
jne 0x40e625
movzx esi, word[ebp-0x2a]
test esi, 0xffffff80
jne 0x40e60a
push 2
push esi
call fcn.0048df9e
add esp, 8
test eax, eax
je 0x40e60a
and esi, 0xffffffdf
cmp si, 0x4b
jne 0x40e625
push 0x10
lea eax, [ebp-0x28]
push 0
push eax
call fcn.0048e37b
mov esi, dword[ebp+8]
add esp, 0xc
jmp 0x40e653
xor esi, esi
jmp 0x40e630
mov edx, dword[esi*8+0x4c36f8]
lea ecx, [ebp-0x2c]
push ecx
push edx
call fcn.0048cd49
add esp, 8
test eax, eax
je 0x40e68d
inc esi
cmp esi, 0x6d
jl 0x40e630
mov esi, dword[ebp+8]
xor al, al
mov byte[ebp-0x34], al
mov byte[ebp-0x1d], al
test al, al
mov eax, dword[ebp+0x14]
je 0x40e699
mov ecx, dword[ebp-8]
mov edx, dword[ebp-0x34]
push 0
push 0x80000000
push 0x80000000
push eax
mov al, byte[ebp-1]
push 0
push 2
push ecx
push 0
push edx
mov ecx, 1
call fcn.0040eb00
add esp, 0x24
jmp 0x40e6c2
mov al, byte[esi*8+0x4c36fc]
mov esi, dword[ebp+8]
jmp 0x40e653
test eax, eax
je 0x40e6b1
movzx ecx, word[esi]
push 0
push ecx
push 0x102
push eax
call dword[sym.imp.USER32.dll_PostMessageW]
jmp 0x40e6c2
movzx edx, word[esi]
push edx
mov eax, 1
call fcn.0040eea0
add esp, 4
mov byte[ebp-1], 0
mov al, byte[ebp-9]
add esi, 2
cmp word[esi], 0
mov dword[ebp+8], esi
mov byte[0x4c7ec0], al
jne 0x40dd06
mov edi, dword[0x4c7f18]
test edi, edi
je 0x40e7a4
cmp byte[0x4c53d5], 0
mov dword[ebp-0x14], 0xffffffff
jne 0x40e75b
cmp dword[0x4c53e8], 0
jbe 0x40e75b
cmp byte[0x4c53cf], 0
je 0x40e712
xor eax, eax
jmp 0x40e71e
movzx eax, byte[ebp-0xa]
movzx ecx, byte[ebp-2]
not eax
and eax, ecx
or al, byte[ebp-8]
movzx edx, byte[0x4c53d7]
mov ebx, 1
push ebx
push ebx
mov byte[ebp+8], al
mov edi, dword[ebp+8]
push 0
push edx
push edi
mov esi, 0xffc3d44d
call fcn.00411240
add esp, 0x14
lea eax, [ebp-0x14]
push edi
push eax
call fcn.00410cf0
mov edi, dword[0x4c7f18]
add esp, 8
jmp 0x40e760
mov ebx, 1
sub edi, ebx
neg edi
sbb edi, edi
and edi, 0x3e8
add edi, 0x1f4
cmp dword[0x4c53e4], edi
jbe 0x40e789
mov ecx, dword[0x4c53ec]
push ecx
call fcn.0048e3af
add esp, 4
mov edx, dword[ebp-0x14]
push edx
mov dword[0x4c7f18], 0
call fcn.00410e40
add esp, 4
jmp 0x40e91f
cmp dword[0x4c65e8], 0
je 0x40e7b5
mov cl, byte[0x4c64b7]
jmp 0x40e7d9
cmp dword[0x4c28ac], 0
jl 0x40e7d6
call dword[sym.imp.KERNEL32.dll_GetTickCount]
sub eax, dword[0x4c90e8]
cmp eax, dword[0x4c28ac]
jb 0x40e7d6
xor cl, cl
jmp 0x40e7d9
mov cl, byte[ebp-2]
cmp byte[0x4c53cf], 0
je 0x40e7fb
mov dl, byte[ebp-2]
mov al, cl
xor al, dl
mov bl, al
and bl, dl
not bl
and bl, byte[ebp-8]
and al, cl
or bl, al
mov byte[ebp+8], bl
jmp 0x40e808
mov al, byte[ebp-0xa]
not al
and al, cl
or al, byte[ebp-8]
mov byte[ebp+8], al
cmp dword[0x4c65e8], 0
je 0x40e81e
mov al, byte[0x4c64b5]
mov byte[ebp-0x14], al
jmp 0x40e8ff
mov esi, dword[sym.imp.USER32.dll_GetAsyncKeyState]
push 0xa0
xor bl, bl
call esi
mov ecx, 0x8000
test cx, ax
je 0x40e839
mov bl, 0x10
push 0xa1
call esi
mov edx, 0x8000
test dx, ax
je 0x40e84d
or bl, 0x20
push 0xa2
call esi
mov ecx, 0x8000
test cx, ax
je 0x40e861
or bl, 1
push 0xa3
call esi
mov edx, 0x8000
test dx, ax
je 0x40e875
or bl, 2
push 0xa4
call esi
mov ecx, 0x8000
test cx, ax
je 0x40e889
or bl, 4
push 0xa5
call esi
mov edx, 0x8000
test dx, ax
je 0x40e89d
or bl, 8
push 0x5b
call esi
mov ecx, 0x8000
test cx, ax
je 0x40e8ae
or bl, 0x40
push 0x5c
call esi
mov edx, 0x8000
test dx, ax
je 0x40e8bf
or bl, 0x80
cmp dword[0x4c65e8], 0
je 0x40e8fc
mov al, bl
not al
and al, byte[0x4c64b5]
je 0x40e8fc
mov cl, byte[0x4c64b7]
not al
and byte[0x4c64b5], al
and byte[0x4c64b6], al
and cl, al
mov al, cl
mov byte[0x4c64b7], cl
mov ecx, 0x4c64d8
call fcn.00411a40
mov byte[ebp-0x14], bl
mov eax, dword[ebp+0x14]
mov ecx, dword[ebp-0x14]
mov edx, dword[ebp+8]
mov ebx, 1
push ebx
push ebx
push eax
push ecx
push edx
mov esi, 0xffc3d44d
call fcn.00411240
add esp, 0x14
cmp dword[0x4c65e8], 0
je 0x40e940
mov al, byte[0x4c64b6]
mov cl, al
xor cl, byte[0x4c64b5]
and cl, al
not cl
and al, cl
mov byte[0x4c64b6], al
cmp dword[ebp-0x40], ebx
jne 0x40e9c0
mov esi, dword[sym.imp.USER32.dll_GetKeyState]
push 0x14
call esi
test al, 1
jne 0x40e9c0
push 0x14
call esi
mov edx, 0x8000
test dx, ax
je 0x40e977
push 0xffc3d44d
push 0
push 0
push 0
push 0x14
push ebx
call fcn.0040f3b0
add esp, 0x18
push 0xffc3d44d
push 0
push 0
push 0
push 0x14
push 2
call fcn.0040f3b0
add esp, 0x18
push 0
call dword[sym.imp.USER32.dll_GetForegroundWindow]
push eax
call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]
cmp eax, dword[0x4c85cc]
jne 0x40e9c0
push ebx
push 0xffffffffffffffff
mov dword[0x4c28b4], 0
call fcn.00401340
add esp, 8
mov dword[0x4c28b4], ebx
cmp byte[ebp-0xb], 0
je 0x40e9d9
mov eax, dword[ebp-0x54]
mov ecx, dword[0x4c85cc]
push 0
push eax
push ecx
call dword[sym.imp.USER32.dll_AttachThreadInput]
cmp byte[ebp-4], 0
je 0x40ea26
cmp byte[ebp-0x25], 0
jne 0x40ea26
test byte[0x4c9b80], 1
jne 0x40ea12
or dword[0x4c9b80], ebx
push str.BlockInput
push str.user32
call dword[sym.imp.KERNEL32.dll_GetModuleHandleW]
push eax
call dword[sym.imp.KERNEL32.dll_GetProcAddress]
mov dword[0x4c9b7c], eax
jmp 0x40ea17
mov eax, dword[0x4c9b7c]
test eax, eax
je 0x40ea1f
push 0
call eax
mov byte[0x4c6ec4], 0
cmp dword[ebp+0x10], ebx
jne 0x40ea5d
push 0
call dword[sym.imp.USER32.dll_GetForegroundWindow]
push eax
call dword[sym.imp.USER32.dll_GetWindowThreadProcessId]
cmp eax, dword[0x4c85cc]
jne 0x40ea5d
push ebx
push 0xffffffffffffffff
mov dword[0x4c28b4], 0
call fcn.00401340
add esp, 8
mov dword[0x4c28b4], ebx
mov eax, dword[ebp-0x38]
mov edx, dword[ebp-0x5c]
mov ecx, dword[ebp-0x58]
mov dword[eax+0x5c], edx
mov dword[eax+0x64], ecx
lea esp, [ebp-0xa0]
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f