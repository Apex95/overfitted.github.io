---
layout: post
title:  "fcn.004305f0 @ 4fe6510221c33bf023f6abed461fc13f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.004305f0
- **Origin (md5):** 4fe6510221c33bf023f6abed461fc13f
- **VirusTotal:** [virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.004305f0@4fe6510221c33bf023f6abed461fc13f">fcn.004305f0</a><br>@4fe6510221c33bf023f6abed461fc13f</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

sub esp, 0x208
push ebx
push ebp
xor ebx, ebx
push esi
push edi
mov edi, ecx
xor esi, esi
mov dword[esp+0x1c], edi
mov byte[esp+0x10], bl
mov byte[esp+0x11], bl
mov byte[esp+0x13], bl
mov byte[esp+0x12], bl
cmp byte[esp+0x234], bl
je off.b316
mov eax, dword[esp+0x220]
mov dword[esp+0x20], eax
cmp word[edi], si
je off.b263
push 0x3a
push edi
call fcn.0048db21
mov edx, eax
add esp, 8
mov dword[esp+0x28], edx
mov ecx, edi
movzx eax, word[ecx]
cmp eax, 0x20
je off.b101
cmp eax, 9
jne off.b106
add ecx, 2
jmp off.b88
mov ebp, ecx
cmp edx, esi
je off.b238
mov esi, edx
sub esi, edi
sar esi, 1
cmp esi, 0x20
jae off.b238
push esi
lea ecx, [esp+0x114]
push edi
push ecx
call fcn.0048fa44
xor edx, edx
add esp, 0xc
push edx
push 1
push edx
push edx
lea eax, [esp+0x120]
mov word[esp+esi*2+0x120], dx
call fcn.00473730
add esp, 0x10
test eax, eax
je off.b238
mov eax, dword[esp+0x28]
add eax, 2
mov dword[esp+0x1c], eax
call fcn.00409620
mov ebp, eax
cmp word[ebp], bx
jne off.b203
mov dword[esp+0x1c], ebp
lea esi, [esp+0x110]
call fcn.0040d260
mov ebx, eax
dec ebx
js off.b225
cmp ebx, 0xa
jl off.b238
mov eax, dword[esp+0x220]
push eax
jmp 0x4317ac
push 0x4a3164
push ebp
call fcn.0048cd49
add esp, 8
test eax, eax
jne off.b277
mov byte[esp+0x10], 1
xor esi, esi
imul ebx, ebx, 0x4c
add ebx, 0x4c6958
jmp off.b451
push str.Show
push ebp
call fcn.0048cd49
add esp, 8
test eax, eax
jne off.b261
imul ebx, ebx, 0x4c
xor esi, esi
mov byte[esp+0x11], 1
add ebx, 0x4c6958
jmp off.b451
mov edi, dword[esp+0x220]
push 0x3a
push edi
call fcn.0048db21
mov esi, eax
add esp, 8
test esi, esi
jne off.b344
mov esi, edi
jmp off.b400
mov eax, edi
call fcn.0040d200
test al, al
je off.b370
push 0x10
push 0
push edi
call fcn.0048e37b
add esp, 0xc
jmp off.b379
push edi
call fcn.0048dfe6
add esp, 4
lea ebx, [eax-1]
cmp ebx, 9
ja 0x4317ab
add esi, 2
lea ebx, [ebx]
movzx eax, word[esi]
cmp eax, 0x20
je off.b391
cmp eax, 9
je off.b391
push 0x4a3164
push esi
mov dword[esp+0x28], esi
call fcn.0048cd49
add esp, 8
test eax, eax
jne off.b529
mov byte[esp+0x10], 1
imul ebx, ebx, 0x4c
add ebx, 0x4c6660
xor esi, esi
mov edi, ebx
mov eax, dword[edi+0x20]
cmp eax, esi
je off.b474
push eax
call dword[sym.imp.USER32.dll_IsWindow]
test eax, eax
jne off.b474
mov dword[edi+0x20], esi
cmp byte[esp+0x11], 0
je off.b604
mov eax, dword[edi+0x20]
cmp eax, esi
je off.b511
push eax
call dword[sym.imp.USER32.dll_IsWindowVisible]
test eax, eax
jne off.b511
mov ecx, dword[edi+0x20]
push 4
push ecx
call dword[sym.imp.USER32.dll_ShowWindow]
mov eax, 1
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x208
ret 0x1c
push str.Show
push esi
call fcn.0048cd49
add esp, 8
test eax, eax
jne off.b554
mov byte[esp+0x11], 1
jmp off.b440
push 0
push 1
push 0
push 1
mov eax, esi
call fcn.00473730
add esp, 0x10
test eax, eax
je off.b440
call fcn.0040d260
mov dword[esp+0x28], eax
mov byte[esp+0x13], 1
mov byte[esp+0x12], 1
jmp off.b440
cmp byte[esp+0x10], 0
jne off.b805
cmp dword[edi+0x20], esi
je off.b805
mov edx, dword[esp+0x1c]
cmp word[edx], si
jne off.b805
cmp byte[esp+0x12], 0
jne off.b658
mov ebp, dword[esp+0x20]
cmp word[ebp], si
jne off.b809
cmp byte[esp+0x234], 0
mov esi, dword[sym.imp.USER32.dll_SendMessageW]
jne off.b711
cmp byte[esp+0x13], 0
je off.b711
mov ecx, dword[esp+0x28]
cmp dword[edi+8], ecx
je off.b711
mov eax, dword[edi+0x2c]
mov dword[edi+8], ecx
test eax, eax
je off.b711
push 0
push ecx
push 0x402
push eax
call esi
mov ecx, dword[esp+0x228]
cmp word[ecx], 0
je off.b739
mov eax, dword[edi+0x30]
test eax, eax
je off.b739
push ecx
push 0
push 0xc
push eax
call esi
mov eax, dword[esp+0x224]
cmp word[eax], 0
je off.b763
push eax
mov eax, dword[edi+0x34]
push 0
push 0xc
push eax
call esi
mov eax, dword[esp+0x22c]
cmp word[eax], 0
je off.b787
mov ecx, dword[edi+0x20]
push eax
push ecx
call dword[sym.imp.USER32.dll_SetWindowTextW]
mov eax, 1
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x208
ret 0x1c
mov ebp, dword[esp+0x20]
mov eax, dword[edi+0x20]
cmp eax, esi
je off.b823
push eax
call dword[sym.imp.USER32.dll_DestroyWindow]
mov eax, dword[edi+0x38]
mov ebx, dword[sym.imp.GDI32.dll_DeleteObject]
cmp eax, esi
je off.b839
push eax
call ebx
mov eax, dword[edi+0x3c]
cmp eax, esi
je off.b849
push eax
call ebx
mov eax, dword[edi+0x40]
cmp eax, esi
je off.b859
push eax
call ebx
mov eax, dword[edi+0x28]
cmp eax, esi
je off.b882
push eax
cmp dword[edi+0x24], esi
jne off.b876
call ebx
jmp off.b882
call dword[sym.imp.USER32.dll_DestroyIcon]
push 0x4c
push esi
push edi
call fcn.00495c20
add esp, 0xc
cmp byte[esp+0x10], 0
jne off.b511
mov edx, dword[esp+0x22c]
cmp word[edx], si
jne off.b949
mov eax, dword[0x4c90fc]
cmp eax, esi
je off.b938
mov dword[esp+0x22c], eax
cmp word[eax], si
jne off.b949
mov dword[esp+0x22c], 0x4ab02c
cmp byte[esp+0x234], 0
mov ebx, 0x80000000
mov eax, 0xff000000
mov byte[esp+0x12], 1
mov byte[esp+0x11], 1
mov byte[esp+0x10], 1
mov byte[esp+0x1b], 0
mov dword[esp+0x14], 0x88c00000
mov dword[esp+0x40], 8
mov dword[esp+0x4c], ebx
mov dword[esp+0x48], ebx
mov dword[esp+0x68], esi
mov dword[esp+0x50], esi
mov dword[esp+0x2c], esi
mov dword[esp+0x24], esi
mov dword[esp+0x58], esi
mov dword[esp+0x44], esi
mov dword[esp+0x7c], eax
mov dword[edi+0x44], eax
mov dword[edi+0x48], eax
mov dword[edi+4], ebx
je off.b1057
mov dword[edi], ebx
mov dword[edi+0x1c], ebx
jmp off.b1085
mov eax, dword[0x4c85d0]
push 0x60
push eax
push 0x12c
call dword[sym.imp.KERNEL32.dll_MulDiv]
mov dword[edi], eax
mov dword[edi+0x1c], 0x14
mov ecx, dword[esp+0x228]
mov dword[edi+0x18], ebx
cmp word[ecx], si
jne off.b1130
mov edx, dword[esp+0x224]
cmp word[edx], si
jne off.b1130
cmp byte[esp+0x234], 0
je off.b1130
mov dword[edi+0x10], esi
mov dword[edi+0xc], esi
jmp off.b1144
mov dword[edi+0xc], 0xa
mov dword[edi+0x10], 5
cmp word[ebp], si
je 0x430ea7
xor ebx, ebx
movzx esi, word[ebp]
test esi, 0xffffff80
jne off.b1186
push 2
push esi
call fcn.0048df9e
add esp, 8
cmp eax, ebx
je off.b1186
and esi, 0xffffffdf
movzx eax, si
add eax, 0xffffffbf
cmp eax, 0x19
ja case.0x430aa8.68
movzx eax, byte[eax+0x431804]
jmp dword[eax*4+0x4317cc]
and dword[esp+0x40], 0xfffffff7
jmp case.0x430aa8.68
movzx eax, word[ebp+2]
and dword[esp+0x14], 0xff3fffff
cmp eax, 0x31
jne 0x430ad7
or dword[esp+0x14], 0x800000
jmp case.0x430aa8.68
cmp eax, 0x32
jne case.0x430aa8.68
or dword[esp+0x14], 0x400000
jmp case.0x430aa8.68
cmp word[ebp+2], bx
je case.0x430aa8.68
mov ax, word[ebp+2]
add ebp, 2
call fcn.004095a0
movzx eax, ax
cmp eax, 0x42
je 0x430b2e
cmp eax, 0x54
je 0x430b2e
cmp eax, 0x57
je 0x430b2e
cmp word[ebp], 0x30
setne byte[esp+0x10]
cmp word[ebp+2], 0x30
setne byte[esp+0x11]
jmp case.0x430aa8.70
push 0x1f
lea ecx, [ebp+2]
push ecx
lea edx, [esp+0xd8]
push edx
call fcn.0048fa44
xor eax, eax
mov word[esp+0x11a], ax
add esp, 0xc
mov ebx, 0x4a352c
lea eax, [esp+0xd0]
call fcn.004095d0
test eax, eax
je 0x430b68
xor ecx, ecx
mov word[eax], cx
lea esi, [esp+0xd0]
call fcn.00474a80
mov esi, eax
cmp esi, 0xffffffff
jne 0x430bc0
lea eax, [esp+0xd0]
lea edx, [eax+2]
mov cx, word[eax]
add eax, 2
test cx, cx
jne 0x430b85
sub eax, edx
sar eax, 1
cmp eax, 6
jbe 0x430ba3
xor edx, edx
mov word[esp+0xdc], dx
push 0x10
lea eax, [esp+0xd4]
push 0
push eax
call fcn.0048e37b
add esp, 0xc
mov ecx, eax
call fcn.0042f740
mov esi, eax
mov ax, word[ebp]
call fcn.004095a0
movzx eax, ax
cmp eax, 0x42
je 0x430bef
cmp eax, 0x54
je 0x430bea
cmp eax, 0x57
jne 0x430bf3
push esi
mov dword[edi+0x44], esi
call dword[sym.imp.GDI32.dll_CreateSolidBrush]
mov dword[edi+0x40], eax
jmp 0x430bf3
mov dword[edi+0x48], esi
jmp 0x430bf3
mov dword[esp+0x7c], esi
lea eax, [esp+0xd0]
lea edx, [eax+2]
lea ecx, [ecx]
mov cx, word[eax]
add eax, 2
test cx, cx
jne 0x430c00
sub eax, edx
sar eax, 1
lea ebp, [ebp+eax*2]
xor ebx, ebx
cmp word[ebp+2], bx
je case.0x430aa8.68
mov ax, word[ebp+2]
add ebp, 2
call fcn.004095a0
movzx eax, ax
cmp eax, 0x4d
je 0x430c5d
cmp eax, 0x53
jne case.0x430aa8.68
lea ecx, [ebp+2]
push ecx
call fcn.0048dfe6
add esp, 4
mov dword[esp+0x24], eax
cmp eax, ebx
jge case.0x430aa8.68
mov dword[esp+0x24], ebx
jmp case.0x430aa8.68
lea edx, [ebp+2]
push edx
call fcn.0048dfe6
add esp, 4
mov dword[esp+0x2c], eax
cmp eax, ebx
jge case.0x430aa8.68
mov dword[esp+0x2c], ebx
jmp case.0x430aa8.68
movzx eax, word[ebp+2]
and dword[esp+0x14], 0xf7ffffff
cmp eax, 0x31
jne 0x430c97
or dword[esp+0x14], 0x40000
cmp eax, 0x32
jne case.0x430aa8.68
or dword[esp+0x14], 0xf0000
jmp case.0x430aa8.68
lea eax, [ebp+2]
push eax
call fcn.0048dfe6
mov dword[esp+0x2c], eax
mov byte[esp+0x17], 1
jmp 0x430e92
cmp word[ebp+2], bx
je case.0x430aa8.68
add ebp, 2
mov esi, ebp
call fcn.0040d260
lea ecx, [ebp+2]
push 0x2d
push ecx
mov dword[esp+0x70], eax
call fcn.0048db21
add esp, 8
cmp eax, ebx
je case.0x430aa8.68
mov ebp, eax
cmp word[eax+2], bx
je case.0x430aa8.68
lea ebp, [eax+2]
mov esi, ebp
call fcn.0040d260
mov dword[esp+0x50], eax
jmp case.0x430aa8.68
mov byte[esp+0x12], 0
jmp case.0x430aa8.68
cmp word[ebp+2], bx
je case.0x430aa8.68
mov ax, word[ebp+2]
add ebp, 2
call fcn.004095a0
movzx eax, ax
cmp eax, 0x4d
je 0x430d8f
cmp eax, 0x53
je 0x430d6e
push ebp
call fcn.0048dfe6
add esp, 4
cmp byte[esp+0x234], 0
mov dword[edi], eax
jne case.0x430aa8.68
mov edx, dword[0x4c85d0]
push 0x60
push edx
push eax
call dword[sym.imp.KERNEL32.dll_MulDiv]
mov dword[edi], eax
jmp case.0x430aa8.68
lea eax, [ebp+2]
push eax
call fcn.0048dfe6
add esp, 4
mov dword[esp+0x44], eax
cmp eax, ebx
jge case.0x430aa8.68
mov dword[esp+0x44], ebx
jmp case.0x430aa8.68
lea ecx, [ebp+2]
push ecx
call fcn.0048dfe6
add esp, 4
mov dword[esp+0x58], eax
cmp eax, ebx
jge case.0x430aa8.68
mov dword[esp+0x58], ebx
jmp case.0x430aa8.68
push 4
push str.Hide
push ebp
call fcn.0048d597
add esp, 0xc
test eax, eax
jne 0x430dd1
mov byte[esp+0x1b], 1
add ebp, 6
jmp case.0x430aa8.68
lea edx, [ebp+2]
push edx
call fcn.0048dfe6
add esp, 4
cmp byte[esp+0x234], 0
mov dword[edi+4], eax
jne case.0x430aa8.68
mov ecx, dword[0x4c85d0]
push 0x60
push ecx
push eax
call dword[sym.imp.KERNEL32.dll_MulDiv]
mov dword[edi+4], eax
jmp case.0x430aa8.68
lea edx, [ebp+2]
push edx
call fcn.0048dfe6
mov dword[esp+0x50], eax
jmp 0x430e92
lea eax, [ebp+2]
push eax
call fcn.0048dfe6
mov dword[esp+0x4c], eax
jmp 0x430e92
cmp word[ebp+2], bx
je case.0x430aa8.68
mov ax, word[ebp+2]
add ebp, 2
call fcn.004095a0
movzx eax, ax
add eax, 0xffffffbe
cmp eax, 0x17
ja case.0x430aa8.68
movzx ecx, byte[eax+0x431834]
jmp dword[ecx*4+0x431820]
lea edx, [ebp+2]
push edx
call fcn.0048dfe6
mov dword[edi+0x1c], eax
jmp 0x430e92
cmp byte[esp+0x234], 0
je case.0x430aa8.68
lea eax, [ebp+2]
push eax
call fcn.0048dfe6
mov dword[edi+0x18], eax
jmp 0x430e92
lea ecx, [ebp+2]
push ecx
call fcn.0048dfe6
mov dword[edi+0xc], eax
jmp 0x430e92
lea edx, [ebp+2]
push edx
call fcn.0048dfe6
mov dword[edi+0x10], eax
add esp, 4
add ebp, 2
cmp word[ebp], bx
jne off.b1156
mov ebx, 0x80000000
xor ebp, ebp
push ebp
push ebp
push ebp
push str.DISPLAY
call dword[sym.imp.GDI32.dll_CreateDCW]
mov esi, eax
push 0x5a
push esi
mov dword[esp+0x5c], esi
call dword[sym.imp.GDI32.dll_GetDeviceCaps]
push 0x11
mov dword[esp+0x64], eax
call dword[sym.imp.GDI32.dll_GetStockObject]
push eax
push esi
mov dword[esp+0x28], eax
call dword[sym.imp.GDI32.dll_SelectObject]
mov dword[esp+0x90], eax
lea eax, [esp+0x150]
push eax
push 0x40
push esi
call dword[sym.imp.GDI32.dll_GetTextFaceW]
lea ecx, [esp+0x1dc]
push ecx
push esi
call dword[sym.imp.GDI32.dll_GetTextMetricsW]
mov eax, dword[edi+0x1c]
mov edx, dword[esp+0x1dc]
mov dword[esp+0x5c], edx
cmp eax, 1
jge 0x430f28
cmp eax, ebx
je 0x430f28
mov ecx, dword[edi+0x18]
cmp ecx, 1
jge 0x430f28
cmp ecx, ebx
jne 0x430f31
cmp eax, ebp
je 0x430f31
cmp dword[edi+0x18], ebp
jne 0x430f37
mov dword[edi+0x18], ebp
mov dword[edi+0x1c], ebp
cmp byte[esp+0x234], 0
je 0x4310d7
mov esi, dword[esp+0x1c]
cmp word[esi], bp
je 0x4310d7
cmp dword[edi+0x1c], ebp
je 0x4310d7
xor bl, bl
lea ebp, [edi+0x24]
mov ecx, dword[edi+0x1c]
mov edx, dword[edi+0x18]
mov eax, ecx
sub eax, 0x80000000
neg eax
sbb eax, eax
and eax, ecx
mov ecx, edx
sub ecx, 0x80000000
neg ecx
push 0
sbb ecx, ecx
and ecx, edx
mov byte[esp+0x20], bl
mov edx, dword[esp+0x20]
push edx
push 0
push ebp
push eax
push ecx
push esi
call fcn.00474f00
add esp, 0x1c
mov dword[edi+0x28], eax
test eax, eax
jne 0x430fad
test bl, bl
jne 0x4310d7
mov bl, 1
jmp 0x430f60
cmp dword[edi+0x1c], 0
jl 0x430fbd
cmp dword[edi+0x18], 0
jge 0x4310d7
cmp dword[ebp], 0
je 0x430fe1
lea ecx, [esp+0xbc]
push ecx
push eax
call dword[sym.imp.USER32.dll_GetIconInfo]
test eax, eax
je 0x4310d7
mov eax, dword[esp+0xcc]
test eax, eax
je 0x4310d7
lea edx, [esp+0xa4]
push edx
push 0x18
push eax
call dword[sym.imp.GDI32.dll_GetObjectW]
test eax, eax
je 0x4310b7
mov eax, dword[edi+0x1c]
mov dword[esp+0x64], eax
cmp eax, 0xffffffff
jne 0x431049
mov ecx, dword[edi+0x18]
mov dword[esp+0x1c], ecx
test ecx, ecx
jle 0x431049
cmp dword[esp+0xa8], 0
je 0x4310a4
fild dword[esp+0xac]
fidiv dword[esp+0xa8]
fimul dword[esp+0x1c]
fadd qword[0x4bd488]
call fcn.0049b670
mov dword[edi+0x1c], eax
jmp 0x4310a4
mov ecx, dword[edi+0x18]
cmp ecx, 0xffffffff
jne 0x431081
test eax, eax
jle 0x431081
cmp dword[esp+0xac], 0
je 0x4310a4
fild dword[esp+0xa8]
fidiv dword[esp+0xac]
fimul dword[esp+0x64]
fadd qword[0x4bd488]
call fcn.0049b670
mov dword[edi+0x18], eax
jmp 0x4310a4
cmp eax, 0x80000000
jne 0x431092
mov eax, dword[esp+0xac]
mov dword[edi+0x1c], eax
cmp ecx, 0x80000000
jne 0x4310a4
mov ecx, dword[esp+0xa8]
mov dword[edi+0x18], ecx
cmp dword[edi], 0x80000000
jne 0x4310b7
mov edx, dword[edi+0xc]
mov eax, dword[edi+0x18]
lea ecx, [eax+edx*2]
mov dword[edi], ecx
cmp dword[ebp], 1
jne 0x4310d7
mov edx, dword[esp+0xcc]
mov esi, dword[sym.imp.GDI32.dll_DeleteObject]
push edx
call esi
mov eax, dword[esp+0xc8]
push eax
call esi
cmp dword[edi], 0x80000000
jne 0x4310f5
mov ecx, dword[0x4c85d0]
push 0x60
push ecx
push 0x12c
call dword[sym.imp.KERNEL32.dll_MulDiv]
mov dword[edi], eax
cmp dword[edi+0x1c], 0x80000000
jne 0x431105
mov dword[edi+0x1c], 0
mov eax, dword[edi+4]
cmp eax, 0x80000000
jne 0x431114
mov eax, 0x1f4
mov edx, dword[edi]
push eax
push edx
push 0
push 0
lea eax, [esp+0x40]
push eax
call dword[sym.imp.USER32.dll_SetRect]
mov ecx, dword[esp+0x228]
cmp word[ecx], 0
mov ebp, dword[sym.imp.GDI32.dll_CreateFontW]
je 0x43126a
mov edx, dword[esp+0x230]
cmp word[edx], 0
mov ebx, edx
jne 0x431154
lea ebx, [esp+0x150]
mov esi, dword[esp+0x58]
test esi, esi
jne 0x431161
mov esi, 0x258
cmp dword[esp+0x2c], 0
je 0x43117e
mov eax, dword[esp+0x60]
mov ecx, dword[esp+0x2c]
push 0x48
push eax
push ecx
call dword[sym.imp.KERNEL32.dll_MulDiv]
neg eax
jmp 0x43118d
fild dword[esp+0x5c]
fmul qword[0x4bd4c8]
call fcn.0049b670
push ebx
push 0
push 2
push 0
push 4
push 1
push 0
push 0
push 0
push esi
push 0
push 0
push 0
push eax
call ebp
mov dword[edi+0x38], eax
test eax, eax
jne 0x43120a
mov esi, dword[esp+0x58]
test esi, esi
jne 0x4311bc
mov esi, 0x258
mov eax, dword[esp+0x2c]
test eax, eax
je 0x4311d6
mov edx, dword[esp+0x60]
push 0x48
push edx
push eax
call dword[sym.imp.KERNEL32.dll_MulDiv]
neg eax
jmp 0x4311e5
fild dword[esp+0x5c]
fmul qword[0x4bd4c8]
call fcn.0049b670
lea ecx, [esp+0x150]
push ecx
push 0
push 2
push 0
push 4
push 1
push 0
push 0
push 0
push esi
push 0
push 0
push 0
push eax
call ebp
mov dword[edi+0x38], eax
mov eax, dword[edi+0x38]
test eax, eax
jne 0x431215
mov eax, dword[esp+0x20]
mov esi, dword[esp+0x54]
push eax
push esi
call dword[sym.imp.GDI32.dll_SelectObject]
mov eax, dword[esp+0x3c]
mov ecx, dword[esp+0x30]
mov edx, dword[esp+0x34]
mov dword[esp+0x6c], ecx
mov dword[esp+0x78], eax
mov eax, dword[edi+0xc]
mov dword[esp+0x70], edx
mov edx, dword[esp+0x38]
add ecx, eax
push 0x450
mov dword[esp+0x70], ecx
sub edx, eax
lea ecx, [esp+0x70]
push ecx
mov dword[esp+0x7c], edx
mov edx, dword[esp+0x230]
push 0xffffffffffffffff
push edx
push esi
call dword[sym.imp.USER32.dll_DrawTextW]
mov dword[edi+0x14], eax
cmp dword[esp+0x24], 0
mov eax, dword[esp+0x230]
mov esi, dword[esp+0x44]
jne 0x431288
test esi, esi
jne 0x431288
test eax, eax
je 0x43130a
cmp word[eax], 0
jne 0x431295
lea eax, [esp+0x150]
push eax
push 0
push 2
push 0
mov ebx, dword[esp+0x70]
mov eax, dword[esp+0x34]
push 4
push 1
push 0
push 0
push 0
push esi
push 0
push 0
push 0
push 0x48
push ebx
push eax
call dword[sym.imp.KERNEL32.dll_MulDiv]
neg eax
push eax
call ebp
mov dword[edi+0x3c], eax
test eax, eax
jne 0x43130a
cmp dword[esp+0x24], eax
jne 0x4312d5
test esi, esi
je 0x43130a
mov edx, dword[esp+0x24]
lea ecx, [esp+0x150]
push ecx
push 0
push 2
push 0
push 4
push 1
push 0
push 0
push 0
push esi
push 0
push 0
push 0
push 0x48
push ebx
push edx
call dword[sym.imp.KERNEL32.dll_MulDiv]
neg eax
push eax
call ebp
mov dword[edi+0x3c], eax
mov ecx, dword[edi+0x14]
test ecx, ecx
je 0x431318
mov eax, dword[edi+0x10]
add eax, ecx
jmp 0x43131a
xor eax, eax
mov ecx, dword[edi+0x10]
mov edx, dword[edi+0x1c]
lea esi, [eax+ecx]
mov eax, edx
neg eax
sbb eax, eax
and eax, ecx
mov dword[esp+0x64], esi
add esi, eax
add esi, edx
cmp dword[edi+4], 0x80000000
mov dword[esp+0x5c], esi
jne 0x4313cd
mov ebp, dword[esp+0x224]
cmp word[ebp], 0
je 0x4313b9
mov eax, dword[edi+0x3c]
test eax, eax
jne 0x43135d
mov eax, dword[esp+0x20]
mov ebx, dword[esp+0x54]
push eax
push ebx
call dword[sym.imp.GDI32.dll_SelectObject]
mov eax, dword[esp+0x34]
mov ecx, dword[esp+0x30]
mov edx, dword[esp+0x38]
mov dword[esp+0x70], eax
mov eax, dword[esp+0x3c]
mov dword[esp+0x6c], ecx
mov dword[esp+0x78], eax
mov eax, dword[edi+0xc]
add ecx, eax
push 0x410
mov dword[esp+0x70], ecx
lea ecx, [esp+0x70]
push ecx
push 0xffffffffffffffff
push ebp
sub edx, eax
push ebx
mov dword[esp+0x88], edx
call dword[sym.imp.USER32.dll_DrawTextW]
add eax, dword[edi+0x10]
add eax, esi
mov dword[edi+4], eax
mov dword[esp+0x3c], eax
jmp 0x4313d1
mov ebx, dword[esp+0x54]
xor eax, eax
mov eax, dword[edi+0x10]
add eax, esi
mov dword[edi+4], eax
mov dword[esp+0x3c], eax
jmp 0x4313d1
mov ebx, dword[esp+0x54]
mov eax, dword[esp+0x90]
push eax
push ebx
call dword[sym.imp.GDI32.dll_SelectObject]
push ebx
call dword[sym.imp.GDI32.dll_DeleteDC]
test eax, eax
jne 0x4313fa
xor eax, eax
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x208
ret 0x1c
mov edx, dword[esp+0x34]
mov ecx, dword[esp+0x30]
mov eax, dword[esp+0x38]
mov dword[esp+0x84], edx
mov edx, dword[esp+0x40]
push edx
mov dword[esp+0x84], ecx
mov ecx, dword[esp+0x40]
mov dword[esp+0x8c], eax
mov eax, dword[esp+0x18]
push 0
mov dword[esp+0x94], ecx
push eax
lea ecx, [esp+0x8c]
push ecx
call dword[sym.imp.USER32.dll_AdjustWindowRectEx]
mov esi, dword[esp+0x88]
mov ebp, dword[esp+0x8c]
sub esi, dword[esp+0x80]
sub ebp, dword[esp+0x84]
push 0
lea edx, [esp+0x98]
push edx
push 0
push 0x30
call dword[sym.imp.USER32.dll_SystemParametersInfoW]
mov eax, dword[esp+0x9c]
mov ebx, dword[esp+0x94]
mov ecx, dword[esp+0xa0]
sub ecx, dword[esp+0x98]
sub eax, ebx
cmp esi, eax
jle 0x431494
mov esi, eax
cmp ebp, ecx
jle 0x43149a
mov ebp, ecx
cmp dword[esp+0x4c], 0x80000000
jne 0x4314b1
sub eax, esi
cdq
sub eax, edx
sar eax, 1
add eax, ebx
mov dword[esp+0x4c], eax
cmp dword[esp+0x48], 0x80000000
jne 0x4314cf
mov eax, ecx
sub eax, ebp
cdq
sub eax, edx
sar eax, 1
add eax, dword[esp+0x98]
mov dword[esp+0x48], eax
mov ebx, dword[0x4c28ec]
add ebx, 0x4c
call fcn.0045bc60
test eax, eax
je 0x4314ee
mov eax, dword[0x4c28ec]
mov ecx, dword[eax+0x4c]
mov eax, dword[ecx+4]
jmp 0x4314f0
xor eax, eax
mov bl, byte[esp+0x12]
test bl, bl
je 0x431503
test eax, eax
jne 0x431505
mov eax, dword[0x4c64b8]
jmp 0x431505
xor eax, eax
mov edx, dword[0x4c64b0]
mov ecx, dword[esp+0x4c]
push 0
push edx
mov edx, dword[esp+0x234]
push 0
push eax
mov eax, dword[esp+0x58]
push ebp
push esi
mov esi, dword[esp+0x2c]
push eax
mov eax, dword[esp+0x5c]
push ecx
push esi
push edx
push str.AutoHotkey2
push eax
call dword[sym.imp.USER32.dll_CreateWindowExW]
mov dword[edi+0x20], eax
test eax, eax
je 0x4313eb
mov ebp, dword[sym.imp.USER32.dll_SendMessageW]
mov edx, esi
and edx, 0x80000
jne 0x431559
test bl, bl
jne 0x431598
mov esi, dword[0x4c914c]
test esi, esi
je 0x43156b
mov ecx, dword[0x4c9150]
jmp 0x431577
mov esi, dword[0x4c51f8]
mov ecx, dword[0x4c51fc]
test edx, edx
je 0x431586
push ecx
push 0
push 0x80
push eax
call ebp
test bl, bl
jne 0x431598
mov ecx, dword[edi+0x20]
push esi
push 1
push 0x80
push ecx
call ebp
mov eax, dword[edi+0x20]
lea edx, [esp+0x30]
push edx
push eax
call dword[sym.imp.USER32.dll_GetClientRect]
mov ecx, dword[esp+0x38]
mov edx, dword[edi+0xc]
mov eax, dword[esp+0x3c]
mov dword[edi], ecx
lea esi, [edx+edx]
sub ecx, esi
mov ebx, ecx
mov ecx, dword[esp+0x228]
mov dword[edi+4], eax
cmp word[ecx], 0
je 0x43161b
mov eax, dword[0x4c64b0]
push 0
push eax
mov eax, dword[edi+0x20]
push 0
push eax
mov eax, dword[edi+0x14]
push eax
mov eax, dword[edi+0x10]
push ebx
push eax
push edx
xor edx, edx
cmp byte[esp+0x31], dl
setne dl
or edx, 0x50000080
push edx
push ecx
push str.static
push 0
call dword[sym.imp.USER32.dll_CreateWindowExW]
mov ecx, dword[edi+0x38]
mov dword[edi+0x30], eax
test ecx, ecx
jne 0x43160f
mov ecx, dword[esp+0x20]
push 1
push ecx
push 0x30
push eax
call ebp
mov eax, dword[esp+0x3c]
cmp byte[esp+0x234], 0
jne 0x431728
mov ecx, dword[edi+0x1c]
test ecx, ecx
jle 0x431728
mov eax, dword[edi+0x20]
mov edx, dword[edi+0xc]
push 0
push 0
push 0
push eax
push ecx
mov ecx, dword[esp+0x78]
push ebx
push ecx
push edx
push 0x50000001
push 0
push str.msctls_progress32
push 0x200
call dword[sym.imp.USER32.dll_CreateWindowExW]
mov dword[edi+0x2c], eax
test eax, eax
je 0x431724
mov edx, dword[esp+0x68]
test edx, edx
jne 0x43167d
mov ecx, dword[esp+0x50]
test ecx, ecx
je 0x4316b9
jmp 0x43168e
cmp edx, 0xffffffff
jle 0x4316ab
cmp edx, 0x10000
jge 0x4316ab
mov ecx, dword[esp+0x50]
cmp ecx, 0xffff
ja 0x4316af
movzx ecx, cx
movzx edx, dx
shl ecx, 0x10
or ecx, edx
push ecx
push 0
push 0x401
jmp 0x4316b6
mov ecx, dword[esp+0x50]
push ecx
push edx
push 0x406
push eax
call ebp
mov esi, dword[esp+0x7c]
cmp esi, 0xff000000
je 0x4316df
mov eax, dword[edi+0x2c]
push eax
call fcn.00475af0
mov ecx, dword[edi+0x2c]
add esp, 4
push esi
push 0
push 0x409
push ecx
call ebp
mov eax, dword[edi+0x44]
cmp eax, 0xff000000
je 0x4316f7
mov edx, dword[edi+0x2c]
push eax
push 0
push 0x2001
push edx
call ebp
cmp byte[esp+0x13], 0
push 0
je 0x431712
mov esi, dword[esp+0x2c]
mov eax, dword[edi+0x2c]
push esi
push 0x402
push eax
call ebp
jmp 0x431721
mov ecx, dword[edi+0x2c]
push 0
push 0x408
push ecx
call ebp
mov esi, eax
mov dword[edi+8], esi
mov eax, dword[esp+0x3c]
mov edx, dword[0x4c64b0]
sub eax, dword[esp+0x34]
mov ecx, dword[edi+0x20]
push 0
push edx
mov edx, dword[edi+0xc]
push 0
push ecx
mov ecx, dword[esp+0x6c]
sub eax, ecx
push eax
xor eax, eax
cmp byte[esp+0x24], al
push ebx
setne al
push ecx
mov ecx, dword[esp+0x240]
push edx
or eax, 0x50000080
push eax
push ecx
push str.static
push 0
call dword[sym.imp.USER32.dll_CreateWindowExW]
mov dword[edi+0x34], eax
test eax, eax
je 0x431786
mov ecx, dword[edi+0x3c]
test ecx, ecx
jne 0x43177e
mov ecx, dword[esp+0x20]
push 1
push ecx
push 0x30
push eax
call ebp
cmp byte[esp+0x1b], 0
jne 0x431799
mov edx, dword[edi+0x20]
push 4
push edx
call dword[sym.imp.USER32.dll_ShowWindow]
mov eax, 1
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x208
ret 0x1c
push edi
mov ecx, dword[esp+0x220]
push 0
push str.Max_window_number_is_10.
call fcn.0042df10
pop edi
pop esi
pop ebp
pop ebx
add esp, 0x208
ret 0x1c

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/4fe6510221c33bf023f6abed461fc13f