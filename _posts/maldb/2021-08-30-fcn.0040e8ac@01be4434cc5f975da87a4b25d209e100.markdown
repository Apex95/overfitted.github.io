---
layout: post
title:  "fcn.0040e8ac @ 01be4434cc5f975da87a4b25d209e100"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0040e8ac
- **Origin (md5):** 01be4434cc5f975da87a4b25d209e100
- **VirusTotal:** [virustotal.com/gui/file/01be4434cc5f975da87a4b25d209e100][virustotal_ref]

# Code Tags
<span class="tag" id="FILE">FILE</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [-36.1853141784668, -253.60276794433594, '<b><a href="/report/fcn.0040e8ac@01be4434cc5f975da87a4b25d209e100">fcn.0040e8ac</a><br>@01be4434cc5f975da87a4b25d209e100</b><br>', 'point { fill-color: #e0440e; }'],
[-39.23405838012695, -48.68668746948242, '<b><a href="/report/fcn.00410e2c@c5a9328b4292c431a6e3f48185308528">fcn.00410e2c</a><br>@c5a9328b4292c431a6e3f48185308528</b><br>', 'null'],
[-214.69969177246094, 93.40027618408203, '<b><a href="/report/fcn.0065880c@8c848ad89aab40a1738b363a37856125">fcn.0065880c</a><br>@8c848ad89aab40a1738b363a37856125</b><br>', 'null'],
[-133.5672149658203, 295.07940673828125, '<b><a href="/report/fcn.0040e36c@f40e41234bc244856083b8839ad797e1">fcn.0040e36c</a><br>@f40e41234bc244856083b8839ad797e1</b><br>', 'null'],
[2.7350711822509766, 141.80015563964844, '<b><a href="/report/fcn.0040d3cc@1fd683a7f72f257d6d6de6e845d6c40a">fcn.0040d3cc</a><br>@1fd683a7f72f257d6d6de6e845d6c40a</b><br>', 'null'],
[-231.14627075195312, -122.15113067626953, '<b><a href="/report/fcn.00411ab4@e69fcfbd512770c44a9d6b90a42edeb0">fcn.00411ab4</a><br>@e69fcfbd512770c44a9d6b90a42edeb0</b><br>', 'null'],
[169.26788330078125, -194.80320739746094, '<b><a href="/report/fcn.0040ed0c@5d44fc96ec059e83cbab5efb708e5e9e">fcn.0040ed0c</a><br>@5d44fc96ec059e83cbab5efb708e5e9e</b><br>', 'null'],
[261.2431335449219, 181.36695861816406, '<b><a href="/report/fcn.00411f0c@90aa43862e75a7f78f2655241632f0e5">fcn.00411f0c</a><br>@90aa43862e75a7f78f2655241632f0e5</b><br>', 'null'],
[337.0130310058594, -37.63604736328125, '<b><a href="/report/fcn.004112f4@3d0ec851566b617e7e4e75da3dd9651c">fcn.004112f4</a><br>@3d0ec851566b617e7e4e75da3dd9651c</b><br>', 'null'],
[141.14706420898438, 12.203124046325684, '<b><a href="/report/fcn.0041480c@4643b8f5a3d13e435a65fc553546b71e">fcn.0041480c</a><br>@4643b8f5a3d13e435a65fc553546b71e</b><br>', 'null'],
[100.23945617675781, 321.76763916015625, '<b><a href="/report/fcn.00414c6c@fd17dad7a5809016e438b746adc04679">fcn.00414c6c</a><br>@fd17dad7a5809016e438b746adc04679</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
mov ebp, esp
mov eax, 0x1af0
call fcn.0040f200
mov eax, dword[0x510210]
xor eax, ebp
mov dword[ebp-4], eax
and dword[ebp-0x1abc], 0
mov eax, dword[ebp+8]
mov ecx, dword[ebp+0xc]
push esi
xor esi, esi
mov dword[ebp-0x1ac8], eax
push edi
xor edi, edi
mov dword[ebp-0x1ad0], ecx
mov dword[ebp-0x1ac0], esi
cmp dword[ebp+0x10], esi
jne off.b72
xor eax, eax
jmp off.b2133
test ecx, ecx
jne off.b107
call fcn.0040bf83
and dword[eax], esi
call fcn.0040bfb7
mov dword[eax], 0x16
call fcn.0040bf48
or eax, 0xffffffff
jmp off.b2133
mov edx, eax
mov ecx, eax
sar edx, 5
and ecx, 0x1f
shl ecx, 6
mov dword[ebp-0x1ad8], edx
push ebx
mov edx, dword[edx*4+0xc14a60]
mov dword[ebp-0x1adc], ecx
mov bl, byte[ecx+edx+0x24]
add bl, bl
sar bl, 1
cmp bl, 2
je off.b158
cmp bl, 1
jne off.b201
mov eax, dword[ebp+0x10]
not eax
test al, 1
jne off.b195
call fcn.0040bf83
and dword[eax], esi
call fcn.0040bfb7
mov dword[eax], 0x16
call fcn.0040bf48
jmp off.b2123
mov eax, dword[ebp-0x1ac8]
test byte[ecx+edx+4], 0x20
je off.b223
push 2
push 0
push 0
push eax
call fcn.0040f417
add esp, 0x10
push dword[ebp-0x1ac8]
call fcn.0040df08
pop ecx
test eax, eax
je off.b1091
mov eax, dword[ebp-0x1ad8]
mov ecx, dword[ebp-0x1adc]
mov eax, dword[eax*4+0xc14a60]
test byte[ecx+eax+4], 0x80
je off.b1091
call fcn.00409bbd
xor ecx, ecx
mov eax, dword[eax+0x6c]
cmp dword[eax+0xa8], ecx
lea eax, [ebp-0x1ae8]
push eax
mov eax, dword[ebp-0x1ad8]
sete cl
mov dword[ebp-0x1ac4], ecx
mov ecx, dword[ebp-0x1adc]
mov eax, dword[eax*4+0xc14a60]
push dword[ecx+eax]
call dword[sym.imp.KERNEL32.dll_GetConsoleMode]
test eax, eax
je off.b1091
cmp dword[ebp-0x1ac4], esi
je off.b357
test bl, bl
je off.b1091
call dword[sym.imp.KERNEL32.dll_GetConsoleCP]
mov edx, dword[ebp-0x1ad0]
xor ecx, ecx
and dword[ebp-0x1ac8], ecx
mov dword[ebp-0x1af0], eax
mov dword[ebp-0x1acc], ecx
mov dword[ebp-0x1ad4], edx
cmp dword[ebp+0x10], ecx
jbe off.b2069
mov eax, dword[ebp-0x1ad4]
xor edx, edx
mov dword[ebp-0x1ac0], edx
mov dword[ebp-0x1aec], 0xa
and dword[ebp-0x1ac4], edi
test bl, bl
jne off.b872
mov dl, byte[eax]
xor eax, eax
mov ecx, dword[ebp-0x1adc]
cmp dl, 0xa
sete al
mov dword[ebp-0x1ae8], eax
mov eax, dword[ebp-0x1ad8]
mov eax, dword[eax*4+0xc14a60]
mov dword[ebp-0x1ac4], eax
cmp dword[ecx+eax+0x38], edi
je off.b517
mov al, byte[ecx+eax+0x34]
mov byte[ebp-0xc], al
mov eax, dword[ebp-0x1ac4]
mov byte[ebp-0xb], dl
push 2
and dword[ecx+eax+0x38], edi
lea eax, [ebp-0xc]
push eax
jmp off.b607
movsx eax, dl
push eax
call fcn.0040f406
pop ecx
test eax, eax
je off.b599
mov eax, dword[ebp-0x1ad0]
mov edx, dword[ebp-0x1ad4]
sub eax, edx
add eax, dword[ebp+0x10]
cmp eax, 1
jbe off.b1032
push 2
push edx
lea eax, [ebp-0x1acc]
push eax
call fcn.0040f57f
add esp, 0xc
cmp eax, 0xffffffff
je off.b1357
mov eax, dword[ebp-0x1ad4]
inc eax
inc dword[ebp-0x1ac0]
jmp off.b637
push 1
push dword[ebp-0x1ad4]
lea eax, [ebp-0x1acc]
push eax
call fcn.0040f57f
add esp, 0xc
cmp eax, 0xffffffff
je off.b1357
mov eax, dword[ebp-0x1ad4]
xor ecx, ecx
inc eax
inc dword[ebp-0x1ac0]
push ecx
push ecx
push 5
mov dword[ebp-0x1ad4], eax
lea eax, [ebp-0xc]
push eax
push 1
lea eax, [ebp-0x1acc]
push eax
push ecx
push dword[ebp-0x1af0]
call dword[sym.imp.KERNEL32.dll_WideCharToMultiByte]
mov dword[ebp-0x1ac4], eax
test eax, eax
je off.b1357
push 0
lea ecx, [ebp-0x1ac8]
push ecx
mov ecx, dword[ebp-0x1adc]
push eax
lea eax, [ebp-0xc]
push eax
mov eax, dword[ebp-0x1ad8]
mov eax, dword[eax*4+0xc14a60]
push dword[ecx+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1078
mov esi, dword[ebp-0x1ac0]
mov ecx, dword[ebp-0x1abc]
add esi, ecx
mov eax, dword[ebp-0x1ac4]
cmp dword[ebp-0x1ac8], eax
jl off.b1363
cmp dword[ebp-0x1ae8], edi
je off.b861
mov ecx, dword[ebp-0x1adc]
lea eax, [ebp-0x1ac8]
push 0
push eax
push 1
lea eax, [ebp-0xc]
mov byte[ebp-0xc], 0xd
push eax
mov eax, dword[ebp-0x1ad8]
mov eax, dword[eax*4+0xc14a60]
push dword[ecx+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1078
cmp dword[ebp-0x1ac8], 1
jl off.b1357
inc dword[ebp-0x1abc]
inc esi
mov ecx, dword[ebp-0x1acc]
jmp off.b1006
cmp bl, 1
je off.b882
cmp bl, 2
jne off.b933
movzx ecx, word[eax]
xor edx, edx
cmp cx, word[ebp-0x1aec]
mov dword[ebp-0x1acc], ecx
sete dl
add eax, 2
mov dword[ebp-0x1ac4], edx
mov edx, dword[ebp-0x1ac0]
add edx, 2
mov dword[ebp-0x1ad4], eax
mov dword[ebp-0x1ac0], edx
cmp bl, 1
je off.b943
cmp bl, 2
jne off.b1018
push ecx
call fcn.0040f597
pop ecx
mov ecx, dword[ebp-0x1acc]
cmp ax, cx
jne off.b1078
add esi, 2
cmp dword[ebp-0x1ac4], edi
je off.b1006
push 0xd
pop eax
push eax
mov dword[ebp-0x1acc], eax
call fcn.0040f597
pop ecx
mov ecx, dword[ebp-0x1acc]
cmp ax, cx
jne off.b1078
inc esi
inc dword[ebp-0x1abc]
mov edx, dword[ebp-0x1ac0]
mov eax, dword[ebp-0x1ad4]
cmp edx, dword[ebp+0x10]
jb off.b428
jmp off.b1357
mov ebx, dword[ebp-0x1ad8]
inc esi
mov al, byte[edx]
mov edx, dword[ebp-0x1adc]
mov ecx, dword[ebx*4+0xc14a60]
mov byte[edx+ecx+0x34], al
mov eax, dword[ebx*4+0xc14a60]
mov dword[edx+eax+0x38], 1
jmp off.b1357
call dword[sym.imp.KERNEL32.dll_GetLastError]
mov edi, eax
jmp off.b1357
mov eax, dword[ebp-0x1ad8]
mov ecx, dword[eax*4+0xc14a60]
mov eax, dword[ebp-0x1adc]
test byte[eax+ecx+4], 0x80
je off.b2006
mov edx, dword[ebp-0x1ad0]
xor edi, edi
mov dword[ebp-0x1acc], edi
test bl, bl
jne off.b1413
mov ebx, dword[ebp+0x10]
mov dword[ebp-0x1ac8], edx
test ebx, ebx
je off.b2069
xor ecx, ecx
lea edi, [ebp-0x140c]
mov eax, edx
mov dword[ebp-0x1ac4], ecx
sub eax, dword[ebp-0x1ad0]
cmp eax, ebx
jae off.b1254
mov cl, byte[edx]
inc edx
inc eax
mov byte[ebp-0x1ae1], cl
cmp cl, 0xa
mov dword[ebp-0x1ac8], edx
mov ecx, dword[ebp-0x1ac4]
jne off.b1224
inc dword[ebp-0x1abc]
mov byte[edi], 0xd
inc edi
inc ecx
mov dl, byte[ebp-0x1ae1]
mov byte[edi], dl
inc edi
mov edx, dword[ebp-0x1ac8]
inc ecx
mov dword[ebp-0x1ac4], ecx
cmp ecx, 0x13ff
jb off.b1182
mov ecx, dword[ebp-0x1adc]
lea eax, [ebp-0x140c]
sub edi, eax
lea eax, [ebp-0x1ae0]
push 0
push eax
push edi
lea eax, [ebp-0x140c]
push eax
mov eax, dword[ebp-0x1ad8]
mov eax, dword[eax*4+0xc14a60]
push dword[ecx+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1078
add esi, dword[ebp-0x1ae0]
cmp dword[ebp-0x1ae0], edi
jl off.b1351
mov edx, dword[ebp-0x1ac8]
mov eax, edx
sub eax, dword[ebp-0x1ad0]
cmp eax, ebx
jb off.b1160
mov edi, dword[ebp-0x1acc]
mov ecx, dword[ebp-0x1abc]
test esi, esi
jne off.b2128
test edi, edi
je off.b2063
push 5
pop ebx
cmp edi, ebx
jne off.b2054
call fcn.0040bfb7
mov dword[eax], 9
call fcn.0040bf83
mov dword[eax], ebx
jmp off.b2123
mov ecx, edx
cmp bl, 2
jne off.b1658
cmp dword[ebp+0x10], esi
jbe off.b2069
mov dword[ebp-0x1aec], 0xa
and dword[ebp-0x1ae8], 0
lea ebx, [ebp-0x140c]
mov eax, ecx
push 0xd
sub eax, edx
mov edx, dword[ebp-0x1ae8]
pop esi
cmp eax, dword[ebp+0x10]
jae off.b1525
movzx edi, word[ecx]
add eax, 2
add ecx, 2
cmp di, word[ebp-0x1aec]
jne off.b1508
add dword[ebp-0x1abc], 2
mov word[ebx], si
add ebx, 2
add edx, 2
mov word[ebx], di
add edx, 2
add ebx, 2
cmp edx, 0x13fe
jb off.b1469
lea eax, [ebp-0x140c]
mov dword[ebp-0x1ac4], ecx
mov ecx, dword[ebp-0x1adc]
sub ebx, eax
push 0
lea eax, [ebp-0x1ae0]
push eax
push ebx
lea eax, [ebp-0x140c]
push eax
mov eax, dword[ebp-0x1ad8]
mov eax, dword[eax*4+0xc14a60]
push dword[ecx+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
mov esi, dword[ebp-0x1ac0]
mov edi, dword[ebp-0x1acc]
test eax, eax
je off.b1078
add esi, dword[ebp-0x1ae0]
mov dword[ebp-0x1ac0], esi
cmp dword[ebp-0x1ae0], ebx
jl off.b1357
mov ecx, dword[ebp-0x1ac4]
mov eax, ecx
mov edx, dword[ebp-0x1ad0]
sub eax, edx
cmp eax, dword[ebp+0x10]
jb off.b1443
jmp off.b1357
mov ebx, dword[ebp+0x10]
mov dword[ebp-0x1ac8], ecx
test ebx, ebx
je off.b2069
mov dword[ebp-0x1aec], 0xa
and dword[ebp-0x1ae8], 0
lea eax, [ebp-0x1ab8]
mov edi, dword[ebp-0x1ac8]
sub ecx, edx
mov edx, dword[ebp-0x1ae8]
cmp ecx, ebx
jae off.b1775
movzx esi, word[edi]
add ecx, 2
add edi, 2
mov dword[ebp-0x1ac8], edi
cmp si, word[ebp-0x1aec]
jne off.b1758
push 0xd
pop edi
mov word[eax], di
add eax, 2
mov edi, dword[ebp-0x1ac8]
add edx, 2
mov word[eax], si
add edx, 2
add eax, 2
cmp edx, 0x6a8
jb off.b1712
xor esi, esi
lea ecx, [ebp-0xd64]
push esi
push esi
push 0xd55
push ecx
lea ecx, [ebp-0x1ab8]
sub eax, ecx
cdq
sub eax, edx
sar eax, 1
push eax
mov eax, ecx
push eax
push esi
push 0xfde9
call dword[sym.imp.KERNEL32.dll_WideCharToMultiByte]
mov esi, dword[ebp-0x1ac0]
mov edi, dword[ebp-0x1acc]
mov dword[ebp-0x1ac4], eax
test eax, eax
je off.b1078
xor ecx, ecx
mov dword[ebp-0x1ac0], ecx
push 0
sub eax, ecx
lea edx, [ebp-0x1ae0]
push edx
push eax
lea eax, [ebp-0xd64]
add eax, ecx
mov ecx, dword[ebp-0x1adc]
push eax
mov eax, dword[ebp-0x1ad8]
mov eax, dword[eax*4+0xc14a60]
push dword[ecx+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1937
mov ecx, dword[ebp-0x1ac0]
add ecx, dword[ebp-0x1ae0]
mov eax, dword[ebp-0x1ac4]
mov dword[ebp-0x1ac0], ecx
cmp eax, ecx
jg off.b1854
jmp off.b1963
call dword[sym.imp.KERNEL32.dll_GetLastError]
mov ecx, dword[ebp-0x1ac0]
mov edi, eax
mov eax, dword[ebp-0x1ac4]
mov dword[ebp-0x1acc], edi
cmp eax, ecx
jg off.b1357
mov ecx, dword[ebp-0x1ac8]
mov esi, ecx
mov edx, dword[ebp-0x1ad0]
sub esi, edx
mov dword[ebp-0x1ac0], esi
cmp esi, ebx
jb off.b1685
jmp off.b1357
push 0
lea edx, [ebp-0x1ae0]
push edx
push dword[ebp+0x10]
push dword[ebp-0x1ad0]
push dword[eax+ecx]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1078
mov esi, dword[ebp-0x1ae0]
xor edi, edi
jmp off.b1357
push edi
call fcn.0040bf96
pop ecx
jmp off.b2123
mov edx, dword[ebp-0x1ad0]
mov eax, dword[ebp-0x1ad8]
mov ecx, dword[ebp-0x1adc]
mov eax, dword[eax*4+0xc14a60]
test byte[ecx+eax+4], 0x40
je off.b2104
cmp byte[edx], 0x1a
jne off.b2104
xor eax, eax
jmp off.b2132
call fcn.0040bfb7
mov dword[eax], 0x1c
call fcn.0040bf83
and dword[eax], 0
or eax, 0xffffffff
jmp off.b2132
sub esi, ecx
mov eax, esi
pop ebx
mov ecx, dword[ebp-4]
pop edi
xor ecx, ebp
pop esi
call fcn.0040cbfb
mov esp, ebp
pop ebp
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/01be4434cc5f975da87a4b25d209e100