---
layout: post
title:  "fcn.0046aa15 @ 9c2b894b84f59672d8be2e984066f76f"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0046aa15
- **Origin (md5):** 9c2b894b84f59672d8be2e984066f76f
- **VirusTotal:** [virustotal.com/gui/file/9c2b894b84f59672d8be2e984066f76f][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Behaviour Tags
<span class="bhv-tag" id="na">N/A</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [18.299137115478516, -95.09986877441406, '<b><a href="/report/fcn.0046aa15@9c2b894b84f59672d8be2e984066f76f">fcn.0046aa15</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'point { fill-color: #e0440e; }'],
[1.899640440940857, -32.718170166015625, '<b><a href="/report/fcn.100438a5@e5d49e0823e602f2ee948ac39d32c1eb">fcn.100438a5</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[-133.21578979492188, -67.1712875366211, '<b><a href="/report/fcn.0046c9b9@9c2b894b84f59672d8be2e984066f76f">fcn.0046c9b9</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],
[108.93116760253906, -30.64336395263672, '<b><a href="/report/fcn.10038d78@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10038d78</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[-82.86920166015625, -120.28804779052734, '<b><a href="/report/fcn.10045261@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10045261</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[79.07909393310547, 54.76189422607422, '<b><a href="/report/fcn.00460a97@9c2b894b84f59672d8be2e984066f76f">fcn.00460a97</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],
[-68.97855377197266, 60.08311462402344, '<b><a href="/report/fcn.10035053@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10035053</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[126.6086196899414, -113.76310729980469, '<b><a href="/report/fcn.00461a98@9c2b894b84f59672d8be2e984066f76f">fcn.00461a98</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],
[-184.48179626464844, 7.550666809082031, '<b><a href="/report/fcn.004041b2@73677cb40830e94fbfb5483ff33e40b9">fcn.004041b2</a><br>@73677cb40830e94fbfb5483ff33e40b9</b><br>', 'null'],
[182.07330322265625, -63.58110046386719, '<b><a href="/report/fcn.10038b15@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10038b15</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[-113.21531677246094, 106.43653106689453, '<b><a href="/report/fcn.0045e08d@9c2b894b84f59672d8be2e984066f76f">fcn.0045e08d</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push 0xe0
mov eax, 0x578acc
call fcn.005538d4
mov dword[ebp-0x50], ecx
mov eax, dword[ebp+0x2c]
mov esi, dword[ebp+0x10]
mov edi, dword[ebp+0x14]
mov dword[ebp-0xa0], eax
mov eax, dword[ebp+8]
sub esi, eax
mov dword[ebp-0x78], eax
mov eax, dword[ebp+0xc]
sub edi, eax
mov dword[ebp-0x4c], esi
mov dword[ebp-0x74], eax
mov dword[ebp-0x48], edi
cmp esi, 4
jle 0x46b261
cmp edi, 4
jle 0x46b261
lea ecx, [ebp-0x38]
call fcn.004119b2
mov ecx, dword[ebp-0x50]
xor ebx, ebx
mov dword[ebp-4], ebx
mov eax, dword[ecx+4]
test eax, eax
jne 0x46aa79
mov eax, ebx
jmp 0x46aa7c
mov eax, dword[eax+4]
push eax
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
push eax
lea ecx, [ebp-0x38]
call fcn.004122af
test eax, eax
je 0x46b259
mov dword[ebp-0x54], ebx
mov dword[ebp-0x58], 0x585684
mov eax, dword[ebp-0x50]
push edi
push esi
mov byte[ebp-4], 1
mov eax, dword[eax+4]
push dword[eax+4]
call dword[sym.imp.GDI32.dll_CreateCompatibleBitmap]
push eax
lea ecx, [ebp-0x58]
call fcn.004122f0
test eax, eax
je 0x46b24a
push dword[ebp-0x54]
push dword[ebp-0x34]
call fcn.00412959
mov dword[ebp-0xa4], eax
test eax, eax
jne 0x46aade
call fcn.0040f785
lea eax, [ebp-0x40]
mov dword[ebp-0xac], esi
push eax
lea eax, [ebp-0xac]
mov dword[ebp-0xa8], edi
push eax
call fcn.00469c5b
mov dword[ebp-0x84], eax
test eax, eax
je 0x46b24a
cmp dword[ebp-0x40], 0
je 0x46b24a
push eax
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_SelectObject]
mov ecx, dword[ebp-0x50]
mov eax, dword[ecx+4]
test eax, eax
jne 0x46ab2a
mov eax, ebx
jmp 0x46ab2d
mov eax, dword[eax+4]
push 0xcc0020
push dword[ebp+0xc]
push dword[ebp+8]
push eax
push edi
push esi
push ebx
push ebx
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_BitBlt]
mov eax, dword[ebp-0x74]
neg eax
push eax
mov eax, dword[ebp-0x78]
neg eax
push eax
lea eax, [ebp+8]
push eax
call dword[sym.imp.USER32.dll_OffsetRect]
mov eax, dword[ebp+0x10]
add eax, dword[ebp+8]
fild dword[ebp+0x24]
cdq
sub eax, edx
mov ecx, dword[ebp+0x18]
sar eax, 1
mov dword[ebp-0x3c], eax
mov eax, dword[ebp+0x14]
add eax, dword[ebp+0xc]
fstp qword[ebp-0x80]
fld qword[ebp-0x80]
fmul qword[0x58e540]
cdq
sub eax, edx
mov edx, dword[ebp+0x1c]
sar eax, 1
mov dword[ebp-0x5c], eax
fdiv qword[0x58ec28]
movzx eax, cl
mov dword[ebp-0x10], eax
movzx eax, dl
fst qword[ebp-0xb4]
fld qword[0x58ec10]
fadd st(1)
fst qword[ebp-0x80]
fild dword[ebp-0x10]
mov dword[ebp-0x10], eax
mov eax, ecx
shr eax, 8
movzx eax, al
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fst qword[ebp-0xc4]
fild dword[ebp-0x10]
mov dword[ebp-0x10], eax
mov eax, edx
shr eax, 8
movzx eax, al
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fld qword[0x5b9908]
fadd st(1), st(0)
fxch st(1)
fsubrp st(2)
fld qword[0x58ec38]
fdiv st(2), st(0)
fxch st(2)
fadd st(0), st(0)
fstp qword[ebp-0xbc]
fild dword[ebp-0x10]
mov dword[ebp-0x10], eax
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fst qword[ebp-0xd4]
fild dword[ebp-0x10]
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fadd st(2)
fsubrp st(1)
fdiv st(2)
fadd st(0), st(0)
fstp qword[ebp-0xcc]
shr ecx, 0x10
movzx eax, cl
mov dword[ebp-0x10], eax
fild dword[ebp-0x10]
shr edx, 0x10
cmp dword[ebp+0x28], 0
movzx eax, dl
mov dword[ebp-0x10], eax
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fst qword[ebp-0xe4]
fild dword[ebp-0x10]
mov dword[ebp-0x44], ebx
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fadd st(2)
fsubrp st(1)
fdivrp st(2)
fxch st(1)
fadd st(0), st(0)
fstp qword[ebp-0xdc]
jle 0x46b1e5
fld st(1)
fadd qword[0x58ec00]
fst qword[ebp-0x9c]
fld qword[0x58d3e8]
fldz
jmp 0x46ac8b
fxch st(1)
fxch st(5)
fxch st(1)
fxch st(4)
fxch st(3)
mov esi, dword[ebp+0x10]
mov eax, esi
mov ecx, dword[ebp+0x14]
sub ecx, dword[ebp+0xc]
sub eax, dword[ebp+8]
mov dword[ebp-0x70], ebx
cmp eax, ecx
jl 0x46aca2
mov eax, ecx
sub esi, dword[ebp+0x14]
sub esi, dword[ebp+8]
add esi, dword[ebp+0xc]
cdq
sub eax, edx
mov dword[ebp-0x28], esi
sar eax, 1
mov dword[ebp-0x20], eax
mov eax, dword[ebp-0xa0]
cmp eax, 0xffffffff
je 0x46ae34
cmp dword[ebp-0x44], 0
jne 0x46ae34
fstp st(2)
lea ecx, [ebp-0x8c]
fstp st(4)
fstp st(3)
fstp st(0)
fstp st(1)
push eax
fstp st(0)
call fcn.0041191b
lea eax, [ebp-0x8c]
mov byte[ebp-4], 2
push eax
lea ecx, [ebp-0x38]
call fcn.004129b8
push 8
lea ecx, [ebp-0x38]
mov edi, eax
call fcn.00412a25
mov dword[ebp-0x10], eax
test esi, esi
jne 0x46ad27
push dword[ebp+0x14]
push dword[ebp+0x10]
push dword[ebp+0xc]
push dword[ebp+8]
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_Ellipse]
jmp 0x46ade2
jle 0x46ad82
mov eax, dword[ebp+0x14]
push dword[ebp+0x14]
sub eax, dword[ebp+0xc]
add eax, dword[ebp+8]
push eax
push dword[ebp+0xc]
push dword[ebp+8]
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_Ellipse]
push dword[ebp+0x14]
mov eax, dword[ebp+0x10]
push dword[ebp+0x10]
sub eax, dword[ebp+0x14]
push dword[ebp+0xc]
add eax, dword[ebp+0xc]
push eax
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_Ellipse]
mov eax, dword[ebp+0x14]
sub eax, dword[ebp+0xc]
push dword[ebp+0x14]
cdq
sub eax, edx
mov edx, dword[ebp+0x10]
mov ecx, eax
mov eax, dword[ebp+8]
sar ecx, 1
sub edx, ecx
add eax, ecx
push edx
push dword[ebp+0xc]
push eax
jmp 0x46add9
mov eax, dword[ebp+0x10]
sub eax, dword[ebp+8]
add eax, dword[ebp+0xc]
push eax
push dword[ebp+0x10]
push dword[ebp+0xc]
push dword[ebp+8]
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_Ellipse]
push dword[ebp+0x14]
mov eax, dword[ebp+0x14]
push dword[ebp+0x10]
sub eax, dword[ebp+0x10]
add eax, dword[ebp+8]
push eax
push dword[ebp+8]
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_Ellipse]
mov eax, dword[ebp+0x10]
sub eax, dword[ebp+8]
cdq
sub eax, edx
mov edx, dword[ebp+0x14]
mov ecx, eax
mov eax, dword[ebp+0xc]
sar ecx, 1
sub edx, ecx
add eax, ecx
push edx
push dword[ebp+0x10]
push eax
push dword[ebp+8]
push dword[ebp-0x34]
call dword[sym.imp.GDI32.dll_Rectangle]
push edi
lea ecx, [ebp-0x38]
call fcn.004129b8
push dword[ebp-0x10]
lea ecx, [ebp-0x38]
call fcn.004129b8
lea ecx, [ebp-0x8c]
mov byte[ebp-4], 1
mov dword[ebp-0x8c], 0x584f04
call fcn.00404d00
fld qword[0x58d3e8]
fld qword[0x5b9908]
fldz
fld qword[ebp-0x9c]
fld qword[ebp-0x80]
fld qword[ebp-0xb4]
fxch st(5)
fxch st(1)
fxch st(4)
fxch st(3)
fld st(5)
or esi, 0xffffffff
fst qword[ebp-0x94]
fxch st(3)
mov dword[ebp-0x60], esi
fcomp st(6)
or edi, esi
fnstsw ax
mov dword[ebp-0x68], edi
test ah, 0x41
jne 0x46b18c
fxch st(4)
mov ecx, 0x168
faddp st(5)
mov dword[ebp-0x10], ecx
fxch st(4)
fmul st(2)
fst qword[ebp-0xec]
fild dword[ebp-0x20]
fstp qword[ebp-0x18]
fld qword[ebp-0x18]
fstp qword[ebp-0x18]
jmp 0x46ae82
fxch st(3)
fxch st(4)
fxch st(1)
fxch st(3)
fcomp st(1)
fnstsw ax
test ah, 1
jne 0x46ae93
mov eax, dword[ebp-0x70]
mov dword[ebp-0x20], eax
jmp 0x46ae96
mov dword[ebp-0x20], ecx
fild dword[ebp-0x20]
fstp qword[ebp-0x24]
fld qword[ebp-0x24]
fld st(0)
fmul qword[ebp-0xbc]
fld st(0)
fadd st(4)
fld qword[ebp-0xc4]
fadd st(1), st(0)
fxch st(7)
fcom st(1)
fnstsw ax
test ah, 5
jnp 0x46aed5
fxch st(6)
fcom st(1)
fnstsw ax
test ah, 0x41
jne 0x46aed3
fstp st(1)
fstp st(1)
fstp st(5)
fld st(4)
jmp 0x46aef4
fxch st(6)
fcom st(1)
fnstsw ax
fstp st(1)
test ah, 5
jp 0x46aee8
fstp st(1)
fstp st(5)
fld st(4)
jmp 0x46aeee
fxch st(6)
fadd st(4)
faddp st(1)
fxch st(4)
fxch st(5)
fxch st(4)
call fcn.00553aa0
fld st(0)
mov byte[ebp-0x1a], al
fmul qword[ebp-0xcc]
fld st(0)
fadd st(4)
fld qword[ebp-0xd4]
fadd st(1), st(0)
fxch st(6)
fcom st(1)
fnstsw ax
test ah, 5
jnp 0x46af32
fxch st(7)
fcom st(1)
fnstsw ax
test ah, 0x41
jne 0x46af30
fstp st(1)
fstp st(1)
fstp st(4)
fld st(3)
jmp 0x46af51
fxch st(7)
fcom st(1)
fnstsw ax
fstp st(1)
test ah, 5
jp 0x46af45
fstp st(1)
fstp st(4)
fld st(3)
jmp 0x46af4b
fxch st(5)
fadd st(4)
faddp st(1)
fxch st(4)
fxch st(5)
fxch st(4)
call fcn.00553aa0
fmul qword[ebp-0xdc]
mov byte[ebp-0x19], al
fld st(0)
fadd st(3)
fld qword[ebp-0xe4]
fadd st(1), st(0)
fxch st(6)
fcom st(1)
fnstsw ax
test ah, 5
jnp 0x46af8d
fxch st(5)
fcom st(1)
fnstsw ax
test ah, 0x41
jne 0x46af91
fstp st(1)
fstp st(5)
fstp st(0)
fstp st(2)
fstp st(0)
jmp 0x46afae
fstp st(5)
jmp 0x46af93
fstp st(0)
fcomp st(4)
fnstsw ax
test ah, 0x41
jne 0x46afa4
fstp st(4)
fstp st(3)
fstp st(0)
jmp 0x46afac
fstp st(3)
fxch st(3)
faddp st(1)
faddp st(1)
fxch st(1)
fxch st(1)
call fcn.00553aa0
cmp dword[ebp-0x44], 0
jne 0x46afc6
cmp dword[ebp+0x20], 0xffffffff
je 0x46afc6
mov ebx, dword[ebp+0x20]
jmp 0x46afdb
movzx ebx, al
movzx eax, byte[ebp-0x19]
shl ebx, 8
or ebx, eax
movzx eax, byte[ebp-0x1a]
shl ebx, 8
or ebx, eax
push ecx
push ecx
fstp qword[esp]
call fcn.005655e0
fmul qword[ebp-0x18]
fldz
faddp st(1)
call fcn.00553a60
fld qword[ebp-0x94]
mov esi, eax
add esi, dword[ebp-0x3c]
fstp qword[esp]
call fcn.00565290
fmul qword[ebp-0x18]
fldz
faddp st(1)
pop ecx
pop ecx
call fcn.00553a60
mov ecx, dword[ebp-0x5c]
lea edi, [ecx+eax]
mov eax, dword[ebp-0x28]
test eax, eax
jle 0x46b0ab
fild dword[ebp-0x28]
cmp esi, dword[ebp-0x3c]
jle 0x46b039
fstp qword[ebp-0x6c]
fld qword[ebp-0x6c]
fmul qword[0x5b9908]
jmp 0x46b045
fstp qword[ebp-0x6c]
fld qword[ebp-0x6c]
fmul qword[0x58e5a0]
call fcn.00553a60
mov edx, dword[ebp-0x60]
add esi, eax
cmp edx, 0xffffffff
je 0x46b128
xor ecx, ecx
cmp esi, dword[ebp-0x3c]
setg cl
xor eax, eax
cmp edx, dword[ebp-0x3c]
setg al
cmp eax, ecx
je 0x46b128
cmp esi, edx
jge 0x46b07b
mov eax, esi
mov dword[ebp-0x20], eax
jmp 0x46b080
mov eax, edx
mov dword[ebp-0x20], edx
cmp esi, edx
jle 0x46b086
mov edx, esi
cmp eax, edx
jge 0x46b128
push ebx
push edi
push eax
push dword[ebp-0x48]
push dword[ebp-0x4c]
push dword[ebp-0x40]
call fcn.0046da60
mov eax, dword[ebp-0x20]
mov edx, dword[ebp-0x60]
inc eax
mov dword[ebp-0x20], eax
jmp 0x46b080
jns 0x46b128
fild dword[ebp-0x28]
cmp edi, ecx
jle 0x46b0c2
fstp qword[ebp-0x64]
fld qword[ebp-0x64]
fmul qword[0x58e5a0]
jmp 0x46b0ce
fstp qword[ebp-0x64]
fld qword[ebp-0x64]
fmul qword[0x5b9908]
call fcn.00553a60
mov edx, dword[ebp-0x68]
add edi, eax
cmp edx, 0xffffffff
je 0x46b128
xor ecx, ecx
cmp edi, dword[ebp-0x5c]
setg cl
xor eax, eax
cmp edx, dword[ebp-0x5c]
setg al
cmp eax, ecx
je 0x46b128
cmp edi, edx
jge 0x46b0fc
mov eax, edi
mov dword[ebp-0x20], eax
jmp 0x46b101
mov eax, edx
mov dword[ebp-0x20], edx
cmp edi, edx
jle 0x46b107
mov edx, edi
cmp eax, edx
jge 0x46b128
push ebx
push eax
push esi
push dword[ebp-0x48]
push dword[ebp-0x4c]
push dword[ebp-0x40]
call fcn.0046da60
mov eax, dword[ebp-0x20]
mov edx, dword[ebp-0x68]
inc eax
mov dword[ebp-0x20], eax
jmp 0x46b101
push ebx
push edi
push esi
push dword[ebp-0x48]
push dword[ebp-0x4c]
push dword[ebp-0x40]
call fcn.0046da60
fld qword[ebp-0x94]
fadd qword[0x58ec00]
mov ecx, dword[ebp-0x10]
inc dword[ebp-0x70]
dec ecx
mov dword[ebp-0x60], esi
mov dword[ebp-0x68], edi
fst qword[ebp-0x94]
fld qword[ebp-0x9c]
fcomp st(1)
mov dword[ebp-0x10], ecx
fnstsw ax
fld qword[0x58d3e8]
fld qword[0x5b9908]
fldz
fld qword[ebp-0xec]
test ah, 0x41
je 0x46ae7a
fstp st(0)
xor ebx, ebx
fstp st(2)
fstp st(2)
jmp 0x46b194
fstp st(5)
fstp st(0)
fstp st(0)
fstp st(0)
push 0xffffffffffffffff
push 0xffffffffffffffff
lea eax, [ebp+8]
fstp st(1)
push eax
fstp st(0)
call dword[sym.imp.USER32.dll_InflateRect]
fld qword[0x58d3e8]
fld qword[0x5b9908]
mov edx, dword[ebp-0x44]
fldz
inc edx
fld qword[ebp-0x9c]
fld qword[ebp-0xb4]
fld qword[ebp-0x80]
mov dword[ebp-0x44], edx
cmp edx, dword[ebp+0x28]
jl 0x46ac81
mov edi, dword[ebp-0x48]
fstp st(2)
mov esi, dword[ebp-0x4c]
fstp st(0)
fstp st(3)
fstp st(1)
fstp st(0)
jmp 0x46b1e9
fstp st(2)
fstp st(1)
mov eax, dword[ebp-0x50]
fstp st(0)
push 0xcc0020
push ebx
push ebx
push dword[ebp-0x34]
mov eax, dword[eax+4]
push edi
push esi
push dword[ebp-0x74]
push dword[ebp-0x78]
push dword[eax+4]
call dword[sym.imp.GDI32.dll_BitBlt]
mov eax, dword[ebp-0xa4]
test eax, eax
je 0x46b219
mov ebx, dword[eax+4]
push ebx
push dword[ebp-0x34]
call fcn.00412959
push dword[ebp-0x84]
call dword[sym.imp.GDI32.dll_DeleteObject]
lea ecx, [ebp-0x58]
mov dword[ebp-0x58], 0x585684
call fcn.00404d00
lea ecx, [ebp-0x38]
call fcn.00411b08
xor eax, eax
inc eax
jmp 0x46b263
lea ecx, [ebp-0x58]
mov dword[ebp-0x58], 0x585684
call fcn.00404d00
lea ecx, [ebp-0x38]
call fcn.00411b08
xor eax, eax
call fcn.0055389d
ret 0x28

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/9c2b894b84f59672d8be2e984066f76f