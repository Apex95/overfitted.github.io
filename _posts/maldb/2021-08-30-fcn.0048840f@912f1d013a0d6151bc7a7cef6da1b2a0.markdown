---
layout: post
title:  "fcn.0048840f @ 912f1d013a0d6151bc7a7cef6da1b2a0"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0048840f
- **Origin (md5):** 912f1d013a0d6151bc7a7cef6da1b2a0
- **VirusTotal:** [virustotal.com/gui/file/912f1d013a0d6151bc7a7cef6da1b2a0][virustotal_ref]

# Code Tags
<span class="tag" id="FILE">FILE</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [-5014.6337890625, 901.5673217773438, '<b><a href="/report/fcn.0048840f@912f1d013a0d6151bc7a7cef6da1b2a0">fcn.0048840f</a><br>@912f1d013a0d6151bc7a7cef6da1b2a0</b><br>', 'point { fill-color: #e0440e; }'],
[5014.6337890625, -901.5673217773438, '<b><a href="/report/fcn.004310ab@d96761eb00d2d97e2b6f5ffffed0b46a">fcn.004310ab</a><br>@d96761eb00d2d97e2b6f5ffffed0b46a</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
mov ebp, esp
sub esp, 0x28
mov eax, dword[ebp+8]
push ebx
push esi
mov esi, dword[ebp+0x10]
push edi
push 0xfffffffffffffffe
pop ecx
xor edi, edi
mov dword[ebp-0x18], ecx
mov dword[ebp-0x20], edi
mov dword[ebp-0x28], esi
cmp eax, ecx
jne off.b56
call fcn.00483c76
mov dword[eax], edi
call fcn.00483caa
mov dword[eax], 9
jmp off.b1927
test eax, eax
js off.b1904
cmp eax, dword[0x4be640]
jae off.b1904
mov ecx, eax
mov ebx, eax
sar ecx, 5
and ebx, 0x1f
shl ebx, 6
mov dword[ebp-0xc], ecx
mov dword[ebp-0x24], ebx
mov edx, dword[ecx*4+0x4bd570]
mov al, byte[edx+ebx+4]
test al, 1
je off.b1904
cmp esi, 0x7fffffff
jbe off.b145
call fcn.00483c76
mov dword[eax], edi
call fcn.00483caa
mov dword[eax], 0x16
jmp off.b1922
test esi, esi
je off.b1900
test al, 2
jne off.b1900
cmp dword[ebp+0xc], edi
jne off.b175
call fcn.00483c76
and dword[eax], edi
jmp off.b129
mov al, byte[edx+ebx+0x24]
add al, al
sar al, 1
mov byte[ebp+0x13], al
movsx eax, al
dec eax
je off.b214
dec eax
jne off.b206
mov eax, esi
not eax
test al, 1
je off.b166
and esi, 0xfffffffe
mov eax, dword[ebp+0xc]
mov dword[ebp-0x10], eax
jmp off.b314
mov eax, esi
not eax
test al, 1
je off.b166
shr esi, 1
cmp esi, 4
jae off.b232
push 4
pop esi
push esi
call fcn.00483b97
mov dword[ebp-0x10], eax
pop ecx
test eax, eax
jne off.b273
call fcn.00483caa
mov dword[eax], 0xc
call fcn.00483c76
mov dword[eax], 8
jmp off.b1927
push 1
push 0
push 0
push dword[ebp+8]
call fcn.0048825d
mov ecx, dword[ebp-0xc]
add esp, 0x10
mov ecx, dword[ecx*4+0x4bd570]
mov dword[ecx+ebx+0x28], eax
mov eax, dword[ebp-0x10]
mov dword[ecx+ebx+0x2c], edx
mov ecx, dword[ebp-0xc]
mov edx, dword[ecx*4+0x4bd570]
mov ecx, dword[ebp-0xc]
mov dword[ebp-0x1c], eax
test byte[edx+ebx+4], 0x48
je off.b471
mov dl, byte[edx+ebx+5]
cmp dl, 0xa
je off.b471
test esi, esi
je off.b471
mov byte[eax], dl
xor edi, edi
lea edx, [eax+1]
inc edi
mov eax, dword[ecx*4+0x4bd570]
dec esi
cmp byte[ebp+0x13], 0
mov dword[ebp-0x1c], edx
mov byte[eax+ebx+5], 0xa
je off.b471
mov eax, dword[ecx*4+0x4bd570]
mov al, byte[eax+ebx+0x25]
cmp al, 0xa
je off.b471
test esi, esi
je off.b471
mov byte[edx], al
inc edx
mov eax, dword[ecx*4+0x4bd570]
dec esi
cmp byte[ebp+0x13], 1
push 2
mov dword[ebp-0x1c], edx
pop edi
mov byte[eax+ebx+0x25], 0xa
jne off.b471
mov eax, dword[ecx*4+0x4bd570]
mov al, byte[eax+ebx+0x26]
cmp al, 0xa
je off.b471
test esi, esi
je off.b471
push 3
mov byte[edx], al
inc edx
mov eax, dword[ecx*4+0x4bd570]
dec esi
pop edi
push 0xa
pop ecx
mov dword[ebp-0x1c], edx
mov byte[eax+ebx+0x26], cl
push dword[ebp+8]
call fcn.00480368
test eax, eax
mov eax, dword[ebp-0xc]
pop ecx
je off.b600
mov ecx, dword[eax*4+0x4bd570]
test byte[ecx+ebx+4], 0x80
je off.b600
lea eax, [ebp-0x20]
push eax
push dword[ecx+ebx]
call dword[sym.imp.KERNEL32.dll_GetConsoleMode]
mov dword[ebp-0x20], eax
test eax, eax
je off.b597
cmp byte[ebp+0x13], 2
jne off.b597
push 0
lea eax, [ebp-0x14]
shr esi, 1
push eax
mov eax, dword[ebp-0xc]
push esi
push dword[ebp-0x1c]
mov eax, dword[eax*4+0x4bd570]
push dword[eax+ebx]
call dword[sym.imp.KERNEL32.dll_ReadConsoleW]
test eax, eax
jne off.b586
call dword[sym.imp.KERNEL32.dll_GetLastError]
push eax
call fcn.00483c89
pop ecx
or ebx, 0xffffffff
mov eax, dword[ebp-0x10]
jmp off.b1282
mov eax, dword[ebp-0x14]
lea ecx, [eax+eax]
mov dword[ebp-0x14], ecx
jmp off.b653
mov eax, dword[ebp-0xc]
mov eax, dword[eax*4+0x4bd570]
lea ecx, [ebp-0x14]
push 0
push ecx
push esi
push dword[ebp-0x1c]
push dword[eax+ebx]
call dword[sym.imp.KERNEL32.dll_ReadFile]
test eax, eax
je off.b1848
mov ecx, dword[ebp-0x14]
test ecx, ecx
js off.b1848
cmp ecx, esi
ja off.b1848
mov edx, dword[ebp-0xc]
add edi, ecx
mov esi, dword[edx*4+0x4bd570]
mov al, byte[esi+ebx+4]
test al, al
jns off.b1276
cmp byte[ebp+0x13], 2
je off.b1308
test ecx, ecx
je off.b703
mov ecx, dword[ebp-0x10]
cmp byte[ecx], 0xa
jne off.b703
or al, 4
jmp off.b705
and al, 0xfb
mov byte[esi+ebx+4], al
mov eax, dword[ebp-0x10]
mov esi, eax
mov dword[ebp-0x20], eax
lea ecx, [eax+edi]
mov dword[ebp-0x1c], ecx
cmp eax, ecx
jae off.b1001
push 0xd
pop ecx
mov edi, eax
mov al, byte[edi]
cmp al, 0x1a
je off.b973
cmp al, cl
je off.b759
mov byte[esi], al
inc esi
inc edi
jmp off.b915
mov eax, dword[ebp-0x1c]
dec eax
cmp edi, eax
jae off.b795
lea eax, [edi+1]
cmp byte[eax], 0xa
jne off.b788
push 0xa
pop eax
add edi, 2
mov byte[esi], al
jmp off.b959
mov byte[esi], cl
mov edi, eax
inc esi
jmp off.b915
push 0
lea eax, [ebp-0x14]
inc edi
push eax
push 1
lea eax, [ebp-1]
push eax
mov eax, dword[edx*4+0x4bd570]
push dword[eax+ebx]
call dword[sym.imp.KERNEL32.dll_ReadFile]
test eax, eax
jne off.b838
call dword[sym.imp.KERNEL32.dll_GetLastError]
test eax, eax
jne off.b962
cmp dword[ebp-0x14], 0
je off.b962
mov edx, dword[ebp-0xc]
mov eax, dword[edx*4+0x4bd570]
test byte[eax+ebx+4], 0x48
je off.b896
push 0xa
pop eax
push 0xd
cmp byte[ebp-1], al
jne off.b876
mov byte[esi], al
inc esi
jmp off.b914
mov byte[esi], 0xd
inc esi
mov ecx, dword[edx*4+0x4bd570]
mov al, byte[ebp-1]
mov byte[ecx+ebx+5], al
jmp off.b914
cmp esi, dword[ebp-0x10]
jne off.b926
push 0xa
pop eax
cmp byte[ebp-1], al
jne off.b926
mov byte[esi], al
inc esi
push 0xd
pop ecx
cmp edi, dword[ebp-0x1c]
jb off.b736
jmp off.b1001
push 1
push 0xffffffffffffffff
push 0xffffffffffffffff
push dword[ebp+8]
call fcn.0048825d
mov edx, dword[ebp-0xc]
add esp, 0x10
push 0xa
pop eax
cmp byte[ebp-1], al
je off.b912
push 0xd
pop ecx
mov byte[esi], cl
inc esi
jmp off.b915
mov edx, dword[ebp-0xc]
push 0xd
pop ecx
mov byte[esi], cl
inc esi
jmp off.b915
mov ecx, dword[edx*4+0x4bd570]
mov al, byte[ecx+ebx+4]
test al, 0x40
jne off.b996
or al, 2
mov byte[ecx+ebx+4], al
jmp off.b1001
mov al, byte[edi]
mov byte[esi], al
inc esi
mov eax, dword[ebp-0x10]
mov edi, esi
sub edi, eax
cmp byte[ebp+0x13], 1
jne off.b1279
test edi, edi
je off.b1279
dec esi
mov al, byte[esi]
test al, al
js off.b1039
inc esi
jmp off.b1214
movzx eax, al
xor edx, edx
inc edx
cmp byte[eax+0x4b8780], 0
jne off.b1083
mov ebx, dword[ebp-0x10]
cmp edx, 4
jg off.b1080
cmp esi, ebx
jb off.b1080
dec esi
inc edx
movzx eax, byte[esi]
cmp byte[eax+0x4b8780], 0
je off.b1057
mov ebx, dword[ebp-0x24]
movzx eax, byte[esi]
movsx eax, byte[eax+0x4b8780]
test eax, eax
jne off.b1113
call fcn.00483caa
mov dword[eax], 0x2a
jmp off.b575
inc eax
cmp eax, edx
jne off.b1122
add esi, edx
jmp off.b1214
mov eax, dword[ebp-0xc]
mov ecx, dword[eax*4+0x4bd570]
test byte[ecx+ebx+4], 0x48
je off.b1194
mov al, byte[esi]
inc esi
mov byte[ecx+ebx+5], al
mov eax, dword[ebp-0xc]
cmp edx, 2
jl off.b1171
mov ecx, dword[eax*4+0x4bd570]
mov al, byte[esi]
inc esi
mov byte[ecx+ebx+0x25], al
mov eax, dword[ebp-0xc]
cmp edx, 3
jne off.b1190
mov ecx, dword[eax*4+0x4bd570]
mov al, byte[esi]
inc esi
mov byte[ecx+ebx+0x26], al
sub esi, edx
jmp off.b1214
neg edx
mov eax, edx
push 1
cdq
push edx
push eax
push dword[ebp+8]
call fcn.0048825d
add esp, 0x10
mov eax, dword[ebp-0x28]
mov edi, dword[ebp-0x10]
sub esi, edi
shr eax, 1
push eax
push dword[ebp+0xc]
push esi
push edi
push 0
push 0xfde9
call dword[sym.imp.KERNEL32.dll_MultiByteToWideChar]
mov edi, eax
test edi, edi
je off.b562
mov eax, dword[ebp-0xc]
xor ecx, ecx
cmp edi, esi
setne cl
add edi, edi
mov eax, dword[eax*4+0x4bd570]
mov dword[eax+ebx+0x30], ecx
mov eax, dword[ebp-0x10]
mov ebx, dword[ebp-0x18]
cmp eax, dword[ebp+0xc]
je off.b1294
push eax
call fcn.0047b716
pop ecx
cmp ebx, 0xfffffffe
je off.b1301
mov edi, ebx
mov eax, edi
jmp off.b1930
cmp dword[ebp-0x20], 0
je off.b1435
mov esi, dword[ebp-0x10]
mov eax, edi
cdq
mov edi, esi
sub eax, edx
mov ecx, esi
sar eax, 1
lea edx, [edi+eax*2]
cmp edi, edx
jae off.b1420
push 0xd
mov dword[ebp+0x10], 0x1a
pop edi
movzx eax, word[ecx]
cmp ax, word[ebp+0x10]
je off.b1405
cmp ax, di
je off.b1370
mov word[esi], ax
add esi, 2
add ecx, 2
jmp off.b1399
lea eax, [edx-2]
cmp ecx, eax
jae off.b1399
add ecx, 2
push 0xa
pop eax
cmp word[ecx], ax
je off.b1393
push 0xd
pop eax
push eax
pop edi
mov word[esi], ax
add esi, 2
cmp ecx, edx
jb off.b1345
jmp off.b1420
mov eax, dword[ebp-0xc]
mov eax, dword[eax*4+0x4bd570]
or byte[eax+ebx+4], 2
mov eax, dword[ebp-0x10]
mov edi, esi
sub edi, eax
and edi, 0xfffffffe
jmp off.b1279
test ecx, ecx
je off.b1457
mov ecx, dword[ebp-0x10]
push 0xa
pop edx
cmp word[ecx], dx
mov edx, dword[ebp-0xc]
jne off.b1457
or al, 4
jmp off.b1459
and al, 0xfb
mov byte[esi+ebx+4], al
mov eax, dword[ebp-0x10]
mov esi, eax
mov dword[ebp-0x28], eax
lea ecx, [eax+edi]
mov dword[ebp-0x20], ecx
cmp eax, ecx
jae off.b1836
push 0xd
pop ecx
mov dword[ebp+0x10], 0x1a
mov edi, eax
movzx eax, word[edi]
cmp ax, word[ebp+0x10]
je off.b1804
cmp ax, cx
je off.b1520
mov word[esi], ax
jmp off.b1559
mov eax, dword[ebp-0x20]
add eax, 0xfffffffe
cmp edi, eax
jae off.b1570
push 0xa
pop edx
cmp word[edi+2], dx
mov edx, dword[ebp-0xc]
jne off.b1556
push 0xa
pop eax
add edi, 4
mov word[esi], ax
jmp off.b1785
mov word[esi], cx
add esi, 2
add edi, 2
jmp off.b1717
push 0
lea eax, [ebp-0x14]
add edi, 2
push eax
push 2
lea eax, [ebp-8]
push eax
mov eax, dword[edx*4+0x4bd570]
push dword[eax+ebx]
call dword[sym.imp.KERNEL32.dll_ReadFile]
test eax, eax
jne off.b1619
call dword[sym.imp.KERNEL32.dll_GetLastError]
test eax, eax
jne off.b1790
cmp dword[ebp-0x14], 0
je off.b1790
mov edx, dword[ebp-0xc]
mov eax, dword[edx*4+0x4bd570]
test byte[eax+ebx+4], 0x48
je off.b1728
push 0xa
pop eax
push 0xd
cmp word[ebp-8], ax
jne off.b1665
mov word[esi], ax
add esi, 2
jmp off.b1716
pop eax
mov word[esi], ax
add esi, 2
mov ecx, dword[edx*4+0x4bd570]
mov al, byte[ebp-8]
push 0xa
mov byte[ecx+ebx+5], al
mov ecx, dword[edx*4+0x4bd570]
mov al, byte[ebp-7]
mov byte[ecx+ebx+0x25], al
mov eax, dword[edx*4+0x4bd570]
pop ecx
mov byte[eax+ebx+0x26], cl
push 0xd
pop ecx
cmp edi, dword[ebp-0x20]
jb off.b1497
jmp off.b1836
cmp esi, dword[ebp-0x10]
jne off.b1750
push 0xa
pop eax
cmp word[ebp-8], ax
jne off.b1750
mov word[esi], ax
add esi, 2
jmp off.b1714
push 1
push 0xffffffffffffffff
push 0xfffffffffffffffe
push dword[ebp+8]
call fcn.0048825d
mov edx, dword[ebp-0xc]
add esp, 0x10
push 0xa
pop eax
cmp word[ebp-8], ax
je off.b1714
push 0xd
pop ecx
mov word[esi], cx
add esi, 2
jmp off.b1717
mov edx, dword[ebp-0xc]
push 0xd
pop ecx
mov word[esi], cx
add esi, 2
jmp off.b1717
mov ecx, dword[edx*4+0x4bd570]
mov al, byte[ecx+ebx+4]
test al, 0x40
jne off.b1827
or al, 2
mov byte[ecx+ebx+4], al
jmp off.b1836
mov ax, word[edi]
mov word[esi], ax
add esi, 2
mov eax, dword[ebp-0x10]
mov edi, esi
sub edi, eax
jmp off.b1279
call dword[sym.imp.KERNEL32.dll_GetLastError]
push 5
pop esi
cmp eax, esi
jne off.b1884
call fcn.00483caa
mov dword[eax], 9
call fcn.00483c76
mov dword[eax], esi
jmp off.b575
cmp eax, 0x6d
jne off.b568
xor ebx, ebx
jmp off.b578
xor eax, eax
jmp off.b1930
call fcn.00483c76
mov dword[eax], edi
call fcn.00483caa
mov dword[eax], 9
call fcn.00485081
or eax, 0xffffffff
pop edi
pop esi
pop ebx
mov esp, ebp
pop ebp
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/912f1d013a0d6151bc7a7cef6da1b2a0