---
layout: post
title:  "fcn.00409b83 @ 6c5b0418e4a4c57d99cda47d2717045d"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.00409b83
- **Origin (md5):** 6c5b0418e4a4c57d99cda47d2717045d
- **VirusTotal:** [virustotal.com/gui/file/6c5b0418e4a4c57d99cda47d2717045d][virustotal_ref]

# Code Tags
<span class="tag" id="FILE">FILE</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.00409b83@6c5b0418e4a4c57d99cda47d2717045d">fcn.00409b83</a><br>@6c5b0418e4a4c57d99cda47d2717045d</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push ebp
lea ebp, [esp-0x514]
sub esp, 0x590
mov eax, dword[0x43720c]
xor eax, ebp
mov dword[ebp+0x510], eax
mov eax, dword[ebp+0x520]
push esi
xor esi, esi
cmp dword[ebp+0x524], esi
mov dword[ebp-0x64], eax
mov dword[ebp-0x60], esi
mov dword[ebp-0x68], esi
jne off.b60
xor eax, eax
jmp off.b1548
cmp eax, esi
jne off.b103
call fcn.0040e00a
mov dword[eax], esi
call fcn.0040dff7
push esi
push esi
push esi
push esi
push esi
mov dword[eax], 0x16
call fcn.00408d56
add esp, 0x14
or eax, 0xffffffff
jmp off.b1548
push ebx
push edi
mov edi, dword[ebp+0x51c]
mov eax, edi
sar eax, 5
lea esi, [eax*4+0x439c80]
mov eax, dword[esi]
and edi, 0x1f
shl edi, 6
add eax, edi
mov bl, byte[eax+0x24]
add bl, bl
sar bl, 1
cmp bl, 2
mov dword[ebp-0x70], esi
mov byte[ebp-0x71], bl
je off.b156
cmp bl, 1
jne off.b207
mov ecx, dword[ebp+0x524]
not ecx
test cl, 1
jne off.b207
call fcn.0040e00a
xor esi, esi
mov dword[eax], esi
call fcn.0040dff7
push esi
push esi
push esi
push esi
push esi
mov dword[eax], 0x16
call fcn.00408d56
add esp, 0x14
jmp off.b1535
test byte[eax+4], 0x20
je off.b233
push 2
push 0
push 0
push dword[ebp+0x51c]
call fcn.00414a2e
add esp, 0x10
push dword[ebp+0x51c]
call fcn.00415419
test eax, eax
pop ecx
je off.b822
mov eax, dword[esi]
test byte[edi+eax+4], 0x80
je off.b822
call fcn.0040f42f
mov eax, dword[eax+0x6c]
xor ecx, ecx
cmp dword[eax+0x14], ecx
lea eax, [ebp-0x7c]
sete cl
push eax
mov eax, dword[esi]
push dword[edi+eax]
mov dword[ebp-0x78], ecx
call dword[sym.imp.KERNEL32.dll_GetConsoleMode]
test eax, eax
je off.b822
xor ecx, ecx
cmp dword[ebp-0x78], ecx
je off.b323
test bl, bl
je off.b824
call dword[sym.imp.KERNEL32.dll_GetConsoleCP]
mov ebx, dword[ebp-0x64]
mov dword[ebp-0x7c], eax
xor eax, eax
cmp dword[ebp+0x524], eax
mov dword[ebp-0x5c], eax
jbe off.b1447
mov dword[ebp-0x54], eax
mov al, byte[ebp-0x71]
test al, al
jne off.b683
mov cl, byte[ebx]
mov esi, dword[ebp-0x70]
xor eax, eax
cmp cl, 0xa
sete al
mov dword[ebp-0x78], eax
mov eax, dword[esi]
add eax, edi
cmp dword[eax+0x38], 0
je off.b422
mov dl, byte[eax+0x34]
mov byte[ebp+0x508], dl
mov byte[ebp+0x509], cl
and dword[eax+0x38], 0
push 2
lea eax, [ebp+0x508]
push eax
jmp off.b491
movsx eax, cl
push eax
call fcn.0041540b
test eax, eax
pop ecx
je off.b488
mov ecx, dword[ebp-0x64]
sub ecx, ebx
add ecx, dword[ebp+0x524]
xor eax, eax
inc eax
cmp ecx, eax
jbe off.b800
push 2
lea eax, [ebp-0x58]
push ebx
push eax
call fcn.004153be
add esp, 0xc
cmp eax, 0xffffffff
je off.b1441
inc ebx
inc dword[ebp-0x54]
jmp off.b512
push 1
push ebx
lea eax, [ebp-0x58]
push eax
call fcn.004153be
add esp, 0xc
cmp eax, 0xffffffff
je off.b1441
xor eax, eax
push eax
push eax
push 5
lea ecx, [ebp+0x508]
push ecx
push 1
lea ecx, [ebp-0x58]
push ecx
push eax
push dword[ebp-0x7c]
inc ebx
inc dword[ebp-0x54]
call dword[sym.imp.KERNEL32.dll_WideCharToMultiByte]
mov esi, eax
test esi, esi
je off.b1441
push 0
lea eax, [ebp-0x5c]
push eax
push esi
lea eax, [ebp+0x508]
push eax
mov eax, dword[ebp-0x70]
mov eax, dword[eax]
push dword[edi+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1432
mov eax, dword[ebp-0x54]
mov ecx, dword[ebp-0x68]
add eax, ecx
cmp dword[ebp-0x5c], esi
mov dword[ebp-0x60], eax
jl off.b1441
cmp dword[ebp-0x78], 0
je off.b780
push 0
lea eax, [ebp-0x5c]
push eax
push 1
lea eax, [ebp+0x508]
push eax
mov eax, dword[ebp-0x70]
mov eax, dword[eax]
mov byte[ebp+0x508], 0xd
push dword[edi+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1432
cmp dword[ebp-0x5c], 1
jl off.b1441
inc dword[ebp-0x68]
inc dword[ebp-0x60]
jmp off.b780
cmp al, 1
je off.b691
cmp al, 2
jne off.b715
movzx esi, word[ebx]
xor ecx, ecx
cmp si, 0xa
sete cl
inc ebx
inc ebx
add dword[ebp-0x54], 2
mov dword[ebp-0x58], esi
mov dword[ebp-0x78], ecx
cmp al, 1
je off.b723
cmp al, 2
jne off.b780
push dword[ebp-0x58]
call fcn.004151e9
cmp ax, word[ebp-0x58]
pop ecx
jne off.b1432
inc dword[ebp-0x60]
cmp dword[ebp-0x78], 0
je off.b780
push 0xd
pop eax
push eax
mov dword[ebp-0x58], eax
call fcn.004151e9
cmp ax, word[ebp-0x58]
pop ecx
jne off.b1432
inc dword[ebp-0x60]
inc dword[ebp-0x68]
mov eax, dword[ebp+0x524]
cmp dword[ebp-0x54], eax
jb off.b355
jmp off.b1441
mov ecx, dword[esi]
mov dl, byte[ebx]
inc dword[ebp-0x60]
mov byte[edi+ecx+0x34], dl
mov ecx, dword[esi]
mov dword[edi+ecx+0x38], eax
jmp off.b1441
xor ecx, ecx
mov eax, dword[esi]
add eax, edi
test byte[eax+4], 0x80
je off.b1393
test bl, bl
mov eax, dword[ebp-0x64]
mov dword[ebp-0x58], ecx
jne off.b1002
cmp dword[ebp+0x524], ecx
mov dword[ebp-0x5c], eax
jbe off.b1495
jmp off.b872
mov esi, dword[ebp-0x70]
mov ecx, dword[ebp-0x5c]
and dword[ebp-0x54], 0
sub ecx, dword[ebp-0x64]
lea eax, [ebp-0x50]
cmp ecx, dword[ebp+0x524]
jae off.b932
mov edx, dword[ebp-0x5c]
inc dword[ebp-0x5c]
mov dl, byte[edx]
inc ecx
cmp dl, 0xa
jne off.b917
inc dword[ebp-0x68]
mov byte[eax], 0xd
inc eax
inc dword[ebp-0x54]
mov byte[eax], dl
inc eax
inc dword[ebp-0x54]
cmp dword[ebp-0x54], 0x400
jb off.b885
mov ebx, eax
lea eax, [ebp-0x50]
sub ebx, eax
push 0
lea eax, [ebp-0x6c]
push eax
push ebx
lea eax, [ebp-0x50]
push eax
mov eax, dword[esi]
push dword[edi+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1432
mov eax, dword[ebp-0x6c]
add dword[ebp-0x60], eax
cmp eax, ebx
jl off.b1441
mov eax, dword[ebp-0x5c]
sub eax, dword[ebp-0x64]
cmp eax, dword[ebp+0x524]
jb off.b869
jmp off.b1441
cmp bl, 2
mov dword[ebp-0x54], eax
jne off.b1177
cmp dword[ebp+0x524], ecx
jbe off.b1495
jmp off.b1031
mov esi, dword[ebp-0x70]
mov ecx, dword[ebp-0x54]
and dword[ebp-0x5c], 0
sub ecx, dword[ebp-0x64]
lea eax, [ebp-0x50]
cmp ecx, dword[ebp+0x524]
jae off.b1103
mov edx, dword[ebp-0x54]
add dword[ebp-0x54], 2
movzx edx, word[edx]
inc ecx
inc ecx
cmp dx, 0xa
jne off.b1085
add dword[ebp-0x68], 2
mov word[eax], 0xd
inc eax
inc eax
add dword[ebp-0x5c], 2
add dword[ebp-0x5c], 2
mov word[eax], dx
inc eax
inc eax
cmp dword[ebp-0x5c], 0x3ff
jb off.b1044
mov ebx, eax
lea eax, [ebp-0x50]
sub ebx, eax
push 0
lea eax, [ebp-0x6c]
push eax
push ebx
lea eax, [ebp-0x50]
push eax
mov eax, dword[esi]
push dword[edi+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1432
mov eax, dword[ebp-0x6c]
add dword[ebp-0x60], eax
cmp eax, ebx
jl off.b1441
mov eax, dword[ebp-0x54]
sub eax, dword[ebp-0x64]
cmp eax, dword[ebp+0x524]
jb off.b1028
jmp off.b1441
cmp dword[ebp+0x524], ecx
jbe off.b1495
mov ecx, dword[ebp-0x54]
and dword[ebp-0x5c], 0
sub ecx, dword[ebp-0x64]
push 2
lea eax, [ebp+0x3b4]
pop esi
cmp ecx, dword[ebp+0x524]
jae off.b1260
mov edx, dword[ebp-0x54]
movzx edx, word[edx]
add dword[ebp-0x54], esi
add ecx, esi
cmp dx, 0xa
jne off.b1243
mov word[eax], 0xd
add eax, esi
add dword[ebp-0x5c], esi
add dword[ebp-0x5c], esi
mov word[eax], dx
add eax, esi
cmp dword[ebp-0x5c], 0x152
jb off.b1208
xor esi, esi
push esi
push esi
push 0x2ab
lea ecx, [ebp+0x104]
push ecx
lea ecx, [ebp+0x3b4]
sub eax, ecx
cdq
sub eax, edx
sar eax, 1
push eax
mov eax, ecx
push eax
push esi
push 0xfde9
call dword[sym.imp.KERNEL32.dll_WideCharToMultiByte]
mov ebx, eax
cmp ebx, esi
je off.b1432
push 0
lea eax, [ebp-0x6c]
push eax
mov eax, ebx
sub eax, esi
push eax
lea eax, [ebp+esi+0x104]
push eax
mov eax, dword[ebp-0x70]
mov eax, dword[eax]
push dword[edi+eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1357
add esi, dword[ebp-0x6c]
cmp ebx, esi
jg off.b1311
jmp off.b1366
call dword[sym.imp.KERNEL32.dll_GetLastError]
mov dword[ebp-0x58], eax
cmp ebx, esi
jg off.b1441
mov eax, dword[ebp-0x54]
sub eax, dword[ebp-0x64]
cmp eax, dword[ebp+0x524]
mov dword[ebp-0x60], eax
jb off.b1189
jmp off.b1441
push 0
lea ecx, [ebp-0x6c]
push ecx
push dword[ebp+0x524]
push dword[ebp-0x64]
push dword[eax]
call dword[sym.imp.KERNEL32.dll_WriteFile]
test eax, eax
je off.b1432
mov eax, dword[ebp-0x6c]
and dword[ebp-0x58], 0
mov dword[ebp-0x60], eax
jmp off.b1441
call dword[sym.imp.KERNEL32.dll_GetLastError]
mov dword[ebp-0x58], eax
cmp dword[ebp-0x60], 0
jne off.b1540
cmp dword[ebp-0x58], 0
je off.b1492
push 5
pop esi
cmp dword[ebp-0x58], esi
jne off.b1481
call fcn.0040dff7
mov dword[eax], 9
call fcn.0040e00a
mov dword[eax], esi
jmp off.b1535
push dword[ebp-0x58]
call fcn.0040e01d
pop ecx
jmp off.b1535
mov esi, dword[ebp-0x70]
mov eax, dword[esi]
test byte[edi+eax+4], 0x40
je off.b1516
mov eax, dword[ebp-0x64]
cmp byte[eax], 0x1a
jne off.b1516
xor eax, eax
jmp off.b1546
call fcn.0040dff7
mov dword[eax], 0x1c
call fcn.0040e00a
and dword[eax], 0
or eax, 0xffffffff
jmp off.b1546
mov eax, dword[ebp-0x60]
sub eax, dword[ebp-0x68]
pop edi
pop ebx
mov ecx, dword[ebp+0x510]
xor ecx, ebp
pop esi
call fcn.004082f3
add ebp, 0x514
leave
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/6c5b0418e4a4c57d99cda47d2717045d