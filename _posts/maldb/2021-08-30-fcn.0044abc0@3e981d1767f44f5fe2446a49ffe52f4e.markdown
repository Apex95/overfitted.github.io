---
layout: post
title:  "fcn.0044abc0 @ 3e981d1767f44f5fe2446a49ffe52f4e"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.0044abc0
- **Origin (md5):** 3e981d1767f44f5fe2446a49ffe52f4e
- **VirusTotal:** [virustotal.com/gui/file/3e981d1767f44f5fe2446a49ffe52f4e][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Estimated Behaviour
<ul><li class="bhv-desc" id="na">Not Available :(</li></ul>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [0, 0, '<b><a href="/report/fcn.0044abc0@3e981d1767f44f5fe2446a49ffe52f4e">fcn.0044abc0</a><br>@3e981d1767f44f5fe2446a49ffe52f4e</b><br>', 'point { fill-color: #e0440e; }'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push 0xffffffffffffffff
push 0x4c1c7f
mov eax, dword
push eax
mov dword
sub esp, 0x26c
push ebp
push esi
mov esi, ecx
push edi
push esi
lea ecx, [esp+0xbc]
call fcn.004ba7e6
lea eax, [esp+0x1b0]
xor ebp, ebp
push eax
lea ecx, [esp+0xbc]
mov dword[esp+0x284], ebp
call fcn.004ba397
mov ecx, esi
call fcn.0044a7a0
mov edi, eax
cmp edi, ebp
mov dword[esp+0x4c], edi
je off.b5645
mov ecx, edi
call fcn.00447a00
test eax, eax
je off.b5645
mov ecx, edi
call fcn.00447a40
test eax, eax
je off.b5645
cmp dword[esi+0x44c], ebp
je off.b140
mov ecx, esi
call fcn.0044c300
push ebx
mov ecx, esi
call fcn.0044a730
push ebp
mov ecx, esi
mov dword[esp+0x190], eax
call fcn.0044a740
mov ecx, dword[esi+0x5c]
mov edx, dword[esi+0x58]
push ecx
lea eax, [esp+0xc0]
push edx
push eax
call fcn.00461e40
add esp, 0xc
lea ecx, [esp+0xbc]
push ecx
lea ecx, [esp+0x1ac]
call fcn.0044a200
mov eax, dword[esp+0x1b8]
mov ecx, dword[esp+0x1bc]
mov edx, dword[esp+0x1b4]
mov edi, dword[sym.imp.GDI32.dll_DPtoLP]
mov dword[esp+0x78], eax
mov dword[esp+0x7c], ecx
mov ecx, dword[esp+0xc4]
lea eax, [esp+0x74]
mov dword[esp+0x74], edx
mov edx, dword[esp+0x1c0]
push 2
push eax
push ecx
mov byte[esp+0x290], 2
mov dword[esp+0x8c], edx
call edi
mov eax, dword[esi+0x1c]
lea edx, [esp+0x98]
push edx
push eax
call dword[sym.imp.USER32.dll_GetClientRect]
mov edx, dword[esp+0xc4]
lea ecx, [esp+0x98]
push 2
push ecx
push edx
call edi
mov eax, dword[esp+0x98]
mov ecx, dword[esp+0x9c]
mov edx, dword[esp+0xa0]
mov edi, dword[esp+0xa4]
mov dword[esp+0x118], eax
mov dword[esp+0x128], eax
lea eax, [esp+0xb4]
mov dword[esp+0x11c], ecx
mov dword[esp+0x12c], ecx
push eax
mov ecx, esi
mov dword[esp+0x124], edx
mov dword[esp+0x128], edi
mov dword[esp+0x134], edx
mov dword[esp+0x138], edi
call fcn.0044c250
mov edi, dword[eax]
mov ecx, dword[esp+0x98]
add ecx, edi
lea edx, [esp+0x98]
mov ebx, dword[eax+4]
mov eax, dword[esp+0x9c]
mov dword[esp+0x98], ecx
add eax, ebx
lea ecx, [esp+0x74]
mov dword[esp+0x9c], eax
push ecx
lea eax, [esp+0x9c]
push edx
push eax
call dword[sym.imp.USER32.dll_IntersectRect]
mov ecx, dword[esp+0x98]
mov edx, dword[esp+0x9c]
mov dword[esp+0x14], ecx
mov eax, dword[esp+0xa0]
mov ecx, dword[esp+0xa4]
mov dword[esp+0x18], edx
mov dword[esp+0x1c], eax
mov eax, dword[esp+0xc4]
lea edx, [esp+0x14]
push 2
push edx
push eax
mov dword[esp+0x2c], ecx
call dword[sym.imp.GDI32.dll_LPtoDP]
mov dword[esp+0x14c], ebp
mov dword[esp+method.CRgn.virtual_0], 0x4d7894
lea ecx, [esp+0x14]
mov byte[esp+0x284], 3
push ecx
call dword[sym.imp.GDI32.dll_CreateRectRgnIndirect]
push eax
lea ecx, [esp+0x14c]
call fcn.004ba926
mov eax, dword[esp+0x118]
lea edx, [esp+0x74]
add eax, edi
push edx
mov dword[esp+0x11c], eax
lea eax, [esp+0x11c]
lea ecx, [esp+0x11c]
push eax
push ecx
call dword[sym.imp.USER32.dll_IntersectRect]
mov eax, dword[esp+0x11c]
mov ecx, dword[esp+0x120]
mov edx, dword[esp+0x118]
mov dword[esp+0x18], eax
mov dword[esp+0x1c], ecx
mov ecx, dword[esp+0xc4]
lea eax, [esp+0x14]
mov dword[esp+0x14], edx
mov edx, dword[esp+0x124]
push 2
push eax
push ecx
mov dword[esp+0x2c], edx
call dword[sym.imp.GDI32.dll_LPtoDP]
mov dword[esp+0x154], ebp
mov dword[esp+method.CRgn.virtual_0], 0x4d7894
mov edi, dword[sym.imp.GDI32.dll_CreateRectRgnIndirect]
lea edx, [esp+0x14]
push edx
mov byte[esp+0x288], 4
call edi
push eax
lea ecx, [esp+0x154]
call fcn.004ba926
mov edx, dword[esp+0x12c]
lea eax, [esp+0x74]
add edx, ebx
lea ecx, [esp+0x128]
mov dword[esp+0x12c], edx
push eax
lea edx, [esp+0x12c]
push ecx
push edx
call dword[sym.imp.USER32.dll_IntersectRect]
mov ecx, dword[esp+0x12c]
mov edx, dword[esp+0x130]
mov eax, dword[esp+0x128]
mov dword[esp+0x18], ecx
mov dword[esp+0x1c], edx
mov edx, dword[esp+0xc4]
lea ecx, [esp+0x14]
mov dword[esp+0x14], eax
mov eax, dword[esp+0x134]
push 2
push ecx
push edx
mov dword[esp+0x2c], eax
call dword[sym.imp.GDI32.dll_LPtoDP]
mov dword[esp+0x160], ebp
mov ebx, vtable.CRgn.0
mov dword[esp+0x15c], ebx
lea eax, [esp+0x14]
mov byte[esp+0x284], 5
push eax
call edi
push eax
lea ecx, [esp+0x160]
call fcn.004ba926
mov dword[esp+0x6c], ebp
mov dword[esp+0x68], ebx
mov dword[esp+0x4c], ebp
mov dword[esp+0x48], ebx
lea ecx, [esp+0x1b4]
mov byte[esp+0x284], 7
push ecx
call edi
push eax
lea ecx, [esp+0x6c]
call fcn.004ba926
mov edx, dword[esp+0xc4]
mov edi, dword[sym.imp.GDI32.dll_GetCurrentObject]
push 6
push edx
call edi
push eax
call fcn.004ba911
mov dword[esp+0x190], eax
mov eax, dword[esp+0xc4]
push 1
push eax
call edi
push eax
call fcn.004ba911
mov ecx, dword[esp+0xc4]
push 2
push ecx
mov dword[esp+0x19c], eax
call edi
push eax
call fcn.004ba911
push 1
lea ecx, [esp+0xc0]
mov dword[esp+0x1b4], eax
call fcn.004ba056
mov eax, dword[esi+0x44]
mov edi, dword[esp+0x50]
shr eax, 1
and eax, 1
mov ecx, edi
mov dword[esp+0x144], eax
call fcn.00447a00
mov ecx, edi
mov dword[esp+0x64], eax
call fcn.00447ac0
mov ebx, eax
mov ecx, edi
mov dword[esp+0x58], ebx
call fcn.00447a40
mov ecx, edi
mov dword[esp+0x44], eax
call fcn.00447ad0
mov edi, eax
push 1
mov ecx, esi
mov dword[esp+0x3c], edi
call fcn.004b6dba
add eax, ebx
push ebp
mov ecx, esi
mov dword[esp+0x2c], eax
call fcn.004b6dba
lea edx, [esp+0xb4]
add eax, edi
push edx
mov ecx, esi
mov dword[esp+0x14], eax
call fcn.0044a3f0
mov ecx, dword[eax]
mov dword[esp+0x3c], ecx
mov edx, dword[eax+4]
mov dword[esp+0x94], ebp
mov dword[esp+0x40], edx
mov dword[esp+0x90], 0x4cf5b8
lea eax, [esp+0x90]
mov ecx, esi
push eax
mov byte[esp+0x288], 8
call fcn.0044a7f0
push 0xf
call dword[sym.imp.USER32.dll_GetSysColor]
push eax
lea ecx, [esp+0x178]
call fcn.004ba9e3
push 0xffffff
push ebp
push ebp
lea ecx, [esp+0x144]
mov byte[esp+0x290], 9
call fcn.004ba993
push 0x808080
push ebp
push ebp
lea ecx, [esp+0x11c]
mov byte[esp+0x290], 0xa
call fcn.004ba993
push ebp
push ebp
push ebp
lea ecx, [esp+0x1d0]
mov byte[esp+0x290], 0xb
call fcn.004ba993
mov eax, 5
mov dword[esp+0x164], ebp
mov dword[esp+0x16c], ebp
mov dword[esp+0x168], ebp
mov dword[esp+0x170], eax
mov dword[esp+0x17c], ebp
mov dword[esp+0x184], ebp
mov dword[esp+0x180], ebp
mov dword[esp+0x188], eax
lea ecx, [esp+0x1ec]
mov byte[esp+0x284], 0xe
call fcn.00449760
mov ecx, dword[0x4f5b20]
mov dword[esp+0xb0], ecx
mov byte[esp+0x284], 0x10
mov dword[esp+0x54], 1
mov edi, dword[esp+0x54]
cmp edi, 2
jne off.b1575
push 1
lea ecx, [esp+0xc0]
call fcn.004ba13d
mov edx, dword[esi+0x40]
lea ecx, [esp+0xb4]
push edx
call fcn.004ba9e3
cmp eax, ebp
jne off.b1479
xor ecx, ecx
jmp off.b1482
mov ecx, dword[eax+4]
mov edx, dword[esp+0x6c]
lea eax, [esp+0x68]
neg eax
sbb eax, eax
push ecx
and eax, edx
push eax
mov eax, dword[esp+0xc8]
push eax
call dword[sym.imp.GDI32.dll_FillRgn]
mov dword[esp+0xb4], 0x4d6ac8
lea ecx, [esp+0xb4]
mov byte[esp+0x284], 0x11
call fcn.004ba97d
mov ecx, dword[esi+0x5c]
mov edx, dword[esi+0x58]
push ecx
lea eax, [esp+0xc0]
push edx
push eax
mov byte[esp+0x290], 0x10
call fcn.00461e40
add esp, 0xc
cmp dword[esp+0x144], 1
jne off.b3573
mov ecx, dword[esp+0x78]
mov eax, dword[esp+0x40]
cmp ecx, eax
jg off.b2828
cmp edi, 1
jne off.b1939
mov eax, dword[esp+0x38]
xor edi, edi
xor ebx, ebx
cmp eax, ebp
jle off.b1654
push ebx
mov ecx, esi
call fcn.0044a310
push eax
push edi
mov ecx, esi
call fcn.0044a4d0
mov edi, eax
mov eax, dword[esp+0x38]
inc ebx
cmp ebx, eax
jl off.b1626
mov ebx, dword[esp+0x10]
mov eax, dword[esp+0x44]
cmp ebx, eax
jge off.b1694
push ebx
mov ecx, esi
call fcn.0044a310
push eax
push edi
mov ecx, esi
call fcn.0044a4d0
mov edi, eax
mov eax, dword[esp+0x44]
inc ebx
cmp ebx, eax
jl off.b1666
mov edx, dword[esp+0x3c]
mov eax, dword[esp+0x40]
add edi, edx
lea ecx, [esp+0x74]
mov dword[esp+0x20], eax
lea edx, [esp+0x14]
push ecx
lea eax, [esp+0x18]
push edx
push eax
mov dword[esp+0x20], ebp
mov dword[esp+0x28], edi
mov dword[esp+0x24], ebp
call dword[sym.imp.USER32.dll_IntersectRect]
lea ecx, [esp+0x14]
push ecx
call dword[sym.imp.USER32.dll_IsRectEmpty]
test eax, eax
jne off.b2828
mov eax, dword[esp+0xc4]
lea edx, [esp+0x14]
push 2
push edx
push eax
call dword[sym.imp.GDI32.dll_LPtoDP]
lea ecx, [esp+0x14]
push ecx
call dword[sym.imp.GDI32.dll_CreateRectRgnIndirect]
push eax
lea ecx, [esp+0x4c]
call fcn.004ba926
mov edi, dword[esp+0x4c]
lea eax, [esp+0x48]
mov edx, dword[esp+0x6c]
lea ecx, [esp+0x68]
neg eax
sbb eax, eax
push 4
and eax, edi
neg ecx
sbb ecx, ecx
push eax
and ecx, edx
push ecx
push edx
call dword[sym.imp.GDI32.dll_CombineRgn]
lea ecx, [esp+0x48]
call fcn.004ba97d
mov eax, dword[esp+0xc4]
lea edx, [esp+0x14]
push 2
push edx
push eax
call dword[sym.imp.GDI32.dll_DPtoLP]
lea ecx, [esp+0x174]
push ecx
lea ecx, [esp+0xc0]
call fcn.004b9f7a
mov eax, dword[esp+0x20]
mov edx, dword[esp+0x18]
mov ecx, dword[esp+0x1c]
mov edi, dword[esp+0x14]
sub eax, edx
sub ecx, edi
push 0xf00021
push eax
push ecx
push edx
mov edx, dword[esp+0xd0]
push edi
push edx
call dword[sym.imp.GDI32.dll_PatBlt]
jmp off.b2828
mov eax, dword[esp+0x10]
mov edx, dword[esp+0x38]
mov ecx, dword[esp+0x44]
sub eax, edx
xor ebx, ebx
mov dword[esp+0x2c], eax
lea edi, [eax-1]
cmp edi, ecx
mov dword[esp+0x24], edi
jge off.b2828
jmp off.b1980
mov eax, dword[esp+0x2c]
cmp ebx, dword[esp+0x7c]
jg off.b2828
cmp edi, eax
jl off.b2266
mov eax, dword[esp+0x10]
cmp edi, eax
mov edi, dword[esp+0x24]
jge off.b2020
mov ecx, eax
mov eax, dword[esp+0x38]
sub edi, ecx
add edi, eax
push edi
mov ecx, esi
mov dword[esp+0x18], ebx
call fcn.0044a310
push eax
push ebx
mov ecx, esi
call fcn.0044a4d0
mov dword[esp+0x1c], eax
mov eax, dword[esp+0x40]
lea ecx, [esp+0x74]
mov dword[esp+0x20], eax
lea edx, [esp+0x14]
push ecx
lea eax, [esp+0x1d0]
push edx
push eax
mov dword[esp+0x24], ebp
call dword[sym.imp.USER32.dll_IntersectRect]
mov edx, dword[esp+0x1d0]
mov ecx, dword[esp+0x1cc]
mov eax, dword[esp+0x1d4]
mov dword[esp+0x1e0], edx
mov dword[esp+0x1dc], ecx
mov ecx, dword[esp+0x1d8]
lea edx, [esp+0x1dc]
mov dword[esp+0x1e4], eax
push edx
mov dword[esp+0x1ec], ecx
call dword[sym.imp.USER32.dll_IsRectEmpty]
test eax, eax
jne off.b2262
mov ecx, dword[esp+0x50]
lea eax, [esp+0xb0]
push eax
push edi
call fcn.00447a80
lea ecx, [esp+0x90]
test ecx, ecx
je off.b2210
mov eax, dword[esp+0x94]
cmp eax, ebp
je off.b2210
mov edx, dword[esp+0xc0]
push eax
push edx
call dword[sym.imp.GDI32.dll_SelectObject]
push ebp
lea ecx, [esp+0xc0]
call fcn.004ba10e
mov eax, dword[esp+0xb0]
lea edx, [esp+0x14]
push 0x825
push edx
mov ecx, dword[eax-8]
push ecx
push eax
mov eax, dword[esp+0xcc]
lea ecx, [esp+0xcc]
call dword[eax+0x68]
mov edi, dword[esp+0x24]
lea ecx, [esp+0x110]
push ecx
lea ecx, [esp+0xc0]
call fcn.004b9f7a
mov edx, dword[esp+0x2c]
lea eax, [edx-1]
cmp edi, eax
jne off.b2559
mov eax, dword[esp+0x3c]
mov ecx, dword[esp+0x74]
cmp eax, ecx
jl off.b2550
mov edx, dword[esp+0xc4]
mov eax, 1
lea ecx, [esp+0x30]
push eax
push ecx
push edx
mov dword[esp+0x3c], eax
mov dword[esp+0x40], eax
call dword[sym.imp.GDI32.dll_DPtoLP]
lea eax, [esp+0x138]
lea ecx, [esp+0xbc]
push eax
call fcn.004b9f7a
mov ebx, dword[esp+0x40]
mov ecx, dword[esp+0x30]
push ebx
lea edx, [esp+0x22c]
push ecx
push edx
lea ecx, [esp+0xc8]
call fcn.004ba46b
mov eax, dword[esp+0x34]
mov ecx, dword[esp+0x30]
push eax
push ecx
lea ecx, [esp+0xc4]
call fcn.004ba4b7
mov edx, dword[esp+0x34]
mov eax, dword[esp+0x3c]
push edx
push eax
lea ecx, [esp+0xc4]
call fcn.004ba4b7
lea ecx, [esp+0x110]
push ecx
lea ecx, [esp+0xc0]
call fcn.004b9f7a
push ebx
lea edx, [esp+0x23c]
push ebp
push edx
lea ecx, [esp+0xc8]
call fcn.004ba46b
push ebp
push ebp
lea ecx, [esp+0xc4]
call fcn.004ba4b7
mov eax, dword[esp+0x3c]
push ebp
push eax
lea ecx, [esp+0xc4]
call fcn.004ba4b7
mov ecx, dword[esp+0x3c]
push ebx
push ecx
lea ecx, [esp+0xc4]
call fcn.004ba4b7
push ebx
push ebp
lea ecx, [esp+0xc4]
call fcn.004ba4b7
mov ebx, dword[esp+0x3c]
jmp off.b2811
mov ecx, dword[esp+0x10]
mov eax, edi
cmp edi, ecx
jge off.b2577
sub eax, ecx
mov ecx, dword[esp+0x38]
add eax, ecx
push eax
mov ecx, esi
call fcn.0044a310
push eax
push ebx
mov ecx, esi
call fcn.0044a4d0
mov edi, eax
mov eax, dword[esp+0x74]
cmp edi, eax
jl off.b2805
mov eax, dword[esp+0xc4]
lea edx, [esp+0x30]
push 1
push edx
push eax
mov dword[esp+0x3c], ebx
mov dword[esp+0x40], ebp
call dword[sym.imp.GDI32.dll_LPtoDP]
mov ecx, dword[esp+0x30]
mov edx, dword[esp+0xc4]
inc ecx
push 1
mov dword[esp+0x34], ecx
lea ecx, [esp+0x34]
push ecx
push edx
call dword[sym.imp.GDI32.dll_DPtoLP]
lea eax, [esp+0x138]
lea ecx, [esp+0xbc]
push eax
call fcn.004b9f7a
mov ecx, dword[esp+0x40]
mov edx, dword[esp+0x30]
push ecx
lea eax, [esp+0x244]
push edx
push eax
lea ecx, [esp+0xc8]
call fcn.004ba46b
mov ecx, dword[esp+0x30]
push ebp
push ecx
lea ecx, [esp+0xc4]
call fcn.004ba4b7
lea edx, [esp+0x110]
lea ecx, [esp+0xbc]
push edx
call fcn.004b9f7a
push ebp
push edi
lea ecx, [esp+0xc4]
call fcn.004ba4b7
mov eax, dword[esp+0x40]
lea ecx, [esp+0xbc]
push eax
push edi
call fcn.004ba4b7
mov ecx, dword[esp+0x40]
push ecx
push ebx
lea ecx, [esp+0xc4]
call fcn.004ba4b7
mov ebx, edi
mov edi, dword[esp+0x24]
mov eax, dword[esp+0x44]
inc edi
cmp edi, eax
mov dword[esp+0x24], edi
jl off.b1976
mov edx, dword[esp+0x74]
mov eax, dword[esp+0x3c]
cmp edx, eax
jg off.b3564
mov ebx, dword[esp+0x28]
mov ecx, dword[esp+0x58]
mov eax, dword[esp+0x64]
mov edi, dword[esp+0x40]
sub ebx, ecx
cmp ebx, eax
mov dword[esp+0x24], ebx
jge off.b3564
jmp off.b2882
mov ebx, dword[esp+0x24]
xor ebp, ebp
cmp edi, dword[esp+0x80]
jg off.b3564
mov eax, dword[esp+0x28]
cmp ebx, eax
jge off.b2911
sub ebx, eax
mov eax, dword[esp+0x58]
add ebx, eax
push ebx
mov ecx, esi
call fcn.0044a230
push eax
push edi
mov ecx, esi
call fcn.0044a600
mov ebp, eax
mov eax, dword[esp+0x78]
cmp ebp, eax
jl off.b3539
mov eax, dword[esp+0x3c]
mov dword[esp+0x14], 0
mov dword[esp+0x1c], eax
mov eax, dword[esp+0x54]
cmp eax, 1
mov dword[esp+0x18], edi
mov dword[esp+0x20], ebp
jne off.b3177
lea ecx, [esp+0x74]
lea edx, [esp+0x14]
push ecx
lea eax, [esp+0x18]
push edx
push eax
call dword[sym.imp.USER32.dll_IntersectRect]
lea ecx, [esp+0x14]
push ecx
call dword[sym.imp.USER32.dll_IsRectEmpty]
test eax, eax
jne off.b3539
lea edx, [esp+0x174]
lea ecx, [esp+0xbc]
push edx
call fcn.004b9f7a
mov eax, dword[esp+0x20]
mov edx, dword[esp+0x18]
mov ecx, dword[esp+0x1c]
mov edi, dword[esp+0x14]
sub eax, edx
sub ecx, edi
push 0xf00021
push eax
mov eax, dword[esp+0xc8]
push ecx
push edx
push edi
push eax
call dword[sym.imp.GDI32.dll_PatBlt]
mov edx, dword[esp+0xc4]
lea ecx, [esp+0x14]
push 2
push ecx
push edx
call dword[sym.imp.GDI32.dll_LPtoDP]
lea eax, [esp+0x14]
push eax
call dword[sym.imp.GDI32.dll_CreateRectRgnIndirect]
push eax
lea ecx, [esp+0x4c]
call fcn.004ba926
mov edi, dword[esp+0x4c]
lea eax, [esp+0x48]
mov edx, dword[esp+0x6c]
lea ecx, [esp+0x68]
neg eax
sbb eax, eax
push 4
and eax, edi
neg ecx
sbb ecx, ecx
push eax
and ecx, edx
push ecx
push edx
call dword[sym.imp.GDI32.dll_CombineRgn]
lea ecx, [esp+0x48]
call fcn.004ba97d
jmp off.b3539
mov edx, dword[esp+0xc4]
lea ecx, [esp+0x30]
push 1
push ecx
push edx
mov dword[esp+0x3c], 0
mov dword[esp+0x40], edi
call dword[sym.imp.GDI32.dll_LPtoDP]
mov eax, dword[esp+0x34]
mov ecx, dword[esp+0xc4]
inc eax
push 1
mov dword[esp+0x38], eax
lea eax, [esp+0x34]
push eax
push ecx
call dword[sym.imp.GDI32.dll_DPtoLP]
lea edx, [esp+0x138]
lea ecx, [esp+0xbc]
push edx
call fcn.004b9f7a
mov eax, dword[esp+0x34]
lea ecx, [esp+0x230]
push eax
push 0
push ecx
lea ecx, [esp+0xc8]
call fcn.004ba46b
mov edx, dword[esp+0x34]
mov eax, dword[esp+0x3c]
push edx
push eax
lea ecx, [esp+0xc4]
call fcn.004ba4b7
lea ecx, [esp+0x110]
push ecx
lea ecx, [esp+0xc0]
call fcn.004b9f7a
mov edx, dword[esp+0x3c]
push ebp
push edx
lea ecx, [esp+0xc4]
call fcn.004ba4b7
push ebp
push 0
lea ecx, [esp+0xc4]
call fcn.004ba4b7
push edi
push 0
lea ecx, [esp+0xc4]
call fcn.004ba4b7
inc ebx
lea eax, [esp+0x248]
push ebx
push 0x4e9d60
push eax
call dword[sym.imp.USER32.dll_wsprintfA]
lea ecx, [esp+0x9c]
add esp, 0xc
test ecx, ecx
je off.b3438
mov eax, dword[esp+0x94]
test eax, eax
je off.b3438
mov edx, dword[esp+0xc0]
push eax
push edx
call dword[sym.imp.GDI32.dll_SelectObject]
push 0
lea ecx, [esp+0xc0]
call fcn.004ba10e
lea eax, [esp+0x248]
lea ecx, [esp+0x158]
push eax
call fcn.004b3b7a
mov eax, dword[esp+0x158]
lea edx, [esp+0x14]
push 0x825
push edx
mov ecx, dword[eax-8]
mov byte[esp+0x28c], 0x12
push ecx
push eax
mov eax, dword[esp+0xcc]
lea ecx, [esp+0xcc]
call dword[eax+0x68]
lea ecx, [esp+0x158]
mov byte[esp+0x284], 0x10
call fcn.004b3b0c
mov eax, dword[esp+0x24]
mov ecx, dword[esp+0x64]
inc eax
mov edi, ebp
cmp eax, ecx
mov dword[esp+0x24], eax
jl off.b2876
xor ebp, ebp
mov ebx, dword[esp+0x40]
jmp off.b3946
cmp edi, 2
jne off.b3944
cmp dword[esp+0x78], 4
jg off.b3763
cmp dword[esp+0x58], ebp
jne off.b3763
cmp dword[esp+0x28], ebp
jle off.b3763
mov ebx, dword[esp+0x10]
mov ecx, dword[esp+0x38]
mov eax, dword[esp+0x44]
sub ebx, ecx
cmp ebx, eax
mov dword[esp+0x2c], ebp
mov dword[esp+0xac], ebp
jge off.b3763
mov eax, dword[esp+0x10]
mov edi, ebx
cmp ebx, eax
jge off.b3662
mov ecx, eax
mov eax, dword[esp+0x38]
sub edi, ecx
add edi, eax
push edi
mov ecx, esi
call fcn.0044a310
mov ecx, dword[esp+0x28]
mov dword[esp+0xa8], eax
push edi
lea eax, [ecx-1]
mov ecx, dword[esp+0x54]
push eax
call fcn.00447b20
push eax
mov eax, dword[esp+0x2c]
lea edx, [esp+0xac]
push 0x10
push edx
dec eax
push edi
mov edi, dword[esp+0x3c]
push eax
push ebp
lea ecx, [esp+0xd4]
push edi
push ecx
mov ecx, esi
call fcn.0044ddf0
mov edx, dword[esp+0xa8]
mov ecx, esi
push edx
push edi
call fcn.0044a4d0
mov dword[esp+0x2c], eax
mov eax, dword[esp+0x44]
inc ebx
cmp ebx, eax
jl off.b3642
cmp dword[esp+0x74], 4
jg off.b3944
cmp dword[esp+0x38], ebp
jne off.b3944
cmp dword[esp+0x10], ebp
jle off.b3944
mov ebx, dword[esp+0x28]
mov ecx, dword[esp+0x58]
mov eax, dword[esp+0x64]
sub ebx, ecx
cmp ebx, eax
mov dword[esp+0x2c], ebp
mov dword[esp+0xa8], ebp
jge off.b3944
mov eax, dword[esp+0x28]
mov edi, ebx
cmp ebx, eax
jge off.b3843
mov ecx, eax
mov eax, dword[esp+0x58]
sub edi, ecx
add edi, eax
push edi
mov ecx, esi
call fcn.0044a230
mov ecx, dword[esp+0x50]
mov dword[esp+0xac], eax
mov eax, dword[esp+0x10]
dec eax
push eax
push edi
call fcn.00447b20
mov edx, dword[esp+0x10]
push eax
lea ecx, [esp+0xac]
push 8
lea eax, [edx-1]
push ecx
push eax
push edi
mov edi, dword[esp+0x40]
lea eax, [esp+0xd0]
push edi
push ebp
push eax
mov ecx, esi
call fcn.0044ddf0
mov ecx, dword[esp+0xac]
push ecx
push edi
mov ecx, esi
call fcn.0044a600
mov dword[esp+0x2c], eax
mov eax, dword[esp+0x64]
inc ebx
cmp ebx, eax
jl off.b3823
xor ebx, ebx
push 0xffffffffffffffff
push ebp
lea ecx, [esp+0x16c]
mov dword[esp+0x90], ebx
call fcn.0044a0d0
push 0xffffffffffffffff
push ebp
lea ecx, [esp+0x184]
call fcn.0044a0d0
mov edi, dword[esp+0x28]
mov ecx, dword[esp+0x58]
mov eax, dword[esp+0x64]
sub edi, ecx
cmp edi, eax
mov dword[esp+0x24], edi
jge off.b5151
jmp off.b4013
xor ebp, ebp
cmp ebx, dword[esp+0x80]
jg off.b5151
mov eax, dword[esp+0x28]
mov ebp, edi
cmp edi, eax
jge off.b4044
sub ebp, eax
mov eax, dword[esp+0x58]
add ebp, eax
push ebp
mov ecx, esi
mov dword[esp+0x60], ebp
call fcn.0044a230
push eax
push ebx
mov ecx, esi
call fcn.0044a600
mov ecx, eax
mov eax, dword[esp+0x78]
cmp ecx, eax
mov dword[esp+0x1ac], ecx
jl off.b5123
mov edx, dword[esp+0x3c]
mov eax, dword[esp+0x10]
mov ebx, dword[esp+0x38]
mov dword[esp+0x8c], edx
mov edx, dword[esp+0x44]
sub eax, ebx
cmp eax, edx
mov dword[esp+0x2c], eax
jge off.b5123
mov ecx, dword[esp+0x10]
jmp off.b4141
mov ecx, dword[esp+0x10]
mov ebp, dword[esp+0x5c]
mov eax, dword[esp+0x2c]
cmp eax, ecx
jge off.b4153
mov edx, dword[esp+0x38]
sub eax, ecx
add eax, edx
mov edx, dword[esp+0x28]
mov dword[esp+0x60], eax
cmp ebp, edx
jge off.b4184
cmp eax, ecx
jge off.b4175
lea eax, [esp+0x74]
jmp off.b4202
lea eax, [esp+0x118]
jmp off.b4202
cmp eax, ecx
lea eax, [esp+0x128]
jl off.b4202
lea eax, [esp+0x98]
mov ecx, dword[eax]
mov edx, dword[eax+4]
mov edi, dword[esp+0x60]
mov ebp, dword[esp+0x5c]
mov dword[esp+0x198], ecx
mov ecx, dword[eax+8]
mov ebx, dword[esp+0x88]
mov dword[esp+0x1a0], ecx
push 0
mov dword[esp+0x1a0], edx
mov edx, dword[eax+0xc]
mov eax, dword[esp+0x90]
push edi
lea ecx, [esp+0x1f4]
push ebp
push ecx
mov ecx, dword[esp+0x60]
mov dword[esp+0x1b4], edx
mov dword[esp+0x94], eax
call fcn.00447ae0
lea ecx, [esp+0x1ec]
call fcn.00449840
test eax, 0x3c0000
je off.b4655
lea ecx, [esp+0x1ec]
call fcn.00449840
test eax, 0x40000
je off.b4411
mov edx, dword[esp+0x5c]
mov ecx, dword[esp+0x50]
dec edi
push 0
push edi
lea eax, [esp+0x1f4]
push edx
push eax
call fcn.00447ae0
push edi
mov ecx, esi
call fcn.0044a310
mov ecx, dword[esp+0x84]
neg eax
push eax
push ecx
mov ecx, esi
call fcn.0044a4d0
lea ecx, [esp+0x1ec]
mov dword[esp+0x84], eax
call fcn.00449840
test eax, 0x40000
jne off.b4333
lea ecx, [esp+0x1ec]
call fcn.00449840
test eax, 0x80000
je off.b4492
mov ecx, dword[esp+0x50]
dec ebp
push 0
push edi
lea edx, [esp+0x1f4]
push ebp
push edx
call fcn.00447ae0
push ebp
mov ecx, esi
call fcn.0044a230
neg eax
push eax
push ebx
mov ecx, esi
call fcn.0044a600
lea ecx, [esp+0x1ec]
mov ebx, eax
call fcn.00449840
test eax, 0x80000
jne off.b4430
mov edx, dword[esp+0x168]
mov dword[esp+0x140], 0
test edx, edx
jle off.b4575
mov eax, dword[esp+0x17c]
mov ecx, dword[esp+0x164]
sub ecx, eax
mov dword[esp+0x70], ecx
jmp off.b4540
mov ecx, dword[esp+0x70]
cmp dword[ecx+eax], ebp
jne off.b4553
cmp dword[eax], edi
je off.b4701
mov ecx, dword[esp+0x140]
add eax, 4
inc ecx
cmp ecx, edx
mov dword[esp+0x140], ecx
jl off.b4536
cmp ebp, 0xffffffff
je off.b4655
mov dword[esp+0x70], edx
inc edx
push 0xffffffffffffffff
push edx
lea ecx, [esp+0x16c]
call fcn.0044a0d0
mov eax, dword[esp+0x164]
mov ecx, dword[esp+0x70]
push 0xffffffffffffffff
mov dword[eax+ecx*4], ebp
mov eax, dword[esp+0x184]
mov dword[esp+0x74], eax
inc eax
push eax
lea ecx, [esp+0x184]
call fcn.0044a0d0
mov edx, dword[esp+0x17c]
mov eax, dword[esp+0x70]
mov dword[edx+eax*4], edi
cmp dword[esp+0x54], 2
jne off.b4745
mov ecx, dword[esp+0x28]
mov eax, dword[esp+0x5c]
cmp eax, ecx
jge off.b4706
mov edx, dword[esp+0x10]
mov ecx, dword[esp+0x60]
xor eax, eax
cmp ecx, edx
setl al
dec eax
lea ecx, [esp+0x150]
and eax, ecx
jmp off.b4732
or ebp, 0xffffffff
jmp off.b4655
mov edx, dword[esp+0x10]
mov eax, dword[esp+0x60]
cmp eax, edx
lea eax, [esp+0x15c]
jl off.b4732
lea eax, [esp+0x148]
push eax
lea ecx, [esp+0xc0]
call fcn.004ba3a7
cmp ebp, 0xffffffff
je off.b4979
cmp dword[esp+0x54], 1
jne off.b4941
mov edx, dword[esp+0x84]
lea eax, [esp+0x14]
lea ecx, [esp+0x198]
push eax
push ecx
push 0x20
push edi
push ebp
push ebx
lea eax, [esp+0xd4]
push edx
push eax
mov ecx, esi
call fcn.0044d4b0
lea ecx, [esp+0x198]
lea edx, [esp+0x14]
push ecx
lea eax, [esp+0x18]
push edx
push eax
call dword[sym.imp.USER32.dll_IntersectRect]
lea ecx, [esp+0x14]
push ecx
call dword[sym.imp.USER32.dll_IsRectEmpty]
test eax, eax
jne off.b5056
mov eax, dword[esp+0xc4]
lea edx, [esp+0x14]
push 2
push edx
push eax
call dword[sym.imp.GDI32.dll_LPtoDP]
lea ecx, [esp+0x14]
push ecx
call dword[sym.imp.GDI32.dll_CreateRectRgnIndirect]
push eax
lea ecx, [esp+0x4c]
call fcn.004ba926
mov ebp, dword[esp+0x4c]
lea eax, [esp+0x48]
mov edx, dword[esp+0x6c]
lea ecx, [esp+0x68]
neg eax
sbb eax, eax
push 4
and eax, ebp
neg ecx
sbb ecx, ecx
push eax
and ecx, edx
push ecx
push edx
call dword[sym.imp.GDI32.dll_CombineRgn]
lea ecx, [esp+0x48]
call fcn.004ba97d
jmp off.b5056
mov eax, dword[esp+0x84]
lea edx, [esp+0x198]
push 0
push edx
push 1
push edi
push ebp
push ebx
lea ecx, [esp+0xd4]
push eax
push ecx
mov ecx, esi
call fcn.0044d4b0
cmp dword[esp+0x54], 2
jne off.b5056
mov eax, dword[esp+0x144]
mov ecx, dword[esp+0x60]
dec eax
lea edx, [esp+0x198]
neg eax
sbb eax, eax
push 0
and eax, 6
push edx
mov edx, dword[esp+0x64]
add eax, 0x18
push eax
mov eax, dword[esp+0x94]
push ecx
mov ecx, dword[esp+0x9c]
push edx
push eax
lea edx, [esp+0xd4]
push ecx
push edx
mov ecx, esi
call fcn.0044d4b0
mov eax, dword[esp+0x60]
mov ecx, esi
push eax
call fcn.0044a310
mov ecx, dword[esp+0x8c]
push eax
push ecx
mov ecx, esi
call fcn.0044a4d0
mov ecx, dword[esp+0x44]
mov dword[esp+0x8c], eax
mov eax, dword[esp+0x2c]
inc eax
cmp eax, ecx
mov dword[esp+0x2c], eax
jl off.b4129
mov edi, dword[esp+0x24]
mov ecx, dword[esp+0x1ac]
mov eax, dword[esp+0x64]
inc edi
mov ebx, ecx
cmp edi, eax
mov dword[esp+0x88], ebx
mov dword[esp+0x24], edi
jl off.b4011
xor ebp, ebp
push ebp
lea ecx, [esp+0xc0]
call fcn.004ba3a7
mov eax, dword[esp+0x54]
inc eax
cmp eax, 2
mov dword[esp+0x54], eax
jle off.b1428
mov eax, dword[esi+0x44c]
pop ebx
cmp eax, ebp
je off.b5200
mov ecx, esi
call fcn.0044c300
push ebp
lea ecx, [esp+0xbc]
call fcn.004ba3a7
mov edx, dword[esp+0x18c]
lea ecx, [esp+0xb8]
push edx
call fcn.004b9f7a
mov eax, dword[esp+0x190]
lea ecx, [esp+0xb8]
push eax
call fcn.004b9f7a
mov ecx, dword[esp+0x1ac]
push ecx
lea ecx, [esp+0xbc]
call fcn.004b9f7a
mov edx, dword[esp+0x188]
mov ecx, esi
push edx
call fcn.0044a740
lea ecx, [esp+0xac]
mov byte[esp+0x280], 0xf
call fcn.004b3b0c
lea ecx, [esp+0x1e8]
mov byte[esp+0x280], 0xe
call fcn.00449790
mov eax, dword[esp+0x178]
cmp eax, ebp
je off.b5348
push eax
call fcn.004b3876
add esp, 4
mov eax, dword[esp+0x160]
cmp eax, ebp
je off.b5368
push eax
call fcn.004b3876
add esp, 4
mov esi, vtable.CGdiObject.0
mov dword[esp+0x1c0], esi
lea ecx, [esp+0x1c0]
mov byte[esp+0x280], 0x13
call fcn.004ba97d
mov dword[esp+0x10c], esi
lea ecx, [esp+0x10c]
mov byte[esp+0x280], 0x14
call fcn.004ba97d
mov dword[esp+0x134], esi
lea ecx, [esp+0x134]
mov byte[esp+0x280], 0x15
call fcn.004ba97d
mov dword[esp+0x170], esi
lea ecx, [esp+0x170]
mov byte[esp+0x280], 0x16
call fcn.004ba97d
mov dword[esp+0x8c], esi
lea ecx, [esp+0x8c]
mov byte[esp+0x280], 0x17
call fcn.004ba97d
mov dword[esp+0x44], esi
lea ecx, [esp+0x44]
mov byte[esp+0x280], 0x18
call fcn.004ba97d
mov dword[esp+0x64], esi
lea ecx, [esp+0x64]
mov byte[esp+0x280], 0x19
call fcn.004ba97d
mov dword[esp+0x158], esi
lea ecx, [esp+0x158]
mov byte[esp+0x280], 0x1a
call fcn.004ba97d
mov dword[esp+0x14c], esi
lea ecx, [esp+0x14c]
mov byte[esp+0x280], 0x1b
call fcn.004ba97d
mov dword[esp+0x144], esi
lea ecx, [esp+0x144]
mov byte[esp+0x280], 0x1c
call fcn.004ba97d
lea ecx, [esp+0x1a4]
call fcn.0044a220
jmp off.b5726
mov eax, dword[esi+0x40]
lea ecx, [esp+0xb0]
push eax
call fcn.004ba9e3
cmp eax, ebp
jne off.b5669
xor eax, eax
jmp off.b5672
mov eax, dword[eax+4]
mov edx, dword[esp+0xbc]
lea ecx, [esp+0x1b0]
push eax
push ecx
push edx
call dword[sym.imp.USER32.dll_FillRect]
mov dword[esp+0xb0], 0x4d6ac8
lea ecx, [esp+0xb0]
mov byte[esp+0x280], 1
call fcn.004ba97d
lea ecx, [esp+0xb8]
mov dword[esp+0x280], 0xffffffff
call fcn.004ba858
mov ecx, dword[esp+0x278]
pop edi
pop esi
pop ebp
mov dword
add esp, 0x278
ret

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/3e981d1767f44f5fe2446a49ffe52f4e