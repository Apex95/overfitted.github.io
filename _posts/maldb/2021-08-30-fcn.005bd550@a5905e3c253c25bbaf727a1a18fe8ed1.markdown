---
layout: post
title:  "fcn.005bd550 @ a5905e3c253c25bbaf727a1a18fe8ed1"
date:   2021-08-30 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.005bd550
- **Origin (md5):** a5905e3c253c25bbaf727a1a18fe8ed1
- **VirusTotal:** [virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1][virustotal_ref]

# Code Tags
<span class="tag" id="THREAD">THREAD</span>


# Similar Functions

1. [fcn.00680c50][similar_1_ref] (sim.: 0.9662459165998355)
2. [fcn.00680030][similar_2_ref] (sim.: 0.9651909393358774)
3. [fcn.005ba960][similar_3_ref] (sim.: 0.9629599457924508)
4. [fcn.0069ed20][similar_4_ref] (sim.: 0.9628515948019611)
5. [fcn.006a0db0][similar_5_ref] (sim.: 0.961341705594939)


# Disassembled Code

{% highlight nasm %}
push r15
push r14
push r13
push r12
push rbp
push rdi
push rsi
push rbx
sub rsp,0x118
cmp dword[rcx+0x168],1
mov rbx,rcx
mov qword[rsp+0x168],rdx
je 0x5bd590
add rsp,0x118
pop rbx
pop rsi
pop rdi
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
movzx eax,byte[rcx+0x16c]
lea r14,[rcx+0x16c]
test al,al
jne 0x5bd577
mov rcx,qword[rcx+0x160]
mov edx,0x1001
call fcn.00671a10
movsxd rsi,eax
mov eax,0x10000
cmp rsi,0x10000
cmovae rax,rsi
mov rcx,rax
mov rdi,rax
mov qword[rsp+0x88],rax
call fcn.00a5af70
mov rdx,rax
mov rcx,rax
mov r8,rdi
add rdx,rdi
mov qword[rsp+0x28],rax
mov qword[rsp+0x78],rdx
mov r15,rdx
xor edx,edx
call sub.msvcrt.dll_memset
mov rcx,rdi
call fcn.00a5af70
mov rdx,rax
mov rcx,rax
mov qword[rsp+0x58],rax
add rdx,rdi
mov rax,rdi
shr rsi,1
mov rdi,rdx
mov qword[rsp+0x68],rdx
mov r8,rax
xor edx,edx
call sub.msvcrt.dll_memset
mov rax,qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
mov qword[rsp+0x30],rsi
mov qword[rsp+0x90],rdi
mov qword[rsp+0x98],r15
mov byte[rsp+0x67],0
mov qword[rsp+0x50],0
mov qword[rsp+0x48],rax
mov rax,qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov qword[rsp+0xa8],rax
movzx eax,byte[r14]
test al,al
jne 0x5be31d
cmp byte[rsp+0x67],0
jne 0x5bdb0d
mov rsi,qword[rsp+0x78]
sub rsi,qword[rsp+0x28]
cmp qword[rsp+0x50],rsi
jae 0x5bd72f
mov rax,qword[rsp+0x168]
mov rdi,qword[rsp+0x50]
lea rdx,[0x00935500]
mov rcx,qword[rsp+0x28]
mov rax,qword[rax]
sub rsi,rdi
add rcx,rdi
mov qword[rsp+0xc8],rsi
mov rax,qword[rax+0x10]
cmp rax,rdx
jne 0x5be0f0
mov rax,qword[rsp+0x168]
mov rdi,qword[rax+8]
mov rax,qword[rax+0x10]
mov qword[rsp+0x20],rax
sub rax,rdi
mov rdx,rdi
cmp rax,rsi
cmovbe rsi,rax
mov rax,qword[rsp+0x168]
mov r8,rsi
mov qword[rsp+0xc8],rsi
add rdi,rsi
add rdx,qword[rax+0x18]
call sub.msvcrt.dll_memcpy
mov rax,qword[rsp+0x168]
mov qword[rax+8],rdi
mov rax,rsi
test rax,rax
jne 0x5bdfab
test rsi,rsi
je 0x5bdb0d
add qword[rsp+0x50],rsi
mov rdi,qword[rsp+0x68]
sub rdi,qword[rsp+0x58]
cmp rdi,qword[rsp+0x88]
jb 0x5bde66
mov rsi,qword[rsp+0x88]
mov rax,qword[rsp+0x58]
add rax,rsi
cmp rdi,rsi
cmovbe rax,qword[rsp+0x68]
mov qword[rsp+0x68],rax
mov rdi,qword[rsp+0x78]
sub rdi,qword[rsp+0x28]
mov rcx,qword[rsp+0x50]
cmp rdi,rcx
mov qword[rsp+0x20],rdi
jb 0x5bdf0b
jbe 0x5bd796
mov rax,qword[rsp+0x28]
mov qword[rsp+0x20],rcx
add rax,rcx
mov qword[rsp+0x78],rax
mov rax,qword[rsp+0x68]
sub rax,qword[rsp+0x58]
xor edi,edi
mov qword[rsp+0xc0],0
xor ebp,ebp
mov qword[rsp+0x50],0
mov qword[rsp+0x70],rax
shr rax,1
mov qword[rsp+0x80],rax
mov rax,qword[sym.imp.KERNEL32.dll_CreateEventA]
mov qword[rsp+0xa0],rax
nop dword[rax+rax]
cmp rbp,qword[rsp+0x20]
jae 0x5bdca9
movzx eax,byte[r14]
test al,al
jne 0x5bdc7c
cmp edi,0xffffffff
je 0x5bdae0
mov rax,qword[rsp+0x20]
mov rdi,qword[rsp+0x30]
lea r9,[rsp+0xc0]
mov rdx,qword[rbx+0x160]
mov rcx,qword[0x00a7d830]
sub rax,rbp
cmp rax,rdi
cmova rax,rdi
mov qword[rsp+0xc0],rax
mov rax,qword[rsp+0x28]
lea r8,[rax+rbp]
call fcn.00680c50
test eax,eax
mov edi,eax
jle 0x5bd9a0
movsxd r13,eax
mov rax,qword[rsp+0x48]
call rax
lea rdx,[rbx+0x3c]
mov ecx,eax
mov dword[rsp+0x40],eax
add rbp,r13
xor eax,eax
mov qword[rsp+0x38],rdx
lock cmpxchg dword[rdx],eax
cmp ecx,eax
je 0x5bdad0
lea rsi,[rbx+0x40]
mov r15d,dword[rbx+0x40]
jmp 0x5bd883
mov r15d,eax
mov edx,r15d
mov r8d,r15d
mov rcx,rsi
or edx,0x80000000
call fcn.008eebc0
cmp r15d,eax
jne 0x5bd880
test r15d,r15d
js 0x5bdb28
mov rax,qword[rsp+0x38]
mov esi,dword[rsp+0x40]
xchg dword[rax],esi
mov dword[rbx+0x38],1
lea rdx,[rbx+8]
lea rcx,[rbx+0x20]
lea r12,[0x009371d0]
call fcn.00a21530
mov r15,qword[rbx+0x28]
mov rsi,qword[rbx+0x20]
cmp rsi,r15
jne 0x5bd8e9
jmp 0x5bd910
add rsi,8
cmp r15,rsi
je 0x5bd910
mov rcx,qword[rsi]
mov rax,qword[rcx]
mov rax,qword[rax+0x30]
cmp rax,r12
je 0x5bd8e0
add rsi,8
xor r8d,r8d
xor edx,edx
mov r9,r13
call rax
cmp r15,rsi
jne 0x5bd8e9
nop dword[rax+rax]
mov eax,dword[rbx+0x38]
sub eax,1
test eax,eax
mov dword[rbx+0x38],eax
jne 0x5bd7e0
mov rcx,qword[rsp+0x38]
xchg dword[rcx],eax
mov eax,0x80000000
lea rsi,[rbx+0x40]
lock xadd dword[rsi],eax
test eax,0x40000000
jne 0x5bd7e0
cmp eax,0x80000000
je 0x5bd7e0
mov r12d,dword[rbx+0x40]
jmp 0x5bd954
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rsi
or edx,0x40000000
call fcn.008eebc0
cmp r12d,eax
jne 0x5bd951
and r12d,0x40000000
jne 0x5bd7e0
lea r12,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r12],rax
test rax,rax
mov rsi,rax
mov rcx,rax
je 0x5be162
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5bd7e0
cmp eax,0xffffffff
jne 0x5bd7e0
cmp byte[rsp+0x67],0
jne 0x5bda96
mov rsi,qword[rsp+0x70]
cmp qword[rsp+0x50],rsi
jae 0x5bda96
mov r13,rsi
mov rsi,qword[rsp+0x50]
mov rax,qword[rsp+0x80]
mov rcx,qword[rsp+0x58]
lea rdx,[0x00935500]
sub r13,rsi
cmp r13,rax
cmova r13,rax
mov rax,qword[rsp+0x168]
add rcx,rsi
mov qword[rsp+0xc8],r13
mov rax,qword[rax]
mov rax,qword[rax+0x10]
cmp rax,rdx
jne 0x5bde41
mov rax,qword[rsp+0x168]
mov rsi,qword[rax+8]
mov rax,qword[rax+0x10]
mov qword[rsp+0x38],rax
sub rax,rsi
mov rdx,rsi
cmp rax,r13
cmovbe r13,rax
mov rax,qword[rsp+0x168]
mov r8,r13
mov qword[rsp+0xc8],r13
add rsi,r13
add rdx,qword[rax+0x18]
call sub.msvcrt.dll_memcpy
mov rax,qword[rsp+0x168]
mov qword[rax+8],rsi
mov rax,r13
test rax,rax
jne 0x5bdcf6
test r13,r13
je 0x5bdb03
add qword[rsp+0x50],r13
jmp 0x5bd7e0
mov rcx,rbx
call fcn.005ba960
mov eax,esi
movzx esi,ah
test sil,sil
jne 0x5bd7e0
movzx eax,byte[r14]
test al,al
jne 0x5bd7e0
mov rcx,qword[rbx+0x160]
mov r9d,1
mov r8d,1
mov edx,0xfa
mov rax,qword[rcx]
call qword[rax+0x58]
test al,al
mov esi,eax
je 0x5bda88
jmp 0x5bda80
add dword[rbx+0x38],1
jmp 0x5bd8b7
mov rax,qword[rsp+0x28]
mov rcx,qword[rbx+0x160]
mov r8d,dword[rsp+0xc0]
lea rdx,[rax+rbp]
mov rax,qword[rcx]
call qword[rax+0x18]
jmp 0x5bd840
mov byte[rsp+0x67],1
jmp 0x5bd7e0
cmp qword[rsp+0x50],0
sete al
test al,al
jne 0x5bdbf3
mov byte[rsp+0x67],1
jmp 0x5bd72f
mov edx,dword[rbx+0x40]
jmp 0x5bdb32
mov edx,eax
lea eax,[rdx+1]
mov r12d,edx
or r12d,0x80000000
test edx,edx
cmovs r12d,eax
mov eax,edx
lock cmpxchg dword[rsi],r12d
cmp eax,edx
jne 0x5bdb30
shr edx,0x1f
test dl,dl
je 0x5bd8a5
mov eax,r12d
shr eax,0x1f
test al,al
je 0x5bd8a5
lea r10,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r10],rax
test rax,rax
mov r15,rax
je 0x5be342
mov qword[rsp+0x160],rbx
mov rbx,qword[rsp+0xa8]
xor r8d,r8d
mov edx,0xffffffff
mov rcx,r15
call rbx
mov edx,r12d
and edx,0x7fffffff
or edx,0x40000000
test edx,edx
js 0x5bdbcf
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rsi],ecx
cmp eax,edx
je 0x5bdbe6
mov edx,eax
test edx,edx
jns 0x5bdbb0
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rsi],ecx
cmp eax,edx
jne 0x5bdbc9
mov r12d,eax
jmp 0x5bdb90
mov rbx,qword[rsp+0x160]
jmp 0x5bd8a5
lea rax,[rbx+0x38]
lea rcx,[rsp+0xd0]
mov byte[rsp+0xd8],0
lea rdi,[0x009371f0]
mov qword[rsp+0xd0],rax
call fcn.00943240
lea rdx,[rbx+8]
lea rcx,[rbx+0x20]
call fcn.00a21530
mov rsi,qword[rbx+0x28]
mov rbx,qword[rbx+0x20]
cmp rbx,rsi
je 0x5bdc51
mov rcx,qword[rbx]
mov rax,qword[rcx]
mov rax,qword[rax+0x40]
cmp rax,rdi
jne 0x5be3eb
add rbx,8
cmp rsi,rbx
jne 0x5bdc35
cmp byte[rsp+0xd8],0
je 0x5bdc68
mov rcx,qword[rsp+0xd0]
call fcn.00962120
mov rax,qword[rsp+0x58]
mov rbx,qword[rsp+0x28]
mov qword[rsp+0x28],rax
mov qword[rsp+0x58],rbx
mov rax,qword[rsp+0x28]
test rax,rax
je 0x5bdc8e
mov rcx,rax
call fcn.00a5af30
mov rax,qword[rsp+0x58]
test rax,rax
je 0x5bd577
mov rcx,rax
call fcn.00a5af30
jmp 0x5bd577
mov rax,qword[rsp+0x98]
mov rdi,qword[rsp+0x90]
mov qword[rsp+0x90],rax
mov qword[rsp+0x98],rdi
mov rax,qword[rsp+0x78]
mov rdi,qword[rsp+0x68]
mov qword[rsp+0x68],rax
mov qword[rsp+0x78],rdi
mov rax,qword[rsp+0x28]
mov rdi,qword[rsp+0x58]
mov qword[rsp+0x58],rax
mov qword[rsp+0x28],rdi
jmp 0x5bd665
lea r15,[rbx+0x3c]
call qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
mov ecx,eax
mov dword[rsp+0x38],eax
xor eax,eax
lock cmpxchg dword[r15],eax
cmp ecx,eax
je 0x5bdf02
lea rsi,[rbx+0x40]
mov r12d,dword[rbx+0x40]
jmp 0x5bdd23
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rsi
or edx,0x80000000
call fcn.008eebc0
cmp r12d,eax
jne 0x5bdd20
test r12d,r12d
js 0x5be204
mov eax,dword[rsp+0x38]
xchg dword[r15],eax
mov dword[rbx+0x38],1
lea rdx,[rbx+8]
lea rcx,[rbx+0x20]
lea r12,[0x009371d0]
call fcn.00a21530
mov r10,qword[rbx+0x28]
mov rsi,qword[rbx+0x20]
cmp rsi,r10
je 0x5bddb5
mov qword[rsp+0x160],rbx
mov rbx,r12
mov r12,r10
jmp 0x5bdd8d
add rsi,8
cmp r12,rsi
je 0x5bddad
mov rcx,qword[rsi]
mov rax,qword[rcx]
mov rax,qword[rax+0x30]
cmp rax,rbx
je 0x5bdd84
xor r9d,r9d
mov r8,qword[rsp+0xc8]
xor edx,edx
call rax
jmp 0x5bdd84
mov rbx,qword[rsp+0x160]
mov eax,dword[rbx+0x38]
sub eax,1
test eax,eax
mov dword[rbx+0x38],eax
jne 0x5bda66
xchg dword[r15],eax
mov eax,0x80000000
lea rsi,[rbx+0x40]
lock xadd dword[rsi],eax
test eax,0x40000000
jne 0x5bda66
cmp eax,0x80000000
je 0x5bda66
mov r12d,dword[rbx+0x40]
jmp 0x5bddf5
mov r12d,eax
mov edx,r12d
mov r8d,r12d
mov rcx,rsi
or edx,0x40000000
call fcn.008eebc0
cmp r12d,eax
jne 0x5bddf2
and r12d,0x40000000
jne 0x5bda66
lea r12,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r12],rax
test rax,rax
mov rsi,rax
mov rcx,rax
je 0x5be3b0
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5bda66
mov rdx,rcx
lea r8,[rsp+0xc8]
mov rcx,qword[rsp+0x168]
call rax
mov r13,rax
mov rax,qword[rsp+0xc8]
jmp 0x5bda5d
mov rbp,qword[rsp+0x88]
sub rbp,rdi
je 0x5bd765
mov rax,qword[rsp+0x90]
sub rax,qword[rsp+0x68]
cmp rbp,rax
jbe 0x5be142
mov rax,rdi
not rax
cmp rbp,rax
ja 0x5be78c
cmp rdi,rbp
mov rsi,rbp
cmovae rsi,rdi
add rsi,rdi
jb 0x5be1ae
xor r12d,r12d
test rsi,rsi
mov qword[rsp+0x90],0
jne 0x5be1b5
test rdi,rdi
jne 0x5be1d1
lea rax,[r12+rbp]
xor edx,edx
mov r8,rbp
mov rcx,r12
mov qword[rsp+0x68],rax
call sub.msvcrt.dll_memset
cmp qword[rsp+0x58],0
je 0x5bdef8
mov rcx,qword[rsp+0x58]
call fcn.00a5af30
mov qword[rsp+0x58],r12
jmp 0x5bd765
add dword[rbx+0x38],1
jmp 0x5bdd53
mov rax,qword[rsp+0x98]
sub rax,qword[rsp+0x78]
mov rbp,rcx
sub rbp,rdi
cmp rax,rbp
jae 0x5be115
mov rax,rdi
not rax
cmp rax,rbp
jb 0x5be65c
cmp rdi,rbp
mov rax,rbp
cmovae rax,rdi
add rax,rdi
jb 0x5be650
test rax,rax
jne 0x5be2fb
xor esi,esi
mov qword[rsp+0x98],0
xor r12d,r12d
test rdi,rdi
jne 0x5be2cb
lea rax,[r12+rbp]
xor edx,edx
mov r8,rbp
mov rcx,r12
mov qword[rsp+0x78],rax
call sub.msvcrt.dll_memset
cmp qword[rsp+0x28],0
je 0x5bdf94
mov rcx,qword[rsp+0x28]
call fcn.00a5af30
mov rax,qword[rsp+0x78]
mov qword[rsp+0x28],r12
sub rax,rsi
mov qword[rsp+0x20],rax
jmp 0x5bd796
call qword[sym.imp.KERNEL32.dll_GetCurrentThreadId]
mov r15d,eax
lea rax,[rbx+0x3c]
mov rdi,rax
mov qword[rsp+0x20],rax
xor eax,eax
lock cmpxchg dword[rdi],eax
cmp r15d,eax
je 0x5be1a5
lea rdi,[rbx+0x40]
mov ebp,dword[rbx+0x40]
jmp 0x5bdfda
mov ebp,eax
mov edx,ebp
mov r8d,ebp
mov rcx,rdi
or edx,0x80000000
call fcn.008eebc0
cmp ebp,eax
jne 0x5bdfd8
test ebp,ebp
js 0x5be6ea
mov rax,qword[rsp+0x20]
xchg dword[rax],r15d
mov dword[rbx+0x38],1
lea rdx,[rbx+8]
lea rcx,[rbx+0x20]
lea r12,[0x009371d0]
call fcn.00a21530
mov rbp,qword[rbx+0x28]
mov rdi,qword[rbx+0x20]
cmp rdi,rbp
jne 0x5be039
jmp 0x5be059
add rdi,8
cmp rbp,rdi
je 0x5be059
mov rcx,qword[rdi]
mov rax,qword[rcx]
mov rax,qword[rax+0x30]
cmp rax,r12
je 0x5be030
xor r9d,r9d
mov r8,qword[rsp+0xc8]
xor edx,edx
call rax
jmp 0x5be030
mov eax,dword[rbx+0x38]
sub eax,1
test eax,eax
mov dword[rbx+0x38],eax
jne 0x5bd721
mov rdi,qword[rsp+0x20]
xchg dword[rdi],eax
mov eax,0x80000000
lea rbp,[rbx+0x40]
lock xadd dword[rbp],eax
test eax,0x40000000
jne 0x5bd721
cmp eax,0x80000000
je 0x5bd721
mov edi,dword[rbx+0x40]
jmp 0x5be0a2
mov edi,eax
mov edx,edi
mov r8d,edi
mov rcx,rbp
or edx,0x40000000
call fcn.008eebc0
cmp edi,eax
jne 0x5be0a0
and edi,0x40000000
jne 0x5bd721
lea rbp,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[rbp],rax
test rax,rax
mov rdi,rax
mov rcx,rax
je 0x5be5e1
call qword[sym.imp.KERNEL32.dll_SetEvent]
jmp 0x5bd721
mov rdx,rcx
lea r8,[rsp+0xc8]
mov rcx,qword[rsp+0x168]
call rax
mov rsi,rax
mov rax,qword[rsp+0xc8]
jmp 0x5bd718
mov rax,qword[rsp+0x78]
mov r8,rbp
xor edx,edx
lea rsi,[rax+rbp]
mov rcx,rax
call sub.msvcrt.dll_memset
mov rax,rsi
sub rax,qword[rsp+0x28]
mov qword[rsp+0x78],rsi
mov qword[rsp+0x20],rax
jmp 0x5bd796
mov rax,qword[rsp+0x68]
mov r8,rbp
xor edx,edx
lea rsi,[rax+rbp]
mov rcx,rax
call sub.msvcrt.dll_memset
mov qword[rsp+0x68],rsi
jmp 0x5bd765
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
mov rax,qword[rsp+0xa0]
call rax
test rax,rax
mov rcx,rax
je 0x5be4ef
mov rax,rsi
lock cmpxchg qword[r12],rcx
test rax,rax
mov rsi,rax
je 0x5bd995
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rsi
jmp 0x5bd995
add dword[rbx+0x38],1
jmp 0x5be008
mov rsi,0xffffffffffffffff
mov rcx,rsi
call fcn.00a5af70
mov r12,rax
lea rax,[rax+rsi]
mov qword[rsp+0x90],rax
jmp 0x5bdec7
mov rdx,qword[rsp+0x58]
mov r8,rdi
mov rcx,r12
call sub.msvcrt.dll_memmove
mov rax,qword[rsp+0x88]
lea rcx,[r12+rdi]
mov r8,rbp
xor edx,edx
add rax,r12
mov qword[rsp+0x68],rax
call sub.msvcrt.dll_memset
jmp 0x5bdeee
mov edx,dword[rbx+0x40]
jmp 0x5be20b
mov edx,eax
lea eax,[rdx+1]
mov r10d,edx
or r10d,0x80000000
test edx,edx
cmovs r10d,eax
mov eax,edx
lock cmpxchg dword[rsi],r10d
cmp eax,edx
jne 0x5be209
mov eax,r10d
shr eax,0x1f
test al,al
je 0x5bdd45
shr edx,0x1f
test dl,dl
je 0x5bdd45
lea rax,[rbx+0x48]
mov rcx,rax
mov qword[rsp+0x40],rax
xor eax,eax
lock cmpxchg qword[rcx],rax
test rax,rax
mov r12,rax
je 0x5be45d
mov dword[rsp+0x40],r10d
mov edx,0xffffffff
xor r8d,r8d
mov rcx,r12
call qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov r10d,dword[rsp+0x40]
mov edx,r10d
and edx,0x7fffffff
or edx,0x40000000
jmp 0x5be2b0
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rsi],ecx
cmp eax,edx
mov r10d,eax
je 0x5bdd45
mov edx,r10d
test edx,edx
jns 0x5be28d
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rsi],ecx
cmp eax,edx
mov r10d,eax
jne 0x5be2ad
jmp 0x5be261
mov rdx,qword[rsp+0x28]
mov r8,rdi
mov rcx,r12
call sub.msvcrt.dll_memmove
mov rax,qword[rsp+0x50]
lea rcx,[r12+rdi]
mov r8,rbp
xor edx,edx
add rax,r12
mov qword[rsp+0x78],rax
call sub.msvcrt.dll_memset
jmp 0x5bdf8a
mov rsi,rax
mov rcx,rsi
call fcn.00a5af70
mov r12,rax
lea rax,[rax+rsi]
mov rsi,r12
mov qword[rsp+0x98],rax
jmp 0x5bdf63
mov rax,qword[rsp+0x58]
test rax,rax
je 0x5be32f
mov rcx,rax
call fcn.00a5af30
mov rax,qword[rsp+0x28]
test rax,rax
jne 0x5bdc9c
jmp 0x5bd577
mov qword[rsp+0xb0],r10
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
mov qword[rsp+0xb8],rax
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r15,rax
mov r10,qword[rsp+0xb0]
mov r11,qword[rsp+0xb8]
je 0x5be681
mov rax,r11
lock cmpxchg qword[r10],r15
test rax,rax
je 0x5bdb80
mov rcx,r15
mov qword[rsp+0xb0],rax
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r11,qword[rsp+0xb0]
mov r15,r11
jmp 0x5bdb80
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x5be3f4
mov rax,rsi
lock cmpxchg qword[r12],rcx
test rax,rax
mov rsi,rax
je 0x5bde36
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rsi
jmp 0x5bde36
xor edx,edx
call rax
jmp 0x5bdc48
lea rbx,[rsp+0xd0]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xe0],0xb
mov qword[rsp+0xe8],rsi
mov qword[rsp+0xf8],0
mov qword[rsp+0xf0],rax
lea rax,[0x00b72480]
mov byte[rsp+0x100],0
mov qword[rsp+0xd0],rax
call fcn.00947760
mov dword[rsp+0xb8],r10d
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
mov qword[rsp+0xb0],rax
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r12,rax
mov r11,qword[rsp+0xb0]
mov r10d,dword[rsp+0xb8]
je 0x5be558
mov rcx,qword[rsp+0x40]
mov rax,r11
lock cmpxchg qword[rcx],r12
test rax,rax
je 0x5be261
mov dword[rsp+0xb0],r10d
mov rcx,r12
mov qword[rsp+0x40],rax
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov r11,qword[rsp+0x40]
mov r10d,dword[rsp+0xb0]
mov r12,r11
jmp 0x5be261
call fcn.00a5af30
mov rcx,rbx
call fcn.008da260
lea rbx,[rsp+0xd0]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xe0],0xb
mov qword[rsp+0xe8],rsi
mov qword[rsp+0xf8],0
mov qword[rsp+0xf0],rax
lea rax,[0x00b72480]
mov byte[rsp+0x100],0
mov qword[rsp+0xd0],rax
call fcn.00947760
lea rbx,[rsp+0xd0]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xe0],0xb
mov qword[rsp+0xe8],rsi
mov qword[rsp+0xf8],0
mov qword[rsp+0xf0],rax
lea rax,[0x00b72480]
mov byte[rsp+0x100],0
mov qword[rsp+0xd0],rax
call fcn.00947760
lea rax,[0x00b72450]
mov rcx,rbx
mov qword[rsp+0xd0],rax
call fcn.00962490
call fcn.00a55e20
jmp 0x5be5c1
xor ecx,ecx
xor r9d,r9d
xor r8d,r8d
xor edx,edx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov rcx,rax
je 0x5be79d
mov rax,rdi
lock cmpxchg qword[rbp],rcx
test rax,rax
mov rdi,rax
je 0x5be0e0
call qword[sym.imp.KERNEL32.dll_CloseHandle]
mov rcx,rdi
jmp 0x5be0e0
test rax,rax
je 0x5be635
mov rcx,rax
call fcn.00a5af30
mov rax,qword[rsp+0x58]
test rax,rax
je 0x5be4e7
mov qword[rsp+0x28],rax
mov rcx,rax
jmp 0x5be4e2
mov rsi,0xffffffffffffffff
jmp 0x5be2fe
lea rcx,[0x00aa9427]
call fcn.00a4f830
mov rdi,qword[rsp+0x28]
mov rbx,rax
mov rax,qword[rsp+0x58]
mov qword[rsp+0x58],rdi
mov qword[rsp+0x28],rax
jmp 0x5be628
lea rbx,[rsp+0xd0]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xe0],0xb
mov qword[rsp+0xe8],rsi
mov qword[rsp+0xf8],0
mov qword[rsp+0xf0],rax
lea rax,[0x00b72480]
mov byte[rsp+0x100],0
mov qword[rsp+0xd0],rax
call fcn.00947760
mov edx,dword[rbx+0x40]
jmp 0x5be6f2
mov edx,eax
lea eax,[rdx+1]
mov ebp,edx
or ebp,0x80000000
test edx,edx
cmovs ebp,eax
mov eax,edx
lock cmpxchg dword[rdi],ebp
cmp eax,edx
jne 0x5be6f0
shr edx,0x1f
test dl,dl
je 0x5bdff9
mov eax,ebp
shr eax,0x1f
test al,al
je 0x5bdff9
lea r10,[rbx+0x48]
xor eax,eax
lock cmpxchg qword[r10],rax
test rax,rax
mov r13,rax
mov r12,rax
je 0x5be82f
mov r13d,0xffffffff
mov edx,r13d
xor r8d,r8d
mov rcx,r12
call qword[sym.imp.KERNEL32.dll_WaitForSingleObjectEx]
mov edx,ebp
and edx,0x7fffffff
or edx,0x40000000
test edx,edx
js 0x5be810
lea ecx,[rdx-1]
mov eax,edx
and ecx,0x3fffffff
or ecx,0x80000000
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov ebp,eax
je 0x5bdff9
mov edx,ebp
jmp 0x5be761
lea rcx,[0x00aa9427]
call fcn.00a4f830
jmp 0x5be5c1
lea rbx,[rsp+0xd0]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xe0],0xb
mov qword[rsp+0xe8],rsi
mov qword[rsp+0xf8],0
mov qword[rsp+0xf0],rax
lea rax,[0x00b72480]
mov byte[rsp+0x100],0
mov qword[rsp+0xd0],rax
call fcn.00947760
nop word cs:[rax+rax]
mov ecx,edx
mov eax,edx
and ecx,0xbfffffff
lock cmpxchg dword[rdi],ecx
cmp eax,edx
mov ebp,eax
je 0x5be744
mov edx,ebp
jmp 0x5be761
mov qword[rsp+0x38],r10
xor r9d,r9d
xor r8d,r8d
xor edx,edx
xor ecx,ecx
call qword[sym.imp.KERNEL32.dll_CreateEventA]
test rax,rax
mov r12,rax
mov r10,qword[rsp+0x38]
je 0x5be87b
mov rax,r13
lock cmpxchg qword[r10],r12
test rax,rax
mov r13,rax
je 0x5be73e
mov rcx,r12
mov r12,r13
call qword[sym.imp.KERNEL32.dll_CloseHandle]
jmp 0x5be73e
lea rbx,[rsp+0xd0]
call fcn.006ea660
lea rdx,[0x00aa940a]
mov rcx,rbx
mov rsi,rax
call fcn.009de540
lea rax,[rbx+0x30]
mov rcx,rbx
mov dword[rsp+0xe0],0xb
mov qword[rsp+0xe8],rsi
mov qword[rsp+0xf8],0
mov qword[rsp+0xf0],rax
lea rax,[0x00b72480]
mov byte[rsp+0x100],0
mov qword[rsp+0xd0],rax
call fcn.00947760
jmp 0x5be5c1
{% endhighlight %}


[similar_1_ref]: /report/fcn.00680c50@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_2_ref]: /report/fcn.00680030@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_3_ref]: /report/fcn.005ba960@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_4_ref]: /report/fcn.0069ed20@a5905e3c253c25bbaf727a1a18fe8ed1
[similar_5_ref]: /report/fcn.006a0db0@a5905e3c253c25bbaf727a1a18fe8ed1
[virustotal_ref]: https://www.virustotal.com/gui/file/a5905e3c253c25bbaf727a1a18fe8ed1