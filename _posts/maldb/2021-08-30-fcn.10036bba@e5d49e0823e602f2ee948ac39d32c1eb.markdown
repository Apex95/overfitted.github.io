---
layout: post
title:  "fcn.10036bba @ e5d49e0823e602f2ee948ac39d32c1eb"
date:   2021-09-10 15:52:19 +0300
categories: report
index: false
---

# Generic Information
- **Function:** fcn.10036bba
- **Origin (md5):** e5d49e0823e602f2ee948ac39d32c1eb
- **VirusTotal:** [virustotal.com/gui/file/e5d49e0823e602f2ee948ac39d32c1eb][virustotal_ref]

# Code Tags
<span class="tag" id="SCREEN">SCREEN</span>


# Behaviour Tags
<span class="bhv-tag" id="na">N/A</span>

# Similar Functions
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
    var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Y');
        data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
        data.addColumn({'type': 'string', 'role': 'style'});
        
        data.addRows([
    [559.9729614257812, 3144.241943359375, '<b><a href="/report/fcn.10036bba@e5d49e0823e602f2ee948ac39d32c1eb">fcn.10036bba</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'point { fill-color: #e0440e; }'],
[-5671.32666015625, 3394.1416015625, '<b><a href="/report/fcn.100ea61b@e5d49e0823e602f2ee948ac39d32c1eb">fcn.100ea61b</a><br>@e5d49e0823e602f2ee948ac39d32c1eb</b><br>', 'null'],
[2408.5830078125, -2976.635009765625, '<b><a href="/report/fcn.0045fb7d@9c2b894b84f59672d8be2e984066f76f">fcn.0045fb7d</a><br>@9c2b894b84f59672d8be2e984066f76f</b><br>', 'null'],

        ]);

    var options = {
        title: 'Similarity Plot',
        legend: 'none',
        colors: ['#dedbd9', '#e6693e', '#ec8f6e', '#f3b49f', '#f6c7b6'],
        tooltip: {isHtml: true, trigger: 'both'},
        explorer: {
        actions: ["dragToZoom", "rightClickToReset"],
        },
        chartArea: {
        width: '80%',
        height: '80%'
        },
        width: '100%',
        height: '100%'
    };

    var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

    chart.draw(data, options);
    }
    
</script>


<div id="chart_div" style="width: 100%px; height: 100%;"></div>

# Disassembled Code
{% highlight nasm %}

push 0xc8
mov eax, 0x1013d064
call fcn.10124157
mov ebx, ecx
mov eax, dword[ebp+8]
mov edx, dword[ebp+0xc]
mov esi, dword[ebp+0x10]
mov dword[ebp-0x88], eax
mov eax, dword[ebp+0x14]
mov dword[ebp-0x7c], edx
mov dword[ebp-0x8c], esi
test eax, eax
js 0x100373eb
cmp eax, dword[ebx+4]
jge 0x100373eb
cmp dword[ebp+0x24], 0
je 0x10036c16
call fcn.100218d1
cmp dword[eax+0x1ac], 8
jg 0x10036c13
xor eax, eax
inc eax
jmp 0x100373ed
mov edx, dword[ebp-0x7c]
mov ecx, dword[ebx+0x68]
lea edi, [ebx+0x6c]
mov eax, dword[ebx+0x64]
add eax, edx
mov dword[ebp-0x1c], esi
mov dword[ebp-0x18], eax
lea eax, [esi+ecx]
mov dword[ebp-0x20], edx
mov dword[ebp-0x14], eax
lea esi, [ebp-0x20]
movsd dword
xor ecx, ecx
movsd dword
movsd dword
movsd dword
cmp dword[ebx+0x20], ecx
je 0x10036c46
mov dword[ebp-0x5c], ecx
mov dword[ebp-0x54], ecx
jmp 0x10036c52
mov eax, dword[ebp+0x20]
mov dword[ebp-0x54], eax
mov eax, dword[ebp+0x18]
mov dword[ebp-0x5c], eax
push 0x20
mov dword[ebp-0x9c], ecx
pop esi
cmp dword[ebp+0x28], ecx
je 0x10036c65
cmp dword[ebp+0x1c], ecx
je 0x10036c8c
cmp dword[ebx+0x2c], ecx
je 0x10036c8c
cmp dword[ebx+8], esi
jge 0x10036c8c
push dword[ebx+0x8c]
push dword[0x101a142c]
call dword[sym.imp.GDI32.dll_SelectObject]
mov edx, dword[ebp-0x7c]
xor ecx, ecx
mov dword[ebp-0x9c], eax
mov eax, dword[ebx+0x20]
xor edi, edi
inc edi
mov dword[ebp-0xb4], eax
cmp dword[ebx+8], esi
jne 0x10036ca9
test eax, eax
je 0x10036ca9
mov dword[ebp-0x68], edi
mov dword[ebx+0x20], ecx
jmp 0x10036cac
mov dword[ebp-0x68], ecx
cmp dword[ebx+8], esi
je 0x10036cc2
cmp dword[0x101a1400], 0
jne 0x10036cc2
mov eax, dword[ebx+0xa8]
jmp 0x10036cc5
or eax, 0xffffffff
xor ecx, ecx
mov dword[ebp-0x74], eax
cmp eax, 0xffffffff
mov dword[ebp-0x70], eax
mov eax, dword[ebx+0x20]
setne cl
mov dword[ebp-0x80], ecx
test eax, eax
jne 0x10036ce7
mov edi, dword[ebp-0x88]
test ecx, ecx
je 0x10036cea
lea edi, [ebx+0x44]
mov dword[ebp-0x84], edi
test eax, eax
jne 0x10036cfd
test ecx, ecx
jne 0x10036cfd
mov dword[ebp-0x60], edx
jmp 0x10036d01
and dword[ebp-0x60], 0
test eax, eax
jne 0x10036d14
test ecx, ecx
jne 0x10036d14
mov eax, dword[ebp-0x8c]
mov dword[ebp-0x64], eax
jmp 0x10036d18
and dword[ebp-0x64], 0
lea esi, [ebx+0x7c]
mov eax, dword[esi]
mov dword[ebp-0x78], eax
mov eax, dword[ebx+0x80]
push esi
mov dword[ebp-0x6c], eax
call dword[sym.imp.USER32.dll_IsRectEmpty]
test eax, eax
je 0x10036d39
mov eax, dword[ebx+0x54]
jmp 0x10036d3e
mov eax, dword[esi+8]
sub eax, dword[esi]
push esi
mov dword[ebp-0x58], eax
call dword[sym.imp.USER32.dll_IsRectEmpty]
test eax, eax
je 0x10036d51
mov eax, dword[ebx+0x58]
jmp 0x10036d57
mov eax, dword[esi+0xc]
sub eax, dword[esi+4]
cmp dword[ebx+0x20], 0
mov edx, dword[ebp-0x80]
mov dword[ebp-0x50], eax
jne 0x10036d6b
test edx, edx
je 0x10036e0a
and dword[ebp-0x20], 0
and dword[ebp-0x1c], 0
mov eax, dword[ebx+0x54]
mov ecx, dword[ebx+0x58]
mov dword[ebp-0x18], eax
mov dword[ebp-0x14], ecx
test edx, edx
je 0x10036dc6
call fcn.100218d1
mov ecx, dword[ebp-0x74]
cmp ecx, dword[eax+0x1c]
je 0x10036dc6
push ecx
lea ecx, [ebp-0xac]
call fcn.10016fa7
push dword[ebp-0xa8]
lea eax, [ebp-0x20]
push eax
push dword[edi+4]
call dword[sym.imp.USER32.dll_FillRect]
lea ecx, [ebp-0xac]
mov dword[ebp-0xac], 0x1014cb44
call fcn.100171ad
jmp 0x10036de3
call fcn.100218d1
add eax, 0x98
je 0x10036dd5
mov eax, dword[eax+4]
push eax
lea eax, [ebp-0x20]
push eax
push dword[edi+4]
call dword[sym.imp.USER32.dll_FillRect]
mov ecx, dword[ebp+0x1c]
test ecx, ecx
je 0x10036e0d
call fcn.100218d1
cmp dword[eax+0x1ac], 0x10
jne 0x10036e0a
push dword[ebp-0x1c]
push dword[ebp-0x20]
push dword[edi+4]
call dword[sym.imp.GDI32.dll_GetPixel]
mov dword[ebp-0x70], eax
mov ecx, dword[ebp+0x1c]
xor edx, edx
mov dword[ebp-0x98], edx
test ecx, ecx
je 0x10036e2f
cmp dword[ebx+8], 0x18
jl 0x10036e2f
xor ecx, ecx
xor esi, esi
inc esi
mov dword[ebp+0x1c], ecx
mov edx, esi
mov dword[ebp-0x98], esi
mov esi, dword[ebp+0x24]
test esi, esi
je 0x10036e42
mov eax, dword[ebx+8]
sub eax, 0x20
neg eax
sbb eax, eax
and esi, eax
cmp dword[ebp-0x5c], 0
jne 0x1003718f
test ecx, ecx
jne 0x1003718f
test esi, esi
jne 0x10037193
push 0x20
pop ecx
cmp dword[ebx+8], ecx
je 0x10036e70
cmp dword[0x101a1400], esi
je 0x100370c1
mov eax, dword[ebp+0x2c]
mov byte[ebp-0x52], al
xor eax, eax
inc eax
mov word[ebp-0x54], 0
mov byte[ebp-0x51], al
test edx, edx
je 0x10036e8e
mov al, byte[0x10199584]
mov byte[ebp-0x52], al
xor edx, edx
cmp dword[ebp+0x28], edx
je 0x10036ea2
cmp dword[ebx+0x2c], edx
je 0x10036ea2
mov al, byte[0x10199585]
mov byte[ebp-0x52], al
cmp dword[ebp-0x68], 0
lea eax, [ebx+0x64]
jne 0x10036eae
lea eax, [ebx+0x54]
mov esi, dword[eax]
mov eax, dword[eax+4]
mov dword[ebp-0xb0], esi
mov dword[ebp-0x68], eax
cmp dword[ebx+8], ecx
je 0x10037083
mov eax, dword[ebp-0x50]
xor esi, esi
mov ecx, dword[ebp-0x58]
inc esi
push 0x20
mov word[ebp-0x40], si
pop esi
push edx
mov word[ebp-0x3e], si
mov esi, eax
push edx
mov dword[ebp-0x44], eax
lea eax, [ebp-0x5c]
push eax
imul esi, ecx
lea eax, [ebp-0x4c]
push edx
push eax
push edx
mov dword[ebp-0x4c], 0x28
mov dword[ebp-0x48], ecx
mov dword[ebp-0x3c], edx
mov dword[ebp-0x38], esi
mov dword[ebp-0x34], edx
mov dword[ebp-0x30], edx
mov dword[ebp-0x2c], edx
mov dword[ebp-0x28], edx
mov dword[ebp-0x5c], edx
call dword[sym.imp.GDI32.dll_CreateDIBSection]
test eax, eax
je 0x100373eb
and dword[ebp-0x90], 0
mov dword[ebp-0x94], 0x1014cb54
and dword[ebp-4], 0
lea ecx, [ebp-0x94]
push eax
call fcn.10017a05
lea ecx, [ebp-0xc4]
call fcn.1001703e
xor eax, eax
inc eax
push 0
mov byte[ebp-4], al
call dword[sym.imp.GDI32.dll_CreateCompatibleDC]
push eax
lea ecx, [ebp-0xc4]
call fcn.100179cf
push dword[ebp-0x90]
push dword[ebp-0xc0]
call fcn.1001807d
mov ecx, dword[ebx+0x54]
imul ecx, dword[ebp+0x14]
push 0xcc0020
push dword[ebp-0x6c]
mov dword[ebp-0xa0], eax
add ecx, dword[ebp-0x78]
push ecx
push dword[0x101a142c]
push dword[ebp-0x50]
push dword[ebp-0x58]
push 0
push 0
push dword[ebp-0xc0]
call dword[sym.imp.GDI32.dll_BitBlt]
cmp dword[ebx+0xa8], 0xffffffff
jne 0x10036fca
test esi, esi
jle 0x1003700f
mov eax, dword[ebp-0x5c]
or dword[eax], 0xff000000
mov eax, dword[ebp-0x5c]
add eax, 4
mov dword[ebp-0x5c], eax
dec esi
jne 0x10036fb6
jmp 0x1003700f
movzx ecx, byte[ebx+0xa8]
movzx eax, byte[ebx+0xa9]
shl ecx, 8
or ecx, eax
movzx eax, byte[ebx+0xaa]
shl ecx, 8
or ecx, eax
test esi, esi
jle 0x1003700f
mov eax, dword[ebp-0x5c]
mov edx, dword[eax]
cmp edx, ecx
je 0x10037000
or edx, 0xff000000
mov dword[eax], edx
jmp 0x10037003
and dword[eax], 0
mov eax, dword[ebp-0x5c]
add eax, 4
mov dword[ebp-0x5c], eax
dec esi
jne 0x10036ff0
push dword[ebp-0x54]
push dword[ebp-0x50]
push dword[ebp-0x58]
push 0
push 0
push dword[ebp-0xc0]
push dword[ebp-0x68]
push dword[ebp-0xb0]
push dword[ebp-0x64]
push dword[ebp-0x60]
push dword[edi+4]
call dword[sym.imp.MSIMG32.dll_AlphaBlend]
mov esi, eax
mov eax, dword[ebp-0xa0]
test eax, eax
jne 0x1003704a
xor ecx, ecx
jmp 0x1003704d
mov ecx, dword[eax+4]
push ecx
push dword[ebp-0xc0]
call fcn.1001807d
lea ecx, [ebp-0xc4]
mov byte[ebp-4], 0
call fcn.10017194
or dword[ebp-4], 0xffffffff
lea ecx, [ebp-0x94]
mov dword[ebp-0x94], 0x1014cb54
call fcn.100171ad
jmp 0x100370b9
push dword[ebp-0x54]
mov eax, dword[ebx+0x54]
push dword[ebp-0x50]
imul eax, dword[ebp+0x14]
push dword[ebp-0x58]
push dword[ebp-0x6c]
add eax, dword[ebp-0x78]
push eax
push dword[0x101a142c]
call fcn.10017c62
push eax
push dword[ebp-0x68]
mov ecx, edi
push esi
push dword[ebp-0x64]
push dword[ebp-0x60]
call fcn.10035b36
mov esi, eax
test esi, esi
jne 0x10037356
mov eax, dword[ebx+0x54]
imul eax, dword[ebp+0x14]
mov esi, dword[ebp-0x50]
push 0xcc0020
push dword[ebp-0x6c]
add eax, dword[ebp-0x78]
push eax
push dword[0x101a142c]
push esi
push dword[ebp-0x58]
push dword[ebp-0x64]
push dword[ebp-0x60]
push dword[edi+4]
call dword[sym.imp.GDI32.dll_BitBlt]
cmp dword[ebp-0x98], 0
je 0x10037359
push edi
lea ecx, [ebp-0xa4]
call fcn.10042a47
cmp dword[ebp-0x70], 0xffffffff
mov dword[ebp-4], 2
jne 0x10037121
call fcn.100218d1
mov eax, dword[eax+0x1c]
mov dword[ebp-0x70], eax
call fcn.100218f9
mov edi, dword[ebp-0x60]
mov edx, dword[ebp-0x64]
mov ecx, dword[ebp-0x58]
mov dword[ebp-0xd4], edi
add edi, 2
add ecx, edi
mov dword[ebp-0xd0], edx
mov dword[ebp-0xcc], ecx
lea ecx, [edx+2]
mov edx, dword[eax]
add ecx, esi
mov dword[ebp-0xc8], ecx
mov ecx, eax
call dword[edx+0xb8]
push eax
push dword[ebp-0x70]
lea esi, [ebp-0xd4]
push 0xffffffffffffffff
sub esp, 0x10
lea ecx, [ebp-0xa4]
mov edi, esp
movsd dword
movsd dword
movsd dword
movsd dword
call fcn.10045261
or dword[ebp-4], 0xffffffff
lea ecx, [ebp-0xa4]
call fcn.10042a5c
jmp 0x10037356
test esi, esi
je 0x100371ec
mov eax, dword[ebx+0x94]
test eax, eax
je 0x100371ec
push eax
push dword[0x101a142c]
call dword[sym.imp.GDI32.dll_SelectObject]
mov ecx, dword[ebx+0x54]
mov esi, eax
imul ecx, dword[ebp+0x14]
push 0xcc0020
push dword[ebp-0x6c]
add ecx, dword[ebp-0x78]
push ecx
push dword[0x101a142c]
push dword[ebp-0x50]
push dword[ebp-0x58]
push dword[ebp-0x64]
push dword[ebp-0x60]
push dword[edi+4]
call dword[sym.imp.GDI32.dll_BitBlt]
push esi
push dword[0x101a142c]
call dword[sym.imp.GDI32.dll_SelectObject]
jmp 0x10037356
test ecx, ecx
jne 0x100371ff
mov eax, dword[ebp-0x54]
test eax, eax
jne 0x100371ff
test esi, esi
je 0x100372db
xor eax, eax
mov ecx, ebx
push 0
inc eax
push eax
push dword[ebp+0x14]
call fcn.1003694a
test esi, esi
je 0x1003721b
mov ecx, dword[ebx+0xb0]
jmp 0x1003721d
xor ecx, ecx
mov eax, dword[edi]
push ecx
mov ecx, edi
call dword[eax+0x30]
mov eax, dword[edi]
mov ecx, edi
push 0xffffff
call dword[eax+0x2c]
cmp dword[ebp+0x1c], 0
je 0x1003728f
call fcn.100218f9
cmp dword[eax+0x58], 0
je 0x1003728f
call fcn.100218d1
mov ecx, edi
push dword[eax+0x10]
call fcn.10022d7f
mov esi, eax
test esi, esi
je 0x1003728f
mov ecx, dword[ebp-0x50]
mov eax, dword[ebp-0x58]
add ecx, 2
push 0xb8074a
push 0
push 0
push dword[0x101a1430]
add eax, 2
push ecx
push eax
mov eax, dword[ebp-0x64]
inc eax
push eax
mov eax, dword[ebp-0x60]
inc eax
push eax
push dword[edi+4]
call dword[sym.imp.GDI32.dll_BitBlt]
push esi
mov ecx, edi
call fcn.10022d7f
call fcn.100218d1
mov ecx, edi
push dword[eax+0x14]
call fcn.10022d7f
mov esi, eax
test esi, esi
je 0x100372d8
mov ecx, dword[ebp-0x50]
mov eax, dword[ebp-0x58]
add ecx, 2
push 0xb8074a
push 0
push 0
push dword[0x101a1430]
add eax, 2
push ecx
push eax
push dword[ebp-0x64]
push dword[ebp-0x60]
push dword[edi+4]
call dword[sym.imp.GDI32.dll_BitBlt]
push esi
mov ecx, edi
call fcn.10022d7f
mov eax, dword[ebp-0x54]
cmp dword[ebp-0x5c], 0
jne 0x100372e5
test eax, eax
je 0x10037356
call fcn.100218d1
add eax, 0xa8
mov ecx, edi
push eax
call fcn.100180dc
mov esi, eax
test esi, esi
je 0x10037356
mov eax, dword[ebp-0x54]
xor ecx, ecx
push dword[ebp+0x1c]
test eax, eax
sete cl
push ecx
push dword[ebp+0x14]
mov ecx, ebx
call fcn.1003694a
mov eax, dword[edi]
mov ecx, edi
push 0
call dword[eax+0x30]
mov eax, dword[edi]
mov ecx, edi
push 0xffffff
call dword[eax+0x2c]
push 0xe20746
push 0
push 0
push dword[0x101a1430]
push dword[ebp-0x50]
push dword[ebp-0x58]
push dword[ebp-0x64]
push dword[ebp-0x60]
push dword[edi+4]
call dword[sym.imp.GDI32.dll_BitBlt]
push esi
mov ecx, edi
call fcn.100180dc
mov esi, dword[ebp-0x50]
xor edx, edx
cmp dword[ebx+0x20], edx
je 0x1003738e
cmp dword[ebp-0x80], edx
je 0x1003736a
mov ecx, dword[ebp-0x74]
jmp 0x10037374
call fcn.100218d1
xor edx, edx
mov ecx, dword[eax+0x1c]
mov eax, dword[ebp-0x88]
test eax, eax
jne 0x10037382
mov eax, edx
jmp 0x10037385
mov eax, dword[eax+4]
push dword[ebx+0x68]
push dword[ebx+0x64]
push ecx
jmp 0x100373ab
cmp dword[ebp-0x80], edx
je 0x100373c6
mov eax, dword[ebp-0x88]
test eax, eax
jne 0x100373a1
mov eax, edx
jmp 0x100373a4
mov eax, dword[eax+4]
push 0xffffffffffffffff
push 0xffffffffffffffff
push dword[ebp-0x74]
push edx
push edx
push dword[ebp-0x84]
push esi
push dword[ebp-0x58]
push dword[ebp-0x8c]
push dword[ebp-0x7c]
push eax
call fcn.10039d47
mov eax, dword[ebp-0x9c]
test eax, eax
je 0x100373dd
push eax
push dword[0x101a142c]
call dword[sym.imp.GDI32.dll_SelectObject]
mov ecx, dword[ebp-0xb4]
mov dword[ebx+0x20], ecx
jmp 0x10036c0b
xor eax, eax
call fcn.10124106
ret 0x28

{% endhighlight %}

[virustotal_ref]: https://www.virustotal.com/gui/file/e5d49e0823e602f2ee948ac39d32c1eb